/*
 * Structural classes naming convention
 *
 * Classes on nodes deeper in the structure inherit the first
 * character of the class used on their parent. Thus tree_title
 * contains tree_t_info, and tree_t_info contains tree_t_i_leaf
 */

/**
 * A node in the tree. This will be an li for a collection or leaf node
 * and should be a div for the root.
 */
.tree {}

/* A child node (not the root) is always an li */
li.tree {
    padding-left: 1em;
}

/* A tree node contains a tree_title and a ul for subnodes.
 * tree_title is a div wrapper around the tree_t_toggle and tree_t_info */
.tree_title {}

/* Open/close button, tree_title_toggle */
.tree_t_toggle {
    margin-right: 1em;
}

/* full path tree_title_info */
.tree_t_info {
    display: inline-block !important;
}

/** tree_title_info_leaf */
.tree_t_i_leaf {
}

/* tree_title_info_leaf_value */
.tree_t_i_l_value {
    font-family: "Courier New", Courier, monospace;
}

/* An alarm button, tree_title_info_alarm */
.tree_t_i_alarm {
    float: left;
    margin: 0.2em;
}

/* tree_title_info_leaf_separator */
.tree_t_i_l_separator {
    color: rgb(0, 100, 105); /* may be complemented in code */
}

/* span that contains change info - tree_title_info_change */
.tree_t_i_change {
    font-size: smaller;
    margin-left: 2em;
    vertical-align: middle;
}

/* The UL that contains all the child nodes under a tree node */
.tree_subtree {
    list-style-type: none;
    -webkit-padding-start: 0;
    -webkit-margin-start: 0;
    margin-top: 0;
    padding-left: 0;
}

/**
 * Class used to associate attributes with nodes.
 * Naming convention is tree-* e.g. tree-isRoot means an isRoot
 * attribute of a tree node
 */

 /* Just the root node */
.tree-isRoot {}
.tree-isRoot > .tree_title > .tree_t_info {
    margin: 0.3em 0 0 0;
}

/* Leaf (value) node */
.tree-isLeaf {}

/* if it's a value, don't display the open/close toggle */
.tree-isLeaf > .tree_title > .tree_t_toggle {
	display: none;
}

/* if it's not a value, don't display the leaf container */
.tree:not(.tree-isLeaf) > .tree_title > .tree_t_info > .tree_t_i_leaf {
	display: none;
}

/* If there's at least one alarm in the node or sub-tree */
.tree-hasAlarms {}

.tree-hasAlarms:not(.tree-isOpen) {
    border-left: 1px solid magenta;
}

/* Set on an alarm button on a node that has no alarm */
.tree-noAlarm > .tree_title > .tree_t_info > .tree_t_i_alarm{
	display: none;
}

/* if it's a valid drop target
.tree-isDropTarget {
    border: 1px solid green;
}

/* Applied when a node is open */
.tree-isOpen {}

/* Applied to tree_title when a node is being hovered over */
.tree-hover {
    border: 1px solid;
}

/* Applied when a subtree has modifications */
.tree-isModified {
    color: rgb(0, 89, 255); /* may be complemented in code */
}

input.in_place_editor {
	border-width: 0px;
	padding: 2px;
}
