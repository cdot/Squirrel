{"version":3,"sources":["js/Translation.js"],"names":["TX","lingo","window","navigator","userLanguage","language","translations","init","tx_ready","test","DEBUG","console","debug","$","ajax","success","data","each","this","attr","tx","removeClass","text","error","a","b","c","m","exec","message","s","i","length","arguments","replace","RegExp","pass","fail","result","eval","warning"],"mappings":";AA4BA,GAAIA,KACAC,MAAOC,OAAOC,UAAUC,cAAgBF,OAAOC,UAAUE,UAAY,KAErEC,aAAc,KAEdC,KAAM,SAASC,UACX,YAEA,IAAI,aAAaC,KAAKT,GAAGC,OAGrB,MAFIS,QAAOC,QAAQC,MAAM,2BACzBJ,WAIJK,GAAEC,KACE,UAAYd,GAAGC,MAAQ,SAEnBc,QAAS,SAASC,MACdhB,GAAGM,aAAeU,KAClBH,EAAE,aAAaI,KAAK,WAChBJ,EAAEK,MACGC,KAAK,QAASnB,GAAGoB,GAAGP,EAAEK,MAAMC,KAAK,WACjCE,YAAY,cAErBR,EAAE,YAAYI,KAAK,WACfJ,EAAEK,MACGI,KAAKtB,GAAGoB,GAAGP,EAAEK,MAAMI,SACnBD,YAAY,aAEjBX,OAAOC,QAAQC,MAAM,mBAAqBZ,GAAGC,MAAQ,KACzDO,YAEJe,MAAO,SAASC,EAAGC,EAAGC,GAClB,GAAIC,GAAI,WAAWC,KAAK5B,GAAGC,MACvBS,QAAOC,QAAQC,MACf,kBAAoBZ,GAAGC,MAAQ,UAAYyB,EAAEG,SAE7C7B,GAAGC,MADH0B,EACWA,EAAE,GAEF,KACf3B,GAAGO,KAAKC,cAKxBY,GAAI,SAASU,GACT,YAEA,IAAIV,IAAIW,CAQR,KANwB,OAApB/B,GAAGM,kBAEe,MADlBc,GAAKpB,GAAGM,aAAawB,KACYV,GAAGY,OAAS,IACzCF,EAAIV,IAGPW,EAAIE,UAAUD,OAAS,EAAGD,EAAI,EAAGA,IAClCD,EAAIA,EAAEI,QAAQ,GAAIC,QAAO,MAAQJ,EAAG,KAAME,UAAUF,GAUxD,OAPAD,GAAIA,EAAEI,QACE,6BACJ,SAASP,EAAGlB,KAAM2B,KAAMC,MACpB,GAAIC,SAAS,CAEb,OADAC,MAAK,WAAa9B,KAAO,KAClB6B,OAASF,KAAOC,QAKnCd,MAAO,WACH,YACA,OAAOvB,IAAGoB,GAAG,UAGjBoB,QAAS,WACL,YACA,OAAOxC,IAAGoB,GAAG","file":"js/Translation.min.js","sourcesContent":["/*@preserve Copyright (C) 2015 Crawford Currie http://c-dot.co.uk license MIT*/\n\n/* eslint no-eval: 1 */\n/* global DEBUG:true */\n\n/**\n * Translations module. Determines the language to use from the browser.\n *\n * Translatable strings are declared in code using `TX.tx(string)` or in\n * HTML using\n * `<... class=\"TX_title\" title=\"string\">` or\n * `<... class=\"TX_text\">string</...>` \n * These are format strings that may be populated with expandable arguments\n * `$1..$N`, for example: `TX.text(\"$1 days of Christmas\", 12)`\n * There is limited support for conditional expansion using the\n * `$?(bexpr,then,else)` macro.\n * If `bexpr1` eval()s to true then the expression will expand to\n * `then`, otherwise it will expand to `else`.\n * Both `then` and `else` must be given, though can be empty.\n * For example, considr `TX.tx(\"$1 day$?($1!=1,s,)\", ndays)`.\n * If `$1!=1` succeeds then the macro expands to `s` otherwise\n * to the empty string. Thus if `ndays` is `1` it will expand to `1 day`\n * but if it is `11` it will expand to `11 days`\n * NOTE: format strings are evalled and could thus be used for cross\n * scripting. User input must never be passed to the formatter. There is\n * no error checking on the eval, and it will throw an exception if the\n * syntax is incorrect.\n */\nvar TX = {\n    lingo: window.navigator.userLanguage || window.navigator.language || \"en\",\n\n    translations: null,\n\n    init: function(tx_ready) {\n        \"use strict\";\n\n        if (/^en(\\b|$)/i.test(TX.lingo)) {\n            if (DEBUG) console.debug(\"Using language 'en'\");\n            tx_ready();\n            return;\n        }\n\n        $.ajax(\n            \"locale/\" + TX.lingo + \".json\",\n            {\n                success: function(data) {\n                    TX.translations = data;\n                    $(\".TX_title\").each(function() {\n                        $(this)\n                            .attr(\"title\", TX.tx($(this).attr(\"title\")))\n                            .removeClass(\"TX_title\");\n                    });\n                    $(\".TX_text\").each(function() {\n                        $(this)\n                            .text(TX.tx($(this).text()))\n                            .removeClass(\"TX_text\");\n                    });\n                    if (DEBUG) console.debug(\"Using language '\" + TX.lingo + \"'\");\n                    tx_ready();\n                },\n                error: function(a, b, c) {\n                    var m = /^(.+)-.+/.exec(TX.lingo);\n                    if (DEBUG) console.debug(\n                        \"Failed to load \" + TX.lingo + \".json: \" + c.message);\n                    if (m)\n                        TX.lingo = m[1];\n                    else\n                        TX.lingo = \"en\";\n                    TX.init(tx_ready);\n                }\n            });\n    },\n\n    tx: function(s) {\n        \"use strict\";\n\n        var tx, i;\n\n        if (TX.translations !== null) {\n            tx = TX.translations[s];\n            if (typeof tx !== \"undefined\" && tx.length > 0)\n                s = tx;\n        }\n\n        for (i = arguments.length - 1; i > 0; i--) {\n            s = s.replace(new RegExp(\"\\\\$\" + i, \"g\"), arguments[i]);\n        }\n\n        s = s.replace(\n                /\\$\\?\\((.*?),(.*?),(.*?)\\)/g,\n            function(m, test, pass, fail) {\n                var result = false;\n                eval(\"result=(\" + test + \")\");\n                return result ? pass : fail;\n            });\n        return s;\n    },\n\n    error: function() {\n        \"use strict\";\n        return TX.tx(\"Error\");\n    },\n\n    warning: function() {\n        \"use strict\";\n        return TX.tx(\"Warning\");\n    }\n};\n"]}