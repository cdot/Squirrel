{"version":3,"sources":["js/Dialogs.js"],"names":["$","S","play_action","action","more","res","client","hoard","record_action","e","ST","$node","Utils","sometime","SD","squeak","title","TX","error","severity","message","Dialog","Tree","widget","_validateUniqueKey","$input","this","get","val","enabled","test","element","data","find","children","each","compare","button","removeClass","attr","tx","addClass","name","open","options","fn","$dlg","id","hasClass","on","getTapEvent","dialog","call","extend","modal","width","closeOnEscape","isTouchCapable","my","at","of","_open_login","toggle","user_required","pass_required","$user","$pass","$signin","sign_in","off","on_signin","store","user","pass","focus","text","_init_delete","type","path","tree","_open_delete","join","_init_pick","_open_pick","i","$f","$which","$from","remove","item_clicked","ii","length","appendTo","charAt","last","_init_randomise","self","generate_password","charset","constraints","$ibling","p","k","pop","push","$new","_open_randomise","my_key","constraints_key","vre","RegExp","replace","removeData","parent","v","m","exec","trigger","_init_search","search","_updateNext","numb","TIMEUNITS","days","alarmd","Date","now","MSPERDAY","toLocaleDateString","deltaTimeString","show","_init_alarm","_open_alarm","_change_image","fail","file","files","read_file","ArrayBufferToBase64","steg","Steganographer","inject","DEBUG","console","debug","h","naturalHeight","w","naturalWidth","height","html","status","IS_LOADED","NEW_SETTINGS","cloud","_init_store_settings","hide","store_path","cb","_open_store_settings","chain","empty","_init_chpw","prop","c","_open_chpw","_init_json","datum","JSON","parse","insert_data","_open_json","select","_init_theme","setTheme","_init_extras","autosave","squirrelDialog","_open_extras","USE_STEGANOGRAPHY","needs_path","_init_insert","add_child_node","_open_insert","$parent","base","Math","max","parseInt","_init_add","autocomplete","source","undefined","_open_add","is_value","_init_squeak","ac","_open_squeak","after_close","squeakAdd","close","called_back","append","ui","jQuery","Squirrel"],"mappings":"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","file":"js/Dialogs.min.js","sourcesContent":["/*@preserve Copyright (C) 2015-2017 Crawford Currie http://c-dot.co.uk license MIT*/\n\n/* eslint-env jquery */\n/* global Utils */\n/* global TX */\n/* global DEBUG:true */\n/* global Steganographer */\n/* global Squirrel */\n\n/**\n * Common code for dialogs. This is enhanced by mixins in the mobile\n * and desktop domains.\n*/\n\n(function($, S) {\n    \"use strict\";\n    var SD = S.Dialog;\n    var ST = S.Tree;\n\n    // The code below requires the environment to define the following\n    // extra methods in the namespace:\n    //\n    // SD.squeak(p) where p is a string or a structure:\n    //    title\n    //    severity (error, warning, notice, while)\n    //    message (string or $object or element)\n    //    after_close\n    // SD.init_open($dlg)\n    // SD.open_open($dlg)\n\n    var widget = {};\n    \n    function play_action(action, more) {\n        var res = S.client.hoard.record_action(\n            action,\n            function(e) {\n                ST.action(\n                    e,\n                    true,\n                    function($node) {\n                        if (more)\n                            more($node);\n                        Utils.sometime(\"update_save\");\n                    });\n            });\n        if (res !== null)\n            SD.squeak({\n                title: TX.error(),\n                severity: \"error\",\n                message: res.message\n            });\n    }\n\n    /* Helper for add, check wrapping node for same key value  */\n    widget._validateUniqueKey = function() {\n        // Disable OK if key value exists or is invalid\n        var $input = this.get(\"key\");\n        var val = $input.val();\n        var enabled = true;\n\n        if (!/\\S/.test(val)) // empty?\n            enabled = false;\n        else {\n            var $ul =  this.element.data(\"parent\").find(\"ul:first\");\n            $ul.children(\".tree-node\").each(function() {\n                if (ST.compare($(this).data(\"key\"), val) == 0) {\n                    enabled = false;\n                    return false;\n                }\n            });\n        }\n            \n        if (enabled) {\n            this.get(\"ok\").button(\"enable\");\n            $input\n                .removeClass(\"dlg-disabled\")\n                .attr(\"title\", TX.tx(\"Enter new name\"));\n        } else {\n            this.get(\"ok\").button(\"disable\");\n            $input\n                .addClass(\"dlg-disabled\")\n                .attr(\"title\", TX.tx(\"Name is already in use\"));\n        }\n    }\n    \n    widget.get = function(name) {\n        return this.element.find(\"[data-id='\" + name + \"']\");\n    };\n\n    widget.open = function(options) {\n        var $dlg = this.element;\n        var id = $dlg.attr(\"id\");\n        var fn;\n\n        if (!$dlg.hasClass(\"dlg-initialised\")) {\n            $dlg.addClass(\"dlg-initialised\");\n            this.get(\"cancel\")\n                .button()\n                .on($.getTapEvent(), function() {\n                    $dlg.dialog(\"close\");\n                    return false;\n                });\n            fn = this[\"_init_\" + id];\n            if (typeof fn !== \"undefined\")\n                fn.call(this, $dlg)\n        }\n        \n        fn = this[\"_open_\" + id];\n        if (typeof fn !== \"undefined\")\n            fn.call(this, $dlg, options);\n\n        if (!options)\n            options = {};\n        \n        $.extend(options, {\n            modal: true,\n            width: \"auto\",\n            closeOnEscape: false\n        });\n        \n        if ($.isTouchCapable()) {\n            $.extend(options, {\n                my: \"left top\",\n                at: \"left top\",\n                of: $(\"body\")\n            });\n        }\n        \n        $dlg.dialog(options);\n    };\n    \n    /**\n     * options:\n     * ok - function called on dialog closed, passing the user and password\n     *      and with this set to the options.store\n     * user_required - set true if the store requires a username\n     * pass_required - set true if the store requires a password\n     * store - store we are logging in to\n     */\n    widget._open_login = function($dlg, options) {\n        this.get(\"uReq\").toggle(options.user_required);\n        this.get(\"pReq\").toggle(options.pass_required);\n\n        var $user = this.get(\"user\");\n        var $pass = this.get(\"pass\");\n        var $signin = this.get(\"signin\");\n\n        var sign_in = function() {\n            $dlg.dialog(\"close\");\n            $signin.off($.getTapEvent());\n            $user.off(\"change\");\n            $pass.off(\"change\");\n            options.on_signin.call(options.store,\n                                   $user.val(),\n                                   $pass.val());\n            return true;\n        };\n\n        $signin\n            .off($.getTapEvent())\n            .on($.getTapEvent(), \"p\", sign_in);\n\n        $user.off(\"change\").val(options.store.user());\n        $pass.off(\"change\").val(options.store.pass());\n\n        if (options.user_required) {\n            $user.attr(\"autofocus\", \"autofocus\");\n            if (options.pass_required) {\n                $user\n                    .off(\"change\")\n                    .on(\"change\", function() {\n                        $pass.focus();\n                    });\n            } else {\n                $user\n                    .off(\"change\")\n                    .on(\"change\", sign_in);\n            }\n            $user.focus();\n        }\n        if (options.pass_required) {\n            this.get(\"foruser\")\n                .toggle(options.store.user() !== null)\n                .text(options.store.user() || \"\");\n            $pass.attr(\"autofocus\", \"autofocus\");\n            if (options.user_required) {\n                $pass.on(\"change\", function() {\n                    $signin.focus();\n                });\n            } else {\n                $pass.focus();\n                $pass.on(\"change\", sign_in);\n            }\n        }\n    };\n\n    /**\n     * Confirm deletion of a node\n     */\n    widget._init_delete = function($dlg) {\n        this.get(\"ok\").on($.getTapEvent(), function() {\n            $dlg.dialog(\"close\");\n            var res = S.client.hoard.record_action(\n                {\n                    type: \"D\",\n                    path: $dlg.data(\"node\").tree(\"getPath\")\n                },\n                function(e) {\n                    ST.action(\n                        e, true,\n                        function() {\n                            Utils.sometime(\"update_save\");\n                        });\n                });\n            if (res !== null) {\n                SD.squeak({\n                    title: TX.error(),\n                    severity: \"error\",\n                    message: res.message\n                });\n                return false;\n            }\n            return true;\n        });\n        this.get(\"cancel\").on($.getTapEvent(), function() {\n            $dlg.dialog(\"close\");\n            return false;\n        });\n    };\n\n    widget._open_delete = function($dlg, options) {\n        var $node = options.$node;\n        $dlg.data(\"node\", $node);\n        this.get(\"path\").text(\n            $node.tree(\"getPath\").join(\"/\"));\n        this.get(\"coll\").toggle(!$node.hasClass(\"tree-leaf\"));\n    };\n\n    widget._init_pick = function($dlg) {\n        $dlg.find(\".clear\")\n            .on($.getTapEvent(), function() {\n                $dlg.find(\".dlg-picked\").removeClass(\"dlg-picked\");\n            });\n    };\n\n    widget._open_pick = function($dlg, options) {\n        var $node = options.$node;\n        \n        var val = $node.find(\".tree-value:first\").text();\n        var $which = this.get(\"which\");\n        var $from = this.get(\"from\");\n        var i, $f;\n\n        $dlg.find(\".dlg-pick-cell\").remove();\n\n        var item_clicked = function() {\n            var ii = $(this).data(\"i\");\n            $dlg\n                .find(\"td.i\" + ii)\n                .addClass(\"dlg-picked\");\n        };\n\n        for (i = 0; i < val.length; i++) {\n            $f = $from.children(\"td.i\" + i);\n            if ($f.length === 0) {\n                $(\"<td></td>\")\n                    .data(\"i\", i)\n                    .addClass(\"dlg-pick-cell i\" + i)\n                    .text(i + 1)\n                    .on($.getTapEvent(), item_clicked)\n                    .appendTo($which);\n                $f = $(\"<td></td>\")\n                    .data(\"i\", i)\n                    .addClass(\"dlg-pick-cell i\" + i)\n                    .on($.getTapEvent(), item_clicked)\n                    .appendTo($from);\n            }\n            $f.text(val.charAt(i));\n        }\n\n        while (i < $from.children(\"td\").length) {\n            $from.children(\"td\").last().remove();\n            i++;\n        }\n\n        $dlg.find(\".dlg-picked\").removeClass(\"dlg-picked\");\n    };\n\n    /**\n     * Password generation for the given leaf node\n     */\n    widget._init_randomise = function($dlg) {\n        var self = this;\n        this.get(\"again\").on($.getTapEvent(), function() {\n            self.get(\"idea\").text(Utils.generate_password(\n                {\n                    length: self.get(\"len\").val(),\n                    charset: self.get(\"chs\").val()\n                }));\n            return false;\n        });\n        this.get(\"use\").on($.getTapEvent(), function() {\n            $dlg.dialog(\"close\");\n            play_action(\n                { \n                    type: \"E\",\n                    path: $dlg.data(\"node\").tree(\"getPath\"),\n                    data: self.get(\"idea\").text()\n                });\n            return true;\n        });\n        this.get(\"remember\").on($.getTapEvent(), function() {\n            var constraints = self.get(\"len\").val() +\n                TX.tx(\" characters from \") +\n                '[' + self.get(\"chs\").val() + ']';\n            var $ibling = $dlg.data(\"constraints\");\n            if ($ibling) {\n                if (constraints != $ibling.data(\"value\")) {\n                    play_action(\n                        { \n                            type: \"E\",\n                            path: $ibling.tree(\"getPath\"),\n                            data: constraints\n                        }, function() {\n                            $ibling.data(\"value\", constraints);\n                        });\n                }\n            } else {\n                var $node = $dlg.data(\"node\");\n                var p = $node.tree(\"getPath\");\n                var k = TX.tx(\"$1 constraints\", p.pop());\n                p.push(k); \n                play_action(\n                    { \n                        type: \"N\",\n                        path: p,\n                        data: constraints\n                    }, function($new) {\n                        $dlg.data(\"constraints\", $new);\n                    });\n            }\n        });\n    };\n\n    widget._open_randomise = function($dlg, options) {\n        var self = this;\n        var $node = options.$node;\n        var my_key = $node.data(\"key\");\n        $dlg.data(\"node\", $node);\n\n        var constraints_key = TX.tx(\"$1 constraints\", $node.data(\"key\"));\n        var vre = new RegExp(\n            \"(\\\\d+)\" +\n                TX.tx(\" characters from \")\n                .replace(/[-\\/\\\\^$*+?.()|\\[\\]\\{\\}]/g, \"\\\\$&\")\n                + \"\\\\[(.*)\\\\]\");\n        $dlg.removeData(\"constraints\");\n        $node.parent().children(\".tree-leaf\").each(function() {\n            var $ibling = $(this);\n            var k = $ibling.data(\"key\");\n            if (k == constraints_key) {\n                var v = $ibling.data(\"value\");\n                var m = vre.exec(v);\n                if (m) {\n                    $dlg.data(\"constraints\", $ibling);\n                    self.get(\"len\").val(m[1]);\n                    self.get(\"chs\").val(m[2]);\n                }\n            }\n        });\n\n        var path = $node.tree(\"getPath\");\n        this.get(\"path\").text(path.join(\"/\"));\n        this.get(\"key\").text(my_key);\n        this.get(\"again\").trigger(\"click\");\n    };\n\n    widget._init_search = function($dlg) {\n        var self = this;\n        this.get(\"ok\")\n            .on($.getTapEvent(), function() {\n                $dlg.dialog(\"close\");\n                S.search(self.get(\"string\").val());\n            });\n        this.get(\"string\")\n            .on(\"change\", function() {\n                self.get(\"ok\").trigger($.getTapEvent());\n            });\n    };\n\n    /**\n     * Reminder setting dialog\n     */\n\n    /* Helper */\n    widget._updateNext = function() {\n        var numb = this.get(\"number\").val();\n        // Convert to days\n        numb = numb * Utils.TIMEUNITS[this.get(\"units\").val()].days;\n        var alarmd = new Date(Date.now() + numb * Utils.MSPERDAY);\n        this.get('when').text(alarmd.toLocaleDateString());\n        this.get(\"next\")\n            .text(Utils.deltaTimeString(alarmd))\n            .show();\n    };\n    \n    widget._init_alarm = function($dlg) {\n        var self = this;\n\n        self.get(\"units\")\n            .on(\"change\", function() {\n                self._updateNext();\n            });\n\n        self.get(\"number\")\n            .on(\"change\", function() {\n                self._updateNext().call();\n            });\n\n        self.get(\"set\")\n            .on($.getTapEvent(), function() {\n                $dlg.dialog(\"close\");\n                var numb = self.get(\"number\").val()\n                    * Utils.TIMEUNITS[self.get(\"units\").val()].days;\n                play_action(\n                    { type: \"A\",\n                      path: $dlg.data(\"node\").tree(\"getPath\"),\n                      data: numb\n                    });\n                return false;\n            });\n\n        self.get(\"clear\")\n            .on($.getTapEvent(), function() {\n                play_action(\n                    { type: \"C\",\n                      path: $dlg.data(\"node\").tree(\"getPath\")\n                    });\n                $dlg.dialog(\"close\");\n                return false;\n            });\n\n    };\n    \n    widget._open_alarm = function($dlg, options) {\n        var $node = options.$node;\n        this.get(\"path\").text($node.tree(\"getPath\").join(\"/\"));\n        $dlg.data(\"node\", $node);\n        this._updateNext();\n    };\n\n    /* Helper */\n    widget._change_image = function() {\n        var self = this;\n        \n        var fail = function(e) {\n            self.get(\"message\").text(TX.tx(\n                \"Cannot use this image because of this error: $1\", e));\n        };\n        var file = self.get(\"file\")[0].files[0];\n        Utils.read_file(\n            file,\n            function(data) {\n                data = \"data:\" + file.type + \";base64,\"\n                    + Utils.ArrayBufferToBase64(data);\n                if (data !== self.get(\"steg_image\").attr(\"src\", data)) {\n                    self.get(\"steg_image\")\n                        .attr(\"src\", data)\n                        .off(\"load\")\n                        .on(\"load\", function() {\n                            $(this).off(\"load\");\n                            // Check that we can use the image.\n                            var steg = new Steganographer(this);\n                            try {\n                                steg.inject(\"tada\");\n                            } catch (e) {\n                                if (DEBUG) console.debug(\"Caught \" + e);\n                                fail(e);\n                                return;\n                            }\n                            self.get(\"ok\").attr(\"disabled\", false);\n                            var h = this.naturalHeight;\n                            var w = this.naturalWidth;\n                            this.height = 100;\n                            self.get(\"message\")\n                                .html(\"<br>\" + w + \" x \" + h);\n                            if (S.client.status === S.IS_LOADED)\n                                S.client.status = S.NEW_SETTINGS;\n                            if (S.cloud.status === S.IS_LOADED)\n                                S.cloud.status = S.NEW_SETTINGS;\n                            Utils.sometime(\"update_save\");\n                        });\n                }\n            },\n            fail,\n            \"arraybuffer\");\n    };\n\n    widget._init_store_settings = function($dlg) {\n        var self = this;\n        self.get(\"file\")\n            .hide()\n            .on($.getTapEvent(), function () {\n                self._change_image();\n            });\n\n        self.get(\"image\")\n            .on($.getTapEvent(), function(e) {\n                self.get(\"file\").trigger(\"change\", e);\n            });\n\n        self.get(\"storepath\").on(\"keyup\", function() {\n            if (self.get(\"storepath\").val() === \"\") {\n                self.get(\"message\").text(TX.tx(\n                    \"Store path may not be empty\"));\n                return false;\n            }\n            if (S.client.hoard.options.store_path !==\n                self.get(\"storepath\").val()) {\n                S.client.hoard.options.store_path =\n                    self.get(\"storepath\").val();\n                if (S.client.status === S.IS_LOADED)\n                    S.client.status = S.NEW_SETTINGS;\n                // No - the cloud isn't affected by the store path,\n                // so don't mark it as changed\n                // if (S.cloud.status === S.IS_LOADED)\n                //     S.cloud.status = S.NEW_SETTINGS;\n                Utils.sometime(\"update_save\");\n            }\n            return true;\n        });\n\n        self.get(\"ok\")\n            .on($.getTapEvent(), function () {\n                if (self.get(\"storepath\").val() === \"\") {\n                    self.get(\"message\").text(TX.tx(\n                        \"Store path may not be empty\"));\n                    return false;\n                }\n                $dlg.dialog(\"close\");\n                var cb = $dlg.data(\"callback\");\n                if (typeof cb === \"function\")\n                    cb();\n            });\n    };\n\n    widget._open_store_settings = function($dlg, chain) {\n        this.get(\"message\").empty();\n        $dlg.data(\"callback\", chain);\n        this.get(\"storepath\").val(\n            S.client.hoard.options.store_path);\n    };\n\n    /**\n     * Master password change dialog\n     */\n    widget._init_chpw = function($dlg) {\n        var self = this;\n        \n        self.get(\"show\")\n            .on(\"change\", function() {\n                if (self.get(\"show\").prop(\"checked\")) {\n                    self.get(\"pass\").attr(\"type\", \"text\");\n                    self.get(\"conf\").attr(\"type\", \"text\");\n                } else {\n                    self.get(\"pass\").attr(\"type\", \"password\");\n                    self.get(\"conf\").attr(\"type\", \"password\");\n                }\n            });\n\n        $dlg.data(\"validate\", function() {\n            var p = self.get(\"pass\").val(),\n                c = self.get(\"conf\").val();\n\n            self.get(\"nomatch\").toggle(p !== c);\n            return (p === c);\n        });\n\n        self.get(\"conf\").on(\"change\", function() {\n            $dlg.data(\"validate\").call();\n        });\n\n        self.get(\"set\")\n            .on($.getTapEvent(), function () {\n                if (!$dlg.data(\"validate\").call())\n                    return false;\n                $dlg.dialog(\"close\");\n                var p = self.get(\"pass\").val();\n                S.client.store.pass(p);\n                S.client.status = S.NEW_SETTINGS;\n                S.cloud.store.pass(p);\n                S.cloud.status = S.NEW_SETTINGS;\n                Utils.sometime(\"update_save\");\n\n                return true;\n            });\n    };\n\n    widget._open_chpw = function($dlg) {\n        $dlg.data(\"validate\").call();\n    };\n    \n    widget._init_json = function($dlg) {\n        var self = this;\n        \n        self.get(\"text\")\n            .on(\"input\", function () {\n                self.get(\"ok\").prop(\"disabled\", false);\n            });\n\n        self.get(\"ok\")\n            .on($.getTapEvent(), function () {\n                $dlg.dialog(\"close\");\n                var datum;\n                try {\n                    datum = JSON.parse(self.get(\"text\").val());\n                } catch (e) {\n                    SD.squeak({\n                        title: TX.tx(\"JSON could not be parsed\"),\n                        severity: \"error\",\n                        message: e\n                    });\n                    return false;\n                }\n                self.get(\"ok\").prop(\"disabled\", true);\n                if (DEBUG) console.debug(\"Importing...\");\n                S.insert_data([], datum);\n                return true;\n            });\n    };\n\n    widget._open_json = function() {\n        var data = S.client.hoard.JSON();\n        this.get(\"text\")\n            .text(data)\n            .select();\n        this.get(\"ok\").prop(\"disabled\", true);\n    };\n\n    widget._init_theme = function() {\n        var self = this;\n        self.get(\"select\")\n            .on(\"change\", function () {\n                S.setTheme($(this).val());\n            });\n    };\n\n    widget._init_extras = function($dlg) {\n        var self = this;\n        self.get(\"autosave\")\n            .on(\"change\", function() {\n                S.client.hoard.options.autosave =\n                    (self.get(\"autosave\").val() === \"on\");\n                Utils.sometime(\"update_save\");\n            });\n\n        self.get(\"chpw\").on($.getTapEvent(), function() {\n            $dlg.dialog(\"close\");\n            $(\"#chpw\").squirrelDialog(\"open\");\n        });\n\n        self.get(\"chss\").on($.getTapEvent(), function() {\n            $dlg.dialog(\"close\");\n            $(\"#store_settings\").squirrelDialog(\"open\");\n        });\n        self.get(\"theme\").on($.getTapEvent(), function() {\n            $dlg.dialog(\"close\");\n            $(\"#theme\").squirrelDialog(\"open\");\n        });\n\n        self.get(\"json\").on($.getTapEvent(), function() {\n            $dlg.dialog(\"close\");\n            $(\"#json\").squirrelDialog(\"open\");\n        });\n\n        self.get(\"about\").on($.getTapEvent(), function() {\n            $dlg.dialog(\"close\");\n            $(\"#about\").squirrelDialog(\"open\");\n        });\n    };\n\n    widget._open_extras = function() {\n        var self = this;\n        \n        if (!(S.USE_STEGANOGRAPHY\n              || S.cloud.store\n              && S.cloud.store.options().needs_path)) {\n            self.get(\"chss\").hide();\n        }\n\n        self.get(\"autosave\").val(\n            S.client.hoard.options.autosave ? \"on\" : \"off\");\n    };\n\n    widget._init_insert = function($dlg) {\n        var self = this;\n        \n        self.get(\"key\")\n            .on(\"input\", function() { self._validateUniqueKey(); });\n        self.get(\"ok\")\n            .button()\n            .on($.getTapEvent(), function() {\n                $dlg.dialog(\"close\");\n                S.add_child_node($dlg.data(\"parent\"),\n                                 self.get(\"key\").val(),\n                                 $dlg.data(\"data\"));\n            });\n    };\n\n    widget._open_insert = function($dlg, options) {\n        if (DEBUG) console.debug(\"Pasting\");\n        var $parent = options.$node;\n        $dlg.data(\"parent\", $parent);\n        $dlg.data(\"data\", options.data);\n        var base = TX.tx(\"A copy\");\n        var name = new RegExp(\"^\" + base + \" ?(\\\\d*)$\");\n        var i = -1;\n        $parent.find(\"ul:first\").children(\".tree-node\").each(function() {\n            var m = name.exec($(this).data(\"key\"));\n            if (m)\n                i = Math.max(i, m[1] ? parseInt(m[1]) : 0);\n        });\n        this.get(\"key\").val(base + (i >= 0 ? (\" \" + (i + 1)) : \"\"));\n    };\n    \n    widget._init_add = function($dlg) {\n        var self = this;\n        \n        self.get(\"key\")\n            .on(\"input\", function() { self._validateUniqueKey(); })\n            .autocomplete({ source: [\n                TX.tx(\"User\"), TX.tx(\"Pass\") ]});\n\n        self.get(\"ok\")\n            .button()\n            .on($.getTapEvent(), function() {\n                $dlg.dialog(\"close\");\n                var $parent = $dlg.data(\"parent\");\n                S.add_child_node(\n                    $parent, self.get(\"key\").val(),\n                    $dlg.data(\"adding_value\") ?\n                        self.get(\"value\").val() : undefined);\n                return false;\n            });\n    };\n\n    widget._open_add = function($dlg, options) {\n        var $parent = options.$node;\n        var is_value = options.is_value;\n        $dlg.data(\"parent\", $parent);\n        $dlg.data(\"adding_value\", is_value);\n\n        this.get(\"path\").text($parent.tree(\"getPath\").join(\" > \") + \" > \");\n        if (is_value) {\n            $dlg.attr(\"title\", TX.tx(\"Add value\"));\n            this.get(\"help\").text(TX.tx(\n                \"Enter the name and value for the new entry\"));\n            this.get(\"value_parts\").show();\n            this.get(\"key\").autocomplete(\"enable\");\n        } else {\n            $dlg.attr(\"title\", TX.tx(\"Add folder\"));\n            this.get(\"help\").text(TX.tx(\n                \"Enter the name for the new folder\"));\n            this.get(\"value_parts\").hide();\n            this.get(\"key\").autocomplete(\"disable\");\n        }\n\n        this._validateUniqueKey();\n    };\n    \n    /**\n     * Generate a modal alert dialog\n     * @param p either a string message, or a structure containing:\n     *  title - dialog title\n     *  message - (string or $object or elem)\n     *  severity - may be one of notice (default), warning, error\n     *  after_close - callback on dialog closed\n     */\n    widget._init_squeak = function($dlg) {\n        this.get(\"close\")\n            .button()\n            .on($.getTapEvent(), function() {\n                var ac = $dlg.data(\"after_close\");\n                $dlg.removeData(\"after_close\");\n                $dlg.dialog(\"close\");\n                if (typeof ac === \"function\")\n                    ac();\n                return false;\n            });\n    };\n\n    widget._open_squeak = function($dlg, p) {\n        if (typeof p === \"string\")\n            p = { message: p, severity: \"notice\" };\n\n        $dlg.data(\"after_close\", p.after_close);\n\n        this.get(\"message\").empty();\n        this.squeakAdd(p);\n\n        var options = {\n            close: function() {\n                if (!called_back) {\n                    if (typeof p.after_close === \"function\")\n                        p.after_close();\n                }\n            }\n        };\n        if (p.title)\n            options.title = p.title;\n    };\n\n    widget.squeakAdd = function(p) {\n        var $dlg = this.element;\n        \n        $dlg.find(\".dlg-while\").remove();\n        if (typeof p === \"string\")\n            p = { message: p, severity: \"notice\" };\n\n        if (!p.severity)\n            p.severity = \"notice\";\n\n        $dlg.find(\".messages\").append(\n            $(\"<div class='dlg-\" + p.severity + \"'></div>\")\n                .append(p.message));\n    };\n\n    $.widget(\"squirrel.squirrelDialog\", $.ui.dialog, widget);\n    \n})(jQuery, Squirrel);\n"]}