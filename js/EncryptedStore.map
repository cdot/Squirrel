{"version":3,"sources":["js/EncryptedStore.js"],"names":["EncryptedStore","params","LayeredStore","call","this","prototype","Object","create","options","$","extend","needs_pass","read","path","ok","fail","self","DEBUG","console","debug","engine","pass","ab","data","AES","decrypt","e","buffer","write","xa","encrypt"],"mappings":";AAiBA,QAASA,gBAAeC,QACpB,YAEAC,cAAaC,KAAKC,KAAMH,QAG5BD,eAAeK,UAAYC,OAAOC,OAAOL,aAAaG,WAEtDL,eAAeK,UAAUG,QAAU,WAC/B,YACA,OAAOC,GAAEC,OACLR,aAAaG,UAAUG,QAAQL,KAAKC,OAEhCO,YAAY,KAIxBX,eAAeK,UAAUO,KAAO,SAASC,KAAMC,GAAIC,MAC/C,YAEA,IAAIC,MAAOZ,IAEPa,QAAOC,QAAQC,MAAM,2BAA6BN,KAClC,kBAAoBG,KAAKI,OAAOC,QACpDjB,KAAKgB,OAAOR,KACRC,KACA,SAASS,IACL,GAAIC,KACJ,KACQN,OAAOC,QAAQC,MACf,6CACMH,KAAKI,OAAOC,QACtBE,KAAOC,IAAIC,QAAQH,GAAIN,KAAKI,OAAOC,OAAQ,KAC7C,MAAOK,GAGL,MAFIT,QAAOC,QAAQC,MAAM,UAAYO,OACrCX,MAAKZ,KAAKa,KAAMU,GAGpBZ,GAAGX,KAAKa,KAAMO,KAAKI,SAEvBZ,OAGRf,eAAeK,UAAUuB,MAAQ,SAASf,KAAMS,GAAIR,GAAIC,MACpD,YAEA,IAAIC,MAAOZ,IAEPa,QAAOC,QAAQC,MAAM,2BAA6BN,KAC3B,kBAAoBG,KAAKI,OAAOC,OAC3D,IAAIQ,GAEJ,KACIA,GAAKL,IAAIM,QAAQR,GAAIlB,KAAKgB,OAAOC,OAAQ,KAC3C,MAAOK,GAGL,MAFIT,QAAOC,QAAQC,MAAM,UAAYO,OACrCX,MAAKZ,KAAKC,KAAMsB,GAIpBtB,KAAKgB,OAAOQ,MACRf,KACAgB,GAAGF,OACH,WACIb,GAAGX,KAAKa,OAEZD","file":"js/EncryptedStore.min.js","sourcesContent":["/*@preserve Copyright (C) 2015 Crawford Currie http://c-dot.co.uk license MIT*/\n\n/* global DEBUG */\n/* global LayeredStore */\n/* global AES */\n\n/**\n * @class\n * Store engine for encrypted data. Uses an underlying engine to actually\n * store the encrypted data.\n * The encryption requires a password, but no attempt is made to determine\n * if the password is correct. Whatever data is held in the underlying\n * store is simply decrypted using the password provided, it's up to the\n * caller to determine if the resulting data is valid or not.\n * @param params: Standard for LayeredStore\n * @implements LayeredStore\n */\nfunction EncryptedStore(params) {\n    \"use strict\";\n\n    LayeredStore.call(this, params);\n}\n\nEncryptedStore.prototype = Object.create(LayeredStore.prototype);\n\nEncryptedStore.prototype.options = function() {\n    \"use strict\";\n    return $.extend(\n        LayeredStore.prototype.options.call(this),\n        {\n            needs_pass: true\n        });\n};\n\nEncryptedStore.prototype.read = function(path, ok, fail) {\n    \"use strict\";\n\n    var self = this;\n\n    if (DEBUG) console.debug(\"EncryptedStore: reading \" + path\n                      + \" with password \" + self.engine.pass());\n    this.engine.read(\n        path,\n        function(ab) {\n            var data;\n            try {\n                if (DEBUG) console.debug(\n                    \"EncryptedStore: decrypting using password \"\n                        + self.engine.pass());\n                data = AES.decrypt(ab, self.engine.pass(), 256);\n            } catch (e) {\n                if (DEBUG) console.debug(\"Caught \" + e);\n                fail.call(self, e);\n                return;\n            }\n            ok.call(self, data.buffer);\n        },\n        fail);\n};\n\nEncryptedStore.prototype.write = function(path, ab, ok, fail) {\n    \"use strict\";\n\n    var self = this;\n\n    if (DEBUG) console.debug(\"EncryptedStore: writing \" + path\n                             + \" with password \" + self.engine.pass());\n    var xa;\n\n    try {\n        xa = AES.encrypt(ab, this.engine.pass(), 256);\n    } catch (e) {\n        if (DEBUG) console.debug(\"Caught \" + e);\n        fail.call(this, e);\n        return;\n    }\n\n    this.engine.write(\n        path,\n        xa.buffer,\n        function() {\n            ok.call(self);\n        },\n        fail);\n};\n"]}