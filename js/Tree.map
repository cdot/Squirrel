{"version":3,"sources":["js/Tree.js"],"names":["$","S","ST","Tree","SD","Dialog","cache","undos","widget","_create","create","this","element","options","$node","parent","$parent","is_leaf","is_root","path","key","pop","get_node","data","addClass","value","$control","prepend","icon_button","toggle","$info","appendTo","text","on","isTouchCapable","e","preventDefault","edit","hover","find","length","$status","append","mod","Date","toLocaleString","Utils","deltaTimeString","MSPERDAY","removeClass","remove","makeDraggable","relocate","time","set_modified","on_create","call","action","selector","icon","on_click","$button","button","icons","primary","classes","ui-button-icon","getTapEvent","$span","first","w","width","parents","each","position","left","edit_in_place","changed","s","client","hoard","record_action","type","get_path","ea","sometime","squeak","message","set_alarm","before","alarm","$n","c","cancel_alarm","removeData","ring_alarm","handleDrag","event","ui","$within","not","filter","is","closest","box","offset","pageX","pageY","top","outerWidth","outerHeight","last","console","log","handleStop","$target","$new_parent","oldpath","newpath","draggable","axis","containment","cursor","revert","revertDuration","drag","stop","join","PATHSEP","DEBUG","hasClass","ps","addToCaches","split","sort_prio","TX","tx","compare","a","b","i","removeFromCaches","detach","inserted","$ul","children","insertBefore","open","scroll_into_view","show","close","hide","action_N","undoable","follow","tree","push","action_E","slice","action_D","action_A","action_C","action_M","action_R","p","chain","soon","$s","can_undo","undo","now","debug","Hoard","stringify_action","res","title","error","severity","jQuery","Squirrel"],"mappings":"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","file":"js/Tree.min.js","sourcesContent":["/*@preserve Copyright (C) 2015 Crawford Currie http://c-dot.co.uk license MIT*/\n\n/* global DEBUG */\n/* global Utils */\n/* global TX */\n/* global Hoard */\n/* global Squirrel */\n\n/**\n * Functions involved in the management of the DOM tree that represents\n * the content of the client hoard cache.\n *\n * Each node in the client hoard cache is represented in the DOM by an\n * LI node in a UL/LI tree. A node has structure as follows:\n * classes:\n *   tree-node (always)\n *   tree-leaf - if this is a leaf node\n *   tree-collection - if this is an intermediate node   \n *   tree-modified (if UI modified)\n *   tree-root - only on the root of the tree (which need not be an LI)\n * data:\n *   data-key: the key name the node is for (simple name, not a path)\n *        NOTE: the root doesn't have a data-key\n *   data-value: if this is a leaf node\n *   data-path: the full pathname of the node (string)\n *   data-alarm: if there is an alarm on the node\n * children:\n *   various buttons used to open/close nodes\n *   div.tree-info:\n *      span.tree-key: target for click events\n *          text: the key name\n *      span.tree-separator: if tree-leaf\n *      span.tree-value: if this is a leaf node, text is the leaf value,\n *          should be same as data-value\n *   ul: child tree, if this is tree-collection\n *\n * The DOM tree is built and maintained through the use of actions sent\n * to the Squirrel client hoard, which are then passed on in a callback to\n * the DOM tree. Nodes in the DOM tree are never manipulated directly outside\n * this namespace (other than to add the 'tree-modified' class)\n *\n * Nodes are managed using the squirrel.tree widget. Additional\n * services are provided through the functions of the Squirrel.Tree\n * namespace. These functions support a static cache mapping node path\n * names to DOM nodes, and an undo stack. There is also a set of functions\n * that perform hoard actions on the DOM.\n */\n\n(function($, S) {\n    \"use strict\";\n\n    var ST = S.Tree;\n    var SD = S.Dialog;\n    var map_icon = {\n        \"closed\": \"ui-icon-squirrel-folder-closed\",\n        \"open\": \"ui-icon-squirrel-folder-open\",\n        \"alarm\": \"ui-icon-squirrel-alarm\"\n    };\n\n    ST.cache = {};    // Path->node mapping\n    ST.undos = [];    // undo stack\n\n    $.widget(\"squirrel.tree\", {\n        _create: function() {\n\n            // this.element is the object it's called on\n            // This will be a div for the root, and an li for any other node\n            // this.options is the options passed\n            ST.create($(this.element), this.options);\n        }\n    });\n\n    ST.create = function($node, options) {\n        var is_leaf = false;\n        var is_root = !options.path;\n        var parent, key = \"\", $parent;\n\n        if (!is_root) {\n            parent = options.path;\n            key = parent.pop();\n            $parent = ST.get_node(parent);\n            $node.data(\"key\", key);\n        }\n\n        $node.addClass(\"tree-node\");\n\n        if (is_root) {\n            ST.cache[\"\"] = $node;\n            $node.addClass(\"tree-root\");\n            $node.data(\"path\", \"\");\n        }\n        else if (typeof options.value !== \"undefined\"\n                 && options.value !== null) {\n\n            $node\n                .data(\"value\", options.value)\n                .data(\"is_leaf\", true)\n                .addClass(\"tree-leaf\");\n            is_leaf = true;\n        }\n        else { \n            // Add open/close button on running nodes, except the root\n            // which is always open\n            var $control = $(\"<button></button>\")\n                .addClass(\"tree-open-close\");\n            $node\n                .prepend($control)\n                .addClass(\"tree-open\");\n            ST.icon_button($node,\n                           \"create\",\n                           $control,\n                           \"folder-closed\",\n                           function() {\n                               ST.toggle($node);\n                               return false;\n                           });\n        }\n\n        if (!is_root) {\n            var $info = $(\"<div></div>\")\n                .addClass(\"tree-info noselect\")\n                .appendTo($node);\n\n            // Create the key span\n            $(\"<span></span>\")\n                .appendTo($info)\n                .addClass(\"tree-key\")\n                .text(key)\n                .on($.isTouchCapable() ? \"doubletap\" : \"dblclick\", function(e) {\n                    e.preventDefault();\n                    ST.edit($node, \".tree-key\", \"R\");\n                });\n\n            if (is_leaf) {\n                $(\"<span> : </span>\")\n                    .addClass(\"tree-separator\")\n                    .appendTo($info);\n                $(\"<span></span>\")\n                    .appendTo($info)\n                    .addClass(\"tree-value\")\n                    .text(options.value)\n                    .on($.isTouchCapable() ?\n                        \"doubletap\" : \"dblclick\", function(e) {\n                            e.preventDefault();\n                            ST.edit($node, \".tree-value\", \"E\");\n                        });\n            }\n            \n            $info.hover(\n                function(/*evt*/) {\n                    if ($(this).find(\".in_place_editor\").length === 0) {\n                        var $status = $(\"<div></div>\");\n                        $status\n                            .addClass(\"tree-lastmod\");\n                        $(this)\n                            .addClass(\"tree-hover\")\n                            .append($status);\n                        \n                        var mod = new Date($node.data(\"last-time\"))\n                            .toLocaleString();\n                        $status.append(\"<span>\" + mod + \" </span\");\n                        \n                        if (typeof $node.data(\"alarm\") !== \"undefined\") {\n                            $status.append(\n                                '<div class=\"inline-icon ui-icon-squirrel-alarm\"></div>');\n                            $status.append(\n                                '<div class=\"tree-info\">'\n                                    + Utils.deltaTimeString(\n                                        new Date($node.data(\"last-time\")\n                                                 + $node.data(\"alarm\")\n                                                 * Utils.MSPERDAY))\n                                    + \"</div>\");\n                        }\n                        return false;\n                    }\n                },\n                function(/*evt*/) {\n                    $(this)\n                        .removeClass(\"tree-hover\")\n                        .find(\".tree-lastmod\")\n                        .remove();\n                });\n        }\n        \n        if (!is_leaf) {\n            $node\n                .addClass(\"tree-collection\")\n                .append(\"<ul class='sortable tree-subnodes'></ul>\");\n        }\n\n        // Close to hide the children (or to open the root)\n        ST.toggle($node);\n\n        if (!is_root)\n            ST.makeDraggable($node);\n        \n        if ($parent)\n            // Insert-sort into the $parent\n            ST.relocate($node, $parent);\n\n        if (typeof options.time !== \"undefined\")\n            ST.set_modified($node, options.time);\n\n        if (options.on_create)\n            options.on_create.call($node);\n    }\n\n    /**\n     * @param action one of\"create\", \"change\", or \"destroy\".\n     * @param selector may be a string selector or a jQuery object,\n     * and should uniquely identify the button to be manipulated.\n     * @param icon is the abstract name of the icon to use, one\n     * of \"open\", \"closed\" or \"alarm\".\n     * @param on_click may be a function to handle click events,\n     * and is only used when action is \"create\".\n     */\n    ST.icon_button = function($node, action, selector, icon, on_click) {\n        var $control = (typeof selector === \"string\") ?\n            $node.find(selector) : selector;\n\n        switch (action) {\n        case \"create\":\n            var $button = $control.button({\n                icons: {\n                    primary: \"ui-icon-squirrel-\" + icon\n                },\n                classes: {\n                    \"ui-button-icon\": \"squirrel-icon\"\n                },\n                text: false\n            });\n            if (on_click)\n                $button.on($.getTapEvent(), on_click);\n            break;\n        case \"change\":\n            if ($control.length > 0)\n                $control.button(\n                    \"option\", \"icons\", {\n                        primary: \"ui-icon-squirrel-\" + icon });\n            break;\n        case \"destroy\":\n            $control.remove();\n            break;\n        }\n        return $node;\n    };\n    \n    /**\n     * Requires edit_in_place. selector may be a jquery selector or\n     * an object.\n     * @param selector object of selector string\n     * @param action 'R'ename or 'E'dit\n     */\n    ST.edit = function($node, selector, action) {\n        var $span = (typeof selector === \"string\") ?\n            $node.find(selector).first() : selector;\n\n        // Fit width to the container\n        var w = $(\"#sites-node\").width();\n        $span.parents().each(function() {\n            w -= $(this).position().left;\n        });\n\n        $span.edit_in_place({\n            width: w / 2,\n            changed: function(s) {\n                var e = S.client.hoard.record_action(\n                    { type: action,\n                      path: ST.get_path($node),\n                      data: s },\n                    function(ea) {\n                        ST.action(\n                            ea, true,\n                            function(/*$newnode*/) {\n                                Utils.sometime(\"update_save\");\n                            });\n                    });\n                if (e !== null)\n                    S.Dialog.squeak(e.message);\n            }\n        });\n    };\n    \n    ST.set_alarm = function($node, data) {\n        if (typeof $node.data(\"alarm\") === \"undefined\") {\n            var $button = $(\"<button></button>\")\n                .addClass(\"tree-alarm\");\n            $node\n                .find(\".tree-key\")\n                .first()\n                .before($button);\n\n            ST.icon_button($node,\n                           \"create\",\n                           $button,\n                           \"alarm\",\n                           function() {\n                               SD.alarm($node);\n                               return false;\n                           });\n\n            // Run up the tree, incrementing the alarm count\n            $node.parents(\".tree-node\").each(function($n) {\n                var c = $(this).data(\"alarm-count\") || 0;\n                $(this).data(\"alarm-count\", c + 1);\n                $(this).addClass(\"tree-has-alarms\");\n            });\n        }\n        $node.data(\"alarm\", data);\n    };\n    \n    ST.cancel_alarm = function($node) {\n        // Run up the tree decrementing the alarm count\n        $node.parents(\".tree-node\").each(function($n) {\n            var c = $(this).data(\"alarm-count\") || 0;\n            c = c - 1;\n            $(this).data(\"alarm-count\", c);\n            if (c === 0)\n                $(this).removeClass(\"tree-has-alarms\");\n        });\n\n        ST.icon_button($node, \"destroy\", \".tree-alarm:first\");\n        \n        return $node.removeData(\"alarm\");\n    };\n\n    ST.ring_alarm = function($node) {\n        $node\n            .find(\".tree-alarm\")\n            .addClass(\"tree-expired\")\n            .find(\".ui-icon-squirrel-alarm\")\n            .removeClass(\"ui-icon-squirrel-alarm\")\n            .addClass(\"ui-icon-squirrel-rang\");\n    };\n    \n    ST.makeDraggable = function($node) {\n        function handleDrag(event, ui) {\n            // Need to get from a position to a target element\n            var $within = $(\".tree-collection\")\n                .not(\".ui-draggable-dragging\")\n                .filter(function() {\n                    if ($(this).is($node.parent().closest(\".tree-node\")))\n                        return false;\n                    var box = $(this).offset();\n                    if (event.pageX < box.left ||\n                        event.pageY < box.top)\n                        return false;\n                    if (event.pageX >\n                        box.left + $(this).outerWidth(true) ||\n                        event.pageY >\n                        box.top + $(this).outerHeight(true))\n                        return false\n                    return true;\n                });\n            // inside $this\n            $(\".drop-target\").removeClass(\"drop-target\");\n            if ($within.length > 0) {\n                $within = $within.last();\n                $within.addClass(\"drop-target\");\n                console.log(\"drop on \" + $within.data(\"key\"));\n            }\n        }\n\n        function handleStop(event, ui) {\n            var $target = $(\".drop-target\");\n            if ($target.length > 1)\n                debugger;\n            $target.each(function() {\n                var $new_parent = $(this);\n                $new_parent.removeClass(\"drop-target\");\n                var oldpath = ST.get_path($node);\n                var newpath = ST.get_path($new_parent);\n                var e = S.client.hoard.record_action(\n                    { type: 'M',\n                      path: oldpath,\n                      data: newpath\n                    },\n                    function(ea) {\n                        ST.action(\n                            ea, true,\n                            function() {\n                                Utils.sometime(\"update_save\");\n                            });\n                    });\n                if (e !== null)\n                    S.Dialog.squeak(e.message);\n            });\n        }\n        $node.draggable({\n            axis: \"y\",\n            containment: \".tree-collection\",\n            cursor: \"pointer\",\n            revert: true,\n            revertDuration: 1,\n            drag: handleDrag,\n            stop: handleStop\n        });\n    };\n    \n    /**\n     * Find the jQuery node for a path\n     * @param path array of keys representing the path\n     * @return a JQuery element\n     */\n    ST.get_node = function(path) {\n        var $node = ST.cache[path.join(S.PATHSEP)];\n        if (DEBUG && $node && $node.length === 0)\n            // Not in the cache, was something not been through get_path?\n            debugger;\n        return $node;\n    };\n\n    /**\n     * Find the path for a DOM node or jQuery node.\n     * @return an array containing the path to the node, one string per key\n     */\n    ST.get_path = function($node) {       \n        if ($node.hasClass(\"tree-root\"))\n            return [];\n        if (!$node.hasClass(\"tree-node\"))\n            debugger;\n\n        // IMPORTANT: root node MUST NOT have data-path in HTML\n            \n        // Lookup shortcut, if set\n        var ps = $node.data(\"path\");\n        if (!ps) {\n            ST.addToCaches($node);\n            ps = $node.data(\"path\");\n            if (!ps)\n                ps = \"\";\n        }\n        return ps.split(S.PATHSEP);\n    }\n\n    /**\n     * @private\n     * Custom key comparison, such that these keys always bubble\n     * to the top of the keys\n     */\n    ST.sort_prio = [\n        TX.tx(\"A new folder\"),\n        TX.tx(\"A new value\"),\n        TX.tx(\"User\"),\n        TX.tx(\"Pass\")\n    ];\n    \n    ST.compare = function(a, b) {\n        if (a == b)\n            return 0;\n        for (var i = 0; i < ST.sort_prio.length; i++) {\n            if (a == ST.sort_prio[i])\n                return -1;\n            if (b == ST.sort_prio[i])\n                return 1;\n        }\n        return (a < b) ? -1 : 1;\n    };\n\n    /**\n     * @private\n     * Insert-sort the given node as a child of the given parent node\n     */\n    ST.relocate = function($node, $parent) {\n        // First decouple from the old parent\n        ST.removeFromCaches($node);\n        $node.detach();\n\n        // Now insert in the new parent\n        var key = $node.data(\"key\");\n        var inserted = false;\n\n        var $ul = $parent.find(\"ul:first\");\n        $ul.children(\".tree-node\").each(function() {\n            if (ST.compare(\n                $(this).data(\"key\"), key) > 0) {\n                $node.insertBefore($(this));\n                inserted = true;\n                return false;\n            }\n        });\n        if (!inserted)\n            $ul.append($node);\n    };\n\n    /**\n     * @param time optional time in ms, if missing will use now\n     */\n    ST.set_modified = function($node, time) {\n        var d = new Date(time);\n        return $node\n            .addClass(\"tree-modified\")\n            .data(\"last-time\", time);\n    };\n\n    ST.open = function($node) {\n        if ($node.hasClass(\"tree-open\"))\n            return $node;\n        ST.icon_button($node, \"change\",\n                       \".tree-open-close:first\", \"folder-open\");\n        return $node\n            .addClass(\"tree-open\")\n            .children(\".tree-subnodes\")\n            .scroll_into_view()\n            .show();\n    };\n\n    ST.close = function($node) {\n        if (!$node.hasClass(\"tree-open\"))\n            return $node;\n        ST.icon_button($node, \"change\",\n                       \".tree-open-close:first\", \"folder-closed\");\n        return $node\n            .removeClass(\"tree-open\")\n            .children(\".tree-subnodes\")\n            .hide();\n    };\n    \n    ST.toggle = function($node) {\n        if ($node.hasClass(\"tree-open\"))\n            return ST.close($node);\n        return ST.open($node);\n    };\n\n    /**\n     * @private\n     * Action handler to construct new node\n     */\n    ST.action_N = function(action, undoable, follow) {\n        // Create the new node. Automatically adds it to the right parent.\n        $(\"<li></li>\")\n            .tree({\n                path: action.path,\n                value: action.data,\n                time: action.time,\n                on_create: function() {\n                    // get_path will update the caches on the fly with the\n                    // new node\n                    var path = ST.get_path(this);\n                    if (undoable) {\n                        ST.undos.push({\n                            type: \"D\",\n                            path: path\n                        });\n                    }\n                    follow.call(this);\n                }\n            });\n    };\n\n    /**\n     * @private\n     * Action handle for value edit\n     */\n    ST.action_E = function(action, undoable, follow) {\n        var $node = ST.get_node(action.path);\n\n        if (undoable) {\n            ST.undos.push({\n                type: \"E\",\n                path: action.path.slice(),\n                data: $node\n                    .find(\".tree-value\")\n                    .first()\n                    .text()\n            });\n        }\n\n        $node\n            .find(\".tree-value\")\n            .first()\n            .text(action.data);\n\n        ST.set_modified($node, action.time);\n\n        follow.call($node);\n    };\n\n    /**\n     * @private\n     * Action handler for node delete\n     */\n    ST.action_D = function(action, undoable, follow) {\n        var $node = ST.get_node(action.path);\n\n        ST.removeFromCaches($node);\n\n        if (undoable) {\n            // Not enough - all the subtree would need to be\n            // regenerated\n            ST.undos.push({\n                type: \"N\",\n                path: action.path.slice(),\n                data: $node\n                    .find(\".tree-value\")\n                    .first()\n                    .text()\n            });\n        }\n\n        var $parent = $node.parent().closest(\".tree-node\");\n        ST.set_modified($parent, action.time);\n\n        $node.remove();\n\n        follow.call($node);\n    };\n\n    /**\n     * @private\n     * Action handler for alarm add\n     */\n    ST.action_A = function(action, undoable, follow) {\n        var $node = ST.get_node(action.path);\n\n        // Check there's an alarm already\n        var alarm = $node.data(\"alarm\");\n        if (typeof alarm !== \"undefined\") {\n            if (alarm !== action.data) {\n                if (undoable) {\n                    ST.undos.push({\n                        type: \"A\",\n                        path: action.path.slice(),\n                        data: $node.data(\"alarm\")\n                    });\n                }\n                ST.set_modified($node, action.time);\n            }\n        } else {\n            ST.set_modified($node, action.time);\n            if (undoable) {\n                ST.undos.push({\n                    type: \"C\",\n                    path: action.path.slice()\n                });\n            }\n        }\n        ST.set_alarm($node, action.data);\n\n        follow.call($node);\n    };\n\n    /**\n     * Action handler for cancelling an alarm\n     */\n    ST.action_C = function(action, undoable, follow) {\n        var $node = ST.get_node(action.path);\n        var alarm = $node.data(\"alarm\");\n        if (typeof alarm !== \"undefined\") {\n            if (undoable) {\n                ST.undos.push({\n                    type: \"A\",\n                    path: action.path.slice(),\n                    data: alarm\n                });\n            }\n            ST.cancel_alarm($node);\n            ST.set_modified($node, action.time);\n        }\n\n        follow.call($node);\n    };\n\n    /**\n     * Action handler for moving a node\n     */\n    ST.action_M = function(action, undoable, follow) {\n        var oldpath = action.path.slice();\n        var newpath = action.data.slice();\n\n        var $node = ST.get_node(oldpath);\n        var $new_parent = ST.get_node(newpath);\n\n        // Relocate the node in the DOM\n        ST.relocate($node, $new_parent);\n\n        // refresh data-path and update fragment ID\n        var p = ST.get_path($node); // get new path\n        $node.scroll_into_view();\n\n        ST.set_modified($node, action.time);\n\n        newpath.push(oldpath.pop());\n        \n        if (undoable) {\n            ST.undos.push({\n                type: \"M\",\n                path: newpath,\n                data: oldpath\n            });\n        }\n\n        follow.call($node);\n    };\n\n    /**\n     * Action handler for node rename\n     */\n    ST.action_R = function(action, undoable, follow) {\n        // Detach the li from the DOM\n        var $node = ST.get_node(action.path);\n        var key = action.path[action.path.length - 1]; // record old node name\n\n        $node\n            .data(\"key\", action.data)\n            .find(\".tree-key\")\n            .first()\n            .text(action.data);\n\n        // Re-insert the element in it's sorted position\n        ST.relocate($node, $node.parent().closest(\".tree-collection\"));\n\n        // refresh data-path and update fragment ID\n        var p = ST.get_path($node); // get new path\n        $node.scroll_into_view();\n\n        ST.set_modified($node, action.time);\n\n        if (undoable) {\n            ST.undos.push({\n                type: \"R\",\n                path: p, // no need to slice, not re-used\n                data: key\n            });\n        }\n\n        follow.call($node);\n    };\n\n    /**\n     * Callback for use when managing hoards; plays an action that is being\n     * played into the hoard into the DOM as well.\n     * @param e action to play\n     * @param undoable set true if the inverse of this action is to be\n     * added to the undo chain.\n     * @param chain function to call once the action has been\n     * played. Passed the modified node.\n     */\n    ST.action = function(action, undoable, chain) {\n        ST[\"action_\" + action.type](\n            action,\n            undoable,\n            function () {\n                var $node = this;\n                Utils.sometime(\"update_save\");\n\n                if (typeof chain !== \"undefined\") {\n                    Utils.soon(function() {\n                        chain($node);\n                    });\n                }\n            });\n    };\n\n    /**\n     * Node paths are calculated from the DOM tree and are cached in\n     * two ways; in a path->node lookup table called ST.cache[], and in\n     * a path->node lookup using a data(\"path\") field on the\n     * node, which maps to the S.PATHSEP separated path string.\n     * @param $node either DOM node or jQuery node\n     */\n    ST.addToCaches = function($node, path) {\n        if (!path)\n            path = ST.get_path($node.parent().closest(\".tree-node\"));\n\n        path.push($node.data(\"key\"));\n                \n        var ps = path.join(S.PATHSEP);\n                \n        // node->path shortcut\n        $node.data(\"path\", ps);\n                \n        // path->node mapping\n        ST.cache[ps] = $node;\n    };\n\n    /**\n     * @private\n     * Remove the node (and all subnodes) from the node->path->node mappings\n     * @param $node node to remove\n     */\n    ST.removeFromCaches = function($node) {\n        if (!$node.hasClass(\"tree-node\"))\n            $node = $node.closest(\".tree-node\");\n\n        delete ST.cache[$node.data(\"path\")];\n        $node\n            .removeData(\"path\")\n        // Reset the path of all subnodes\n            .find(\".tree-node\")\n            .each(function() {\n                var $s = $(this);\n                delete ST.cache[$s.data(\"path\")];\n                $s.data(\"path\", null);\n            });\n    };\n\n    /**\n     * Return true if there is at least one undoable operation\n     */\n    ST.can_undo = function() {\n        return ST.undos.length !== 0;\n    };\n\n    /**\n     * Undo the most recent action\n     */\n    ST.undo = function() {\n        if (DEBUG && ST.undos.length === 0) debugger;\n\n        var a = ST.undos.pop();\n        a.time = Date.now();\n        if (DEBUG) console.debug(\"Undo \" + Hoard.stringify_action(a));\n        var res = S.client.hoard.record_action(\n            a,\n            function(e) {\n                ST.action(\n                    e, false,\n                    function() {\n                        // If there are no undos, there can be no modifications.\n                        // The hoard status will not be changed, though, so a\n                        // save may still be required.\n                        if (ST.length === 0)\n                            $(\".tree-modified\").removeClass(\"tree-modified\");\n                        Utils.sometime(\"update_save\");\n                    });\n            });\n        if (res !== null)\n            SD.squeak({\n                title: TX.error(),\n                severity: \"error\",\n                message: res.message\n            });\n    };\n\n})(jQuery, Squirrel);\n"]}