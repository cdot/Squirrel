{"version":3,"sources":["js/Tree.js"],"names":["$","S","ST","Tree","SD","Dialog","cache","undos","widget","_create","hoverIn","this","find","length","addClass","hoverOut","removeClass","remove","parent","$parent","$node","element","options","is_leaf","is_root","path","key","data","pop","getNodeFromPath","$title","hover","on","e","appendTo","value","$control","prepend","_createIconButton","tree","$info","text","isTouchCapable","preventDefault","append","toggle","_makeDraggable","_insertInto","time","setModified","on_create","call","icon","on_click","$button","button","icons","primary","classes","ui-button-icon","getTapEvent","_changeIconButton","_destroyIconButton","edit","selector","action","nodepath","getPath","$span","first","w","closest","width","parents","each","position","left","edit_in_place","changed","s","client","hoard","record_action","type","ea","Utils","sometime","squeak","message","setAlarm","before","alarm","$n","c","cancelAlarm","removeData","ringAlarm","handleDrag","event","ui","$within","not","filter","is","box","offset","pageX","pageY","top","outerWidth","outerHeight","last","console","log","handleStop","$target","$new_parent","oldpath","newpath","widge","action_M","draggable","axis","containment","cursor","revert","revertDuration","drag","stop","hasClass","ps","_addToCaches","split","PATHSEP","sort_prio","TX","tx","compare","a","b","i","_removeFromCaches","detach","inserted","$ul","children","insertBefore","open","scroll_into_view","show","close","hide","action_E","undoable","push","action_D","action_A","action_C","slice","action_R","p","chain","soon","join","$s","DEBUG","can_undo","undo","Date","now","debug","Hoard","stringify_action","res","title","error","severity","jQuery","Squirrel"],"mappings":"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","file":"js/Tree.min.js","sourcesContent":["/*@preserve Copyright (C) 2015-2017 Crawford Currie http://c-dot.co.uk license MIT*/\n\n/* global DEBUG:true */\n/* global Utils */\n/* global TX */\n/* global Hoard */\n/* global Squirrel */\n\n/**\n * Functions involved in the management of the DOM tree that represents\n * the content of the client hoard cache.\n *\n * Each node in the client hoard cache is represented in the DOM by an\n * LI node in a UL/LI tree. A node has structure as follows:\n * classes:\n *   tree-node (always)\n *   tree-leaf - if this is a leaf node\n *   tree-collection - if this is an intermediate node   \n *   tree-modified (if UI modified)\n *   tree-root - only on the root of the tree (which need not be an LI)\n * data:\n *   data-key: the key name the node is for (simple name, not a path)\n *        NOTE: the root doesn't have a data-key\n *   data-value: if this is a leaf node\n *   data-path: the full pathname of the node (string)\n *   data-alarm: if there is an alarm on the node\n * children:\n *   various buttons used to open/close nodes\n *   div.tree-info:\n *      span.tree-key: target for click events\n *          text: the key name\n *      span.tree-separator: if tree-leaf\n *      span.tree-value: if this is a leaf node, text is the leaf value,\n *          should be same as data-value\n *   ul: child tree, if this is tree-collection\n *\n * The DOM tree is built and maintained through the use of actions sent\n * to the Squirrel client hoard, which are then passed on in a callback to\n * the DOM tree. Nodes in the DOM tree are never manipulated directly outside\n * this namespace (other than to add the 'tree-modified' class)\n *\n * Nodes are managed using the squirrel.tree widget. Additional\n * services are provided through the functions of the Squirrel.Tree\n * namespace. These functions support a static cache mapping node path\n * names to DOM nodes, and an undo stack. There is also a set of functions\n * that perform hoard actions on the DOM.\n */\n\n(function($, S) {\n    \"use strict\";\n\n    var ST = S.Tree;\n    var SD = S.Dialog;\n\n    ST.cache = {};    // Path->node mapping\n    ST.undos = [];    // undo stack\n\n    // Built the UI widget\n    var widget = {};\n    \n    widget._create = function() {\n\n        // this.element is the object it's called on\n        // This will be a div for the root, and an li for any other node\n        // this.options is the options passed\n\n        // Invoked on tree-title\n        function hoverIn(/*evt*/) {            \n            if ($(this).find(\".in_place_editor\").length !== 0)\n                return true;\n\n            $(this).addClass(\"tree-hover\")\n\n            /* SMELL: takes too much space on mobile\n            var $status = $(\"<div></div>\");\n            $status.addClass(\"tree-lastmod\");\n            $(this).append($status);\n            var $node = $(this).closest(\".tree-node\");\n            var mod = new Date($node.data(\"last-time-changed\"))\n                .toLocaleString();\n            $status.append(\"<span>\" + mod + \" </span\");\n            if (typeof $node.data(\"alarm\") !== \"undefined\") {\n                $status.append(\n                    '<div class=\"inline-icon ui-icon-squirrel-alarm\"></div>');\n                $status.append(\n                    '<div class=\"tree-info\">'\n                        + Utils.deltaTimeString(\n                            new Date($node.data(\"last-time-changed\")\n                                     + $node.data(\"alarm\")\n                                     * Utils.MSPERDAY))\n                        + \"</div>\");\n            }\n            */\n            return false;\n        }\n        \n        // Invoked on tree-title\n        function hoverOut(/*evt*/) {\n            $(this)\n                .removeClass(\"tree-hover\")\n                .find(\".tree-lastmod\")\n                .remove();\n        }\n\n        var $node = $(this.element);\n        var options = this.options;\n        var is_leaf = false;\n        var is_root = !options.path;\n        var parent, key = \"\", $parent;\n\n        $node.addClass(\"tree-node\");\n\n        if (is_root) {\n            ST.cache[\"\"] = $node;\n            $node.addClass(\"tree-root\"); // should be there in HTML?\n            $node.data(\"path\", \"\");\n        }\n        else {\n            parent = options.path;\n            key = parent.pop();\n            $parent = ST.getNodeFromPath(parent);\n            $node.data(\"key\", key);\n\n            var $title = $(\"<div></div>\")\n                .addClass(\"tree-title\")\n            // SMELL: only if screen is wide enough!\n                .hover(hoverIn, hoverOut)\n                .on(\"paste\", function(e) {\n                    debugger;\n                })\n                .appendTo($node);\n            \n            if (typeof options.value !== \"undefined\"\n                && options.value !== null) {\n\n                $node\n                    .data(\"value\", options.value)\n                    .data(\"is_leaf\", true)\n                    .addClass(\"tree-leaf\");\n                is_leaf = true;\n            }\n            else { \n                // Add open/close button on running nodes, except the root\n                // which is always open\n                var $control = $(\"<button></button>\")\n                    .addClass(\"tree-open-close\");\n                $title.prepend($control);\n                $node.addClass(\"tree-open\");\n                this._createIconButton($control,\n                                       \"folder-closed\",\n                                       function() {\n                                           $node.tree(\"toggle\");\n                                           return false;\n                                       });\n            }\n\n            var $info = $(\"<div></div>\")\n                .addClass(\"tree-info\")\n                .appendTo($title);\n\n            // Create the key span\n            $(\"<span></span>\")\n                .appendTo($info)\n                .addClass(\"tree-key\")\n                .text(key)\n                .on($.isTouchCapable() ? \"doubletap\" : \"dblclick\", function(e) {\n                    e.preventDefault();\n                    $node.tree(\"edit\", \".tree-key\", \"R\");\n                });\n\n            if (is_leaf) {\n                $(\"<span> : </span>\")\n                    .addClass(\"tree-separator\")\n                    .appendTo($info);\n                $(\"<span></span>\")\n                    .appendTo($info)\n                    .addClass(\"tree-value\")\n                    .text(options.value)\n                    .on($.isTouchCapable() ?\n                        \"doubletap\" : \"dblclick\", function(e) {\n                            e.preventDefault();\n                            $node.tree(\"edit\", \".tree-value\", \"E\");\n                        });\n            }\n        }\n        \n        if (!is_leaf) {\n            $node\n                .addClass(\"tree-collection\")\n                .append(\"<ul class='sortable tree-subnodes'></ul>\");\n        }\n\n        // Close to hide the children (or to open the root)\n        this.toggle();\n\n        if (!is_root)\n            this._makeDraggable();\n\n        if ($parent)\n            // Insert-sort into the $parent\n            this._insertInto($parent);\n\n        if (typeof options.time !== \"undefined\")\n            this.setModified(options.time);\n\n        if (options.on_create)\n            options.on_create.call($node);\n    };\n\n    /**\n     * @param $control jQuery object,\n     * @param icon is the abstract name of the icon to use, one\n     * of \"open\", \"closed\" or \"alarm\".\n     * @param on_click may be a function to handle click events\n     */\n    widget._createIconButton = function($control, icon, on_click) {\n        var $button = $control.button({\n            icons: {\n                primary: \"ui-icon-squirrel-\" + icon\n            },\n            classes: {\n                \"ui-button-icon\": \"squirrel-icon\"\n            },\n            text: false\n        });\n        if (on_click)\n            $button.on($.getTapEvent(), on_click);\n    };\n\n    widget._changeIconButton = function($control, icon) {\n        if ($control.length > 0)\n            $control.button(\n                \"option\", \"icons\", {\n                    primary: \"ui-icon-squirrel-\" + icon });\n    };\n\n    widget._destroyIconButton = function($control) {\n        $control.remove();\n    };\n    \n    /**\n     * Requires edit_in_place. selector may be a jquery selector or\n     * an object.\n     * @param selector object of selector string\n     * @param action 'R'ename or 'E'dit\n     */\n    widget.edit = function(selector, action) {\n        var nodepath = this.getPath();\n        var $node = this.element;\n        var $span = (typeof selector === \"string\") ?\n            $node.find(selector).first() : selector;\n\n        // Fit width to the container\n        var w = $node.closest(\".tree-root\").width();\n        $span.parents().each(function() {\n            w -= $(this).position().left;\n        });\n\n        $span.edit_in_place({\n            width: w / 2,\n            changed: function(s) {\n                var e = S.client.hoard.record_action(\n                    { type: action,\n                      path: nodepath,\n                      data: s },\n                    function(ea) {\n                        ST.action(\n                            ea, true,\n                            function(/*$newnode*/) {\n                                Utils.sometime(\"update_save\");\n                            });\n                    });\n                if (e !== null)\n                    S.Dialog.squeak(e.message);\n            }\n        });\n    };\n    \n    widget.setAlarm = function(data) {\n        var $node = this.element;\n        if (typeof $node.data(\"alarm\") === \"undefined\") {\n            var $button = $(\"<button></button>\")\n                .addClass(\"tree-alarm\");\n            $node\n                .find(\".tree-key\")\n                .first()\n                .before($button);\n\n            this._createIconButton($button,\n                                   \"alarm\",\n                                   function() {\n                                       SD.alarm($node);\n                                       return false;\n                                   });\n\n            // Run up the tree, incrementing the alarm count\n            $node.parents(\".tree-node\").each(function($n) {\n                var c = $(this).data(\"alarm-count\") || 0;\n                $(this).data(\"alarm-count\", c + 1);\n                $(this).addClass(\"tree-has-alarms\");\n            });\n        }\n        $node.data(\"alarm\", data);\n    };\n    \n    widget.cancelAlarm = function() {\n        var $node = this.element;\n        \n        // Run up the tree decrementing the alarm count\n        $node.parents(\".tree-node\").each(function($n) {\n            var c = $(this).data(\"alarm-count\") || 0;\n            c = c - 1;\n            $(this).data(\"alarm-count\", c);\n            if (c === 0)\n                $(this).removeClass(\"tree-has-alarms\");\n        });\n\n        this._destroyIconButton($node.find(\".tree-alarm\").first());\n        \n        return $node.removeData(\"alarm\");\n    };\n\n    widget.ringAlarm = function() {\n        this.element\n            .find(\".tree-alarm\")\n            .addClass(\"tree-expired\")\n            .find(\".ui-icon-squirrel-alarm\")\n            .removeClass(\"ui-icon-squirrel-alarm\")\n            .addClass(\"ui-icon-squirrel-rang\");\n    };\n    \n    widget._makeDraggable = function() {\n        var widge = this;\n        var $node = this.element;\n        \n        function handleDrag(event, ui) {\n            // Need to get from a position to a target element\n            var $within = $(\".tree-collection\")\n                .not(\".ui-draggable-dragging\")\n                .filter(function() {\n                    if ($(this).is($node.parent().closest(\".tree-node\")))\n                        return false;\n                    var box = $(this).offset();\n                    if (event.pageX < box.left ||\n                        event.pageY < box.top)\n                        return false;\n                    if (event.pageX >\n                        box.left + $(this).outerWidth(true) ||\n                        event.pageY >\n                        box.top + $(this).outerHeight(true))\n                        return false\n                    return true;\n                });\n            // inside $this\n            $(\".drop-target\").removeClass(\"drop-target\");\n            if ($within.length > 0) {\n                $within = $within.last();\n                $within.addClass(\"drop-target\");\n                console.log(\"drop on \" + $within.data(\"key\"));\n            }\n        }\n\n        function handleStop(event, ui) {\n            var $target = $(\".drop-target\");\n            if ($target.length > 1)\n                debugger;\n            $target.each(function() {\n                var $new_parent = $(this);\n                $new_parent.removeClass(\"drop-target\");\n                var oldpath = $node.tree(\"getPath\");\n                var newpath = $new_parent.tree(\"getPath\");\n                var e = S.client.hoard.record_action(\n                    { type: 'M',\n                      path: oldpath,\n                      data: newpath\n                    },\n                    function(ea) {\n                        widge.action_M(ea, true);\n                        Utils.sometime(\"update_save\");\n                    });\n                if (e !== null)\n                    S.Dialog.squeak(e.message);\n            });\n        }\n        $node.draggable({\n            axis: \"y\",\n            containment: \".tree-collection\",\n            cursor: \"pointer\",\n            revert: true,\n            revertDuration: 1,\n            drag: handleDrag,\n            stop: handleStop\n        });\n    };\n    \n    /**\n     * Find the path for a DOM node or jQuery node.\n     * @return an array containing the path to the node, one string per key\n     */\n    widget.getPath = function() {\n        var $node = this.element;\n        if ($node.hasClass(\"tree-root\"))\n            return [];\n        if (!$node.hasClass(\"tree-node\"))\n            debugger;\n\n        // IMPORTANT: root node MUST NOT have data-path in HTML\n            \n        // Lookup shortcut, if set\n        var ps = $node.data(\"path\");\n        if (!ps) {\n            this._addToCaches();\n            ps = $node.data(\"path\");\n            if (!ps)\n                ps = \"\";\n        }\n        return ps.split(S.PATHSEP);\n    }\n\n    /**\n     * @private\n     * Custom key comparison, such that these keys always bubble\n     * to the top of the keys\n     */\n    ST.sort_prio = [\n        TX.tx(\"A new folder\"),\n        TX.tx(\"A new value\"),\n        TX.tx(\"User\"),\n        TX.tx(\"Pass\")\n    ];\n    \n    ST.compare = function(a, b) {\n        if (a == b)\n            return 0;\n        for (var i = 0; i < ST.sort_prio.length; i++) {\n            if (a == ST.sort_prio[i])\n                return -1;\n            if (b == ST.sort_prio[i])\n                return 1;\n        }\n        return (a < b) ? -1 : 1;\n    };\n\n    /**\n     * @private\n     * Insert-sort the given node as a child of the given parent node\n     */\n    widget._insertInto = function($parent) {\n        var $node = this.element;\n        \n        // First decouple from the old parent\n        this._removeFromCaches();\n        $node.detach();\n\n        // Now insert in the new parent\n        var key = $node.data(\"key\");\n        var inserted = false;\n\n        var $ul = $parent.find(\"ul:first\");\n        $ul.children(\".tree-node\").each(function() {\n            if (ST.compare(\n                $(this).data(\"key\"), key) > 0) {\n                $node.insertBefore($(this));\n                inserted = true;\n                return false;\n            }\n        });\n        if (!inserted)\n            $ul.append($node);\n    };\n\n    /**\n     * @param time optional time in ms, if missing will use now\n     */\n    widget.setModified = function(time) {\n        return this.element\n            .addClass(\"tree-modified\")\n            .data(\"last-time-changed\", time);\n    };\n\n    widget.open = function() {\n        var $node = this.element;\n        if ($node.hasClass(\"tree-open\"))\n            return $node;\n        this._changeIconButton(\n            $node.find(\".tree-open-close\").first(), \"folder-open\");\n        return $node\n            .addClass(\"tree-open\")\n            .children(\".tree-subnodes\")\n            .scroll_into_view()\n            .show();\n    };\n\n    widget.close = function() {\n        var $node = this.element;\n        if (!$node.hasClass(\"tree-open\"))\n            return $node;\n        this._changeIconButton(\n            $node.find(\".tree-open-close\").first(), \"folder-closed\");\n        return $node\n            .removeClass(\"tree-open\")\n            .children(\".tree-subnodes\")\n            .hide();\n    };\n    \n    widget.toggle = function($node) {\n        if (this.element.hasClass(\"tree-open\"))\n            return this.close();\n        return this.open();\n    };\n\n    /**\n     * @private\n     * Action handler for node edit\n     */\n    widget.action_E = function(action, undoable) {\n        var $node = this.element;\n        if (undoable) {\n            ST.undos.push({\n                type: \"E\",\n                path: this.getPath(),\n                data: $node\n                    .find(\".tree-value\")\n                    .first()\n                    .text()\n            });\n        }\n\n        $node\n            .find(\".tree-value\")\n            .first()\n            .text(action.data);\n\n        this.setModified(action.time);\n    };\n\n    /**\n     * @private\n     * Action handler for node delete\n     */\n    widget.action_D = function(action, undoable) {\n        var $node = this.element;\n\n        if (undoable) {\n            // Not enough - all the subtree would need to be\n            // regenerated\n            ST.undos.push({\n                type: \"N\",\n                path: this.getPath(),\n                data: $node\n                    .find(\".tree-value\")\n                    .first()\n                    .text()\n            });\n        }\n\n        this._removeFromCaches();\n\n        var $parent = $node.parent().closest(\".tree-node\");\n        $parent.tree(\"setModified\", action.time);\n\n        $node.remove();\n    };\n\n    /**\n     * @private\n     * Action handler for alarm add\n     */\n    widget.action_A = function(action, undoable) {\n        var $node = this.element;\n        // Check there's an alarm already\n        var alarm = $node.data(\"alarm\");\n        if (typeof alarm !== \"undefined\") {\n            if (alarm !== action.data) {\n                if (undoable) {\n                    ST.undos.push({\n                        type: \"A\",\n                        path: this.getPath(),\n                        data: $node.data(\"alarm\")\n                    });\n                }\n                this.setModified(action.time);\n            }\n        } else {\n            this.setModified(action.time);\n            if (undoable) {\n                ST.undos.push({\n                    type: \"C\",\n                    path: this.getPath()\n                });\n            }\n        }\n        this.setAlarm(action.data);\n    };\n\n    /**\n     * Action handler for cancelling an alarm\n     */\n    widget.action_C = function(action, undoable) {\n        var alarm = this.element.data(\"alarm\");\n        if (typeof alarm !== \"undefined\") {\n            if (undoable) {\n                ST.undos.push({\n                    type: \"A\",\n                    path: this.getPath(),\n                    data: alarm\n                });\n            }\n            this.cancelAlarm();\n            this.setModified(action.time);\n        }\n    };\n\n    /**\n     * Action handler for moving a node\n     */\n    widget.action_M = function(action, undoable) {\n        var $node = this.element;\n        var oldpath = this.getPath();\n        var newpath = action.data.slice();\n        var $new_parent = ST.getNodeFromPath(newpath);\n\n        // Relocate the node in the DOM\n        this._insertInto($new_parent);\n\n        // refresh data-path and update fragment ID\n        this.getPath(); // get new path\n        $node.scroll_into_view();\n\n        this.setModified(action.time);\n\n        newpath.push(oldpath.pop());\n        \n        if (undoable) {\n            ST.undos.push({\n                type: \"M\",\n                path: newpath,\n                data: oldpath\n            });\n        }\n    };\n\n    /**\n     * Action handler for node rename\n     */\n    widget.action_R = function(action, undoable) {\n        // Detach the li from the DOM\n        var $node = this.element;\n        var key = action.path[action.path.length - 1]; // record old node name\n\n        $node\n            .data(\"key\", action.data)\n            .find(\".tree-key\")\n            .first()\n            .text(action.data);\n\n        this.setModified(action.time);\n\n        // Re-insert the element in it's sorted position\n        this._insertInto($node.parent().closest(\".tree-collection\"));\n\n        $node.scroll_into_view();\n\n        // refresh data-path and update fragment ID\n        var p = $node.tree(\"getPath\"); // get new path\n\n        if (undoable) {\n            ST.undos.push({\n                type: \"R\",\n                path: p, // no need to slice, not re-used\n                data: key\n            });\n        }\n\n        Utils.sometime(\"update_save\");\n    };\n\n    /**\n     * Callback for use when managing hoards; plays an action that is being\n     * played into the hoard into the DOM as well.\n     * @param e action to play\n     * @param undoable set true if the inverse of this action is to be\n     * added to the undo chain.\n     * @param chain function to call once the action has been\n     * played. Passed the modified node.\n     */\n    ST.action = function(action, undoable, chain) {\n        if (action.type === \"N\") {\n            // Create the new node. Automatically adds it to the right parent.\n            $(\"<li></li>\")\n                .tree({\n                    path: action.path,\n                    value: action.data,\n                    time: action.time,\n                    on_create: function() {\n                        // get_path will update the caches on the fly with the\n                        // new node\n                        var path = this.tree(\"getPath\");\n                        if (undoable) {\n                            ST.undos.push({\n                                type: \"D\",\n                                path: path\n                            });\n                        }\n                        if (typeof chain !== \"undefined\")\n                            chain(this);\n                    }\n                });\n        } else {\n            var $node = ST.getNodeFromPath(action.path);\n            $node.tree(\n                \"action_\" + action.type,\n                action,\n                undoable,\n                function () {\n                    var $node = this;\n                    Utils.sometime(\"update_save\");\n\n                    if (typeof chain !== \"undefined\") {\n                        Utils.soon(function() {\n                            chain($node);\n                        });\n                    }\n                });\n        }\n    };\n\n    /**\n     * Node paths are calculated from the DOM tree and are cached in\n     * two ways; in a path->node lookup table called ST.cache[], and in\n     * a path->node lookup using a data(\"path\") field on the\n     * node, which maps to the S.PATHSEP separated path string.\n     * @param $node either DOM node or jQuery node\n     */\n    widget._addToCaches = function(path) {\n        var $node = this.element;\n        if (!path)\n            path = $node.parent().closest(\".tree-node\").tree(\"getPath\");\n\n        path.push($node.data(\"key\"));\n                \n        var ps = path.join(S.PATHSEP);\n                \n        // node->path shortcut\n        $node.data(\"path\", ps);\n                \n        // path->node mapping\n        ST.cache[ps] = $node;\n    };\n\n    /**\n     * @private\n     * Remove the node (and all subnodes) from the node->path->node mappings\n     * @param $node node to remove\n     */\n    widget._removeFromCaches = function() {\n        var $node = this.element;\n        if (!$node.hasClass(\"tree-node\"))\n            $node = $node.closest(\".tree-node\");\n\n        delete ST.cache[$node.data(\"path\")];\n        $node\n            .removeData(\"path\")\n        // Reset the path of all subnodes\n            .find(\".tree-node\")\n            .each(function() {\n                var $s = $(this);\n                delete ST.cache[$s.data(\"path\")];\n                $s.data(\"path\", null);\n            });\n    };\n\n    $.widget(\"squirrel.tree\", widget);\n\n    /**\n     * Find the jQuery node for a path\n     * @param path array of keys representing the path\n     * @return a JQuery element\n     */\n    ST.getNodeFromPath = function(path) {\n        var $node = ST.cache[path.join(S.PATHSEP)];\n        if (DEBUG && $node && $node.length === 0)\n            // Not in the cache, was something not been through get_path?\n            debugger;\n        return $node;\n    };\n\n    /**\n     * Return true if there is at least one undoable operation\n     */\n    ST.can_undo = function() {\n        return ST.undos.length !== 0;\n    };\n\n    /**\n     * Undo the most recent action\n     */\n    ST.undo = function() {\n        if (DEBUG && ST.undos.length === 0) debugger;\n\n        var a = ST.undos.pop();\n        a.time = Date.now();\n        if (DEBUG) console.debug(\"Undo \" + Hoard.stringify_action(a));\n        var res = S.client.hoard.record_action(\n            a,\n            function(e) {\n                ST.action(\n                    e, false,\n                    function() {\n                        // If there are no undos, there can be no modifications.\n                        // The hoard status will not be changed, though, so a\n                        // save may still be required.\n                        if (ST.length === 0)\n                            $(\".tree-modified\").removeClass(\"tree-modified\");\n                        Utils.sometime(\"update_save\");\n                    });\n            });\n        if (res !== null)\n            SD.squeak({\n                title: TX.error(),\n                severity: \"error\",\n                message: res.message\n            });\n    };\n\n})(jQuery, Squirrel);\n"]}