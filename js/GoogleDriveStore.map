{"version":3,"sources":["js/GoogleDriveStore.js"],"names":["GoogleDriveStore","params","gapi_is_loaded","DEBUG","console","debug","this","_init","self","gapi_loader","$","getScript","fail","jqxhr","settings","exception","call","TX","tx","status","gapi_on_load","CLIENT_ID","SCOPE","prototype","Object","create","AbstractStore","SQUIRREL_STORE","_analyse_error","r","context","mess","result","error","message","body","tid","window","setTimeout","clearTimeout","handleClientLoad","gapi","client","drive","about","get","then","user","displayName","handleAuthResult","authResult","load","auth","authorize","client_id","scope","BOUNDARY","DELIMITER","RETIMILED","_getfile","url","ok","oauthToken","getToken","ajax","method","dataType","responseType","beforeSend","jqXHR","setRequestHeader","access_token","success","data","textStatus","errorThrown","reason","_follow_path","parentid","path","length","p","slice","pathel","shift","create_folder","metadata","title","mimeType","parents","id","files","insert","response","query","list","q","items","NODATA","_putfile","name","uploadType","visibility","multipartRequestBody","JSON","stringify","Utils","ArrayBufferToBase64","request","headers","Content-Type","options","extend","needs_path","identifier","write","split","pop","create_file","read","get_file","downloadUrl"],"mappings":"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","file":"js/GoogleDriveStore.min.js","sourcesContent":["/*@preserve Copyright (C) 2015 Crawford Currie http://c-dot.co.uk license MIT*/\n\n/* global DEBUG */\n/* global TX */\n/* global AbstractStore */\n/* global Utils */\n/* global gapi */\n/* global SQUIRREL_STORE:true */\n\n/**\n * A store using Google Drive\n * @implements AbstractStore\n */\n\nvar CLIENT_ID = \"985219699584-mt1do7j28ifm2vt821d498emarmdukbt.apps.googleusercontent.com\";\n\n// While the appfolder would seem to make sense for Squirrel, it does make\n// it absolutely clear to an attacker where to look for Squirrel data files.\n// By granting full drive access, we open up the whole drive for possible\n// places to hoard.\nvar SCOPE = \"https://www.googleapis.com/auth/drive\";\n\nvar gapi_is_loaded = false;\nvar gapi_loader;\n\nfunction GoogleDriveStore(params) {\n    \"use strict\";\n\n    if (gapi_is_loaded) {\n        if (DEBUG) console.debug(\"gapi is already loaded\");\n        this._init(params);\n    } else {\n        var self = this;\n        gapi_loader = function() {\n            if (DEBUG) console.debug(\"Loading GoogleDriveStore\");\n            self._init(params);\n        };\n        $.getScript(\n            \"https://apis.google.com/js/client.js?onload=gapi_on_load\")\n        .fail(function(jqxhr, settings, exception) {\n            params.fail.call(\n                self,\n                TX.tx(\"Failed to load Google APIs: $1 $2\",\n                      exception, jqxhr.status));\n        });\n    }\n}\n\nGoogleDriveStore.prototype = Object.create(AbstractStore.prototype);\n\nSQUIRREL_STORE = GoogleDriveStore;\n\nfunction gapi_on_load() {\n    \"use strict\";\n\n    if (DEBUG) console.debug(\"gapi is loaded\");\n    gapi_is_loaded = true;\n    if (gapi_loader)\n        gapi_loader();\n}\n\n/**\n * @private\n * Analyse an error returned by a promise\n */\nGoogleDriveStore.prototype._analyse_error = function(r, context, fail) {\n    \"use strict\";\n    var mess = context + TX.tx(\" failed: \");\n    if (r.status === 401) {\n        mess += TX.tx(\"Your access token has expired, or you are not logged in. Please refresh the page in order to save in Google Drive\");\n    } else if (r.result) {\n        mess += r.result.error.message;\n    } else {\n        mess += r.body;\n    }\n    fail.call(this, mess);\n};\n\nGoogleDriveStore.prototype._init = function(params) {\n    \"use strict\";\n\n    var self = this;\n\n    // Timeout after 20 seconds of waiting for auth\n    var tid = window.setTimeout(function() {\n        window.clearTimeout(tid);\n        params.fail.call(\n            self,\n            TX.tx(\"Timeout trying to authorise access to Google Drive. Are popups blocked in your browser?\"));\n    }, 20000);\n\n    var handleClientLoad = function() {\n        if (DEBUG) console.debug(\"GoogleDriveStore: drive/v2 loaded\");\n        gapi.client.drive.about.get(\"name\")\n            .then(\n                function(result) {\n                    if (result.status === 200) {\n                        self.user(result.result.user.displayName);\n                    } else {\n                        self._analyse_error(\n                            result, TX.tx(\"Google Drive load\"), params.fail);\n                    }\n                    // Finish initialising the store\n                    AbstractStore.call(self, params);\n                },\n                function(r) {\n                    self._analyse_error(\n                        r, TX.tx(\"Google Drive load\"), params.fail);\n                });\n    };\n\n    var handleAuthResult = function (authResult) {\n        var message;\n        window.clearTimeout(tid);\n        if (authResult && !authResult.fail) {\n            // Access token has been retrieved, requests\n            // can be sent to the API.\n            if (DEBUG) console.debug(\"GoogleDriveStore: auth OK\");\n            gapi.client.load(\"drive\", \"v2\", handleClientLoad);\n        } else {\n            if (authResult === null)\n                message = TX.tx(\"Could not authorise access to Google Drive\");\n            else\n                message = authResult.fail;\n            params.fail.call(self, message);\n        }\n    };\n\n    if (DEBUG) console.debug(\"GoogleDriveStore: authorising\");\n\n    gapi.auth.authorize(\n        {\n            //immediate: true,\n            client_id: CLIENT_ID,\n            scope: SCOPE\n        },\n        handleAuthResult);\n};\n\nvar BOUNDARY = \"-------314159265358979323846\";\nvar DELIMITER = \"\\r\\n--\" + BOUNDARY + \"\\r\\n\";\nvar RETIMILED = \"\\r\\n--\" + BOUNDARY + \"--\";\n\n/**\n * @private\n * @param url url to GET\n * @param ok callback on ok, passed the data\n * @param fail callback on fail\n */\nGoogleDriveStore.prototype._getfile = function(url, ok, fail) {\n    \"use strict\";\n\n    var self = this;\n    var oauthToken = gapi.auth.getToken();\n    var converter;\n\n    if (DEBUG) console.debug(\"GoogleDriveStore: GET \" + url);\n\n    // SMELL: no client API to get file content from Drive\n    $.ajax({\n        url: url,\n        method: \"GET\",\n        dataType: \"binary\",\n        responseType: \"arraybuffer\",\n        beforeSend: function(jqXHR) {\n            jqXHR.setRequestHeader(\n                \"Authorization\",\n                \"Bearer \" + oauthToken.access_token);\n        },\n        success: function(data, textStatus, jqXHR) {\n            if (DEBUG) console.debug(\"GoogleDriveStore: _getfile OK\");\n            ok.call(self, data);\n        },\n        error: function(jqXHR, textStatus, errorThrown) {\n            var reason = textStatus + \" \" + errorThrown;\n            if (DEBUG) console.debug(\"_getfile failed\", reason);\n            fail.call(self, reason);\n        }\n    });\n};\n\n// Get the id of the folder at the end of the given path, optionally creating\n// the folders if they don't exist. Call ok passing the id of the\n// leaf folder, or fail otherwise.\nGoogleDriveStore.prototype._follow_path = function(\n    parentid, path, ok, fail, create) {\n    \"use strict\";\n\n    var self = this;\n\n    if (path.length === 0) {\n        ok.call(self, parentid);\n        return;\n    }\n\n    var p = path.slice();\n    var pathel = p.shift();\n    var create_folder = function(reason) {\n        var metadata = {\n            title: pathel,\n            mimeType: \"application/vnd.google-apps.folder\"\n        };\n        if (parentid !== \"root\")\n            // Don't think we want this for a root file?\n            metadata.parents = [ { id: parentid } ];\n        if (DEBUG) console.debug(\"Creating folder \" + pathel + \" under \" + parentid);\n        gapi.client.drive.files\n            .insert(metadata)\n            .then(\n                function(response) {\n                    var id = response.result.id;\n                    self._follow_path(id, p, ok, fail, true);\n                },\n                function(r) {\n                    // create failed\n                    self._analyse_error(r, TX.tx(\"Create folder\"), fail);\n                });\n    };\n    var query = \"title='\" + pathel + \"'\"\n        + \" and '\" + parentid + \"' in parents\"\n        + \" and mimeType='application/vnd.google-apps.folder'\"\n        + \" and trashed=false\";\n\n    gapi.client.drive.files\n        .list({\n            q: query\n        })\n        .then(\n            function(response) {\n                var items = response.result.items;\n                if (items.length > 0) {\n                    var id = items[0].id;\n                    if (DEBUG) console.debug(\"GoogleDriveStore: found \" + query + \" at \" + id);\n                    self._follow_path(id, p, ok, fail, create);\n                } else {\n                    if (DEBUG) console.debug(\"GoogleDriveStore: could not find \" + query);\n                    if (create) {\n                        create_folder();\n                    } else {\n                        fail.call(self, AbstractStore.NODATA);\n                    }\n                }\n            },\n            function(r) {\n                self._analyse_error(r, TX.tx(\"Follow path\"), fail);\n            });\n};\n\n// id is a (string) id or a { parentid: name: structure }\nGoogleDriveStore.prototype._putfile = function(parentid, name, data, ok, fail, id) {\n    \"use strict\";\n\n    var self = this;\n    var url = \"/upload/drive/v2/files\";\n    var method = \"POST\";\n    var params = {\n        uploadType: \"multipart\",\n        visibility: \"PRIVATE\"\n    };\n    var metadata = {\n        title: name,\n        mimeType: \"application/octet-stream\"\n    };\n\n    if (typeof parentid !== \"undefined\") {\n        metadata.parents = [ { id: parentid } ];\n    }\n\n    if (typeof id !== \"undefined\") {\n        // Known fileId, we're updating an existing file\n        url += \"/\" + id;\n        method = \"PUT\";\n    }\n\n    var multipartRequestBody =\n        DELIMITER +\n        \"Content-Type: application/json\\r\\n\\r\\n\" +\n        JSON.stringify(metadata) +\n        DELIMITER +\n        \"Content-Type: application/octet-stream\\r\\n\" +\n        \"Content-Transfer-Encoding: base64\\r\\n\" +\n        \"\\r\\n\" +\n        Utils.ArrayBufferToBase64(data) +\n        RETIMILED;\n\n    gapi.client.request({\n        path: url,\n        method: method,\n        params: params,\n        headers: {\n            \"Content-Type\": \"multipart/related; boundary=\\\"\" + BOUNDARY + \"\\\"\"\n        },\n        body: multipartRequestBody})\n\n        .then(\n            function(response) {\n                ok.call(self, response.result);\n            },\n            function(r) {\n                self._analyse_error(r, TX.tx(\"Put\"), fail);\n            });\n};\n\nGoogleDriveStore.prototype.options = function() {\n    \"use strict\";\n\n    return $.extend(AbstractStore.prototype.options(), {\n        needs_path: true,\n        identifier: \"Google Drive\"\n    });\n};\n\nGoogleDriveStore.prototype.write = function(path, data, ok, fail) {\n    \"use strict\";\n\n    var self = this;\n\n    var p = path.split(\"/\");\n    var name = p.pop();\n\n    var create_file = function(parentid) {\n        // See if the file already exists, if it does then use it's id\n        var query = \"title='\" + name + \"'\"\n            + \" and '\" + parentid + \"' in parents\"\n            + \" and trashed=false\";\n        if (DEBUG) console.debug(\"GoogleDriveStore: checking existance of \" + name);\n        gapi.client.drive.files\n            .list({ q: query })\n            .then(\n                function(response) {\n                    var items = response.result.items;\n                    var id;\n                    if (items.length > 0) {\n                        id = items[0].id;\n                        if (DEBUG) console.debug(\"GoogleDriveStore: updating \" + name + \" id \" + id);\n                    } else\n                        if (DEBUG) console.debug(\"GoogleDriveStore: creating \" + name + \" in \" + parentid);\n                    self._putfile(parentid, name, data, ok, fail, id);\n                },\n                function(r) {\n                    self._analyse_error(r, TX.tx(\"Write\"), fail);\n                });\n    };\n\n    if (DEBUG) console.debug(\"GoogleDriveStore: following \" + path);\n    this._follow_path(\n        \"root\",\n        p,\n        create_file,\n        fail,\n        true);\n};\n\nGoogleDriveStore.prototype.read = function(path, ok, fail) {\n    \"use strict\";\n\n    if (DEBUG) console.debug(\"GoogleDriveStore: read \" + path);\n\n    var p = path.split(\"/\");\n    var name = p.pop();\n    var self = this;\n\n    var get_file = function(parentid) {\n        var query = \"title='\" + name + \"'\"\n        + \" and '\" + parentid + \"' in parents\"\n        + \" and trashed=false\";\n\n        gapi.client.drive.files\n            .list({ q: query })\n            .then(\n                function(response) {\n                    var items = response.result.items;\n                    if (items.length > 0) {\n                        var url = items[0].downloadUrl;\n                        if (DEBUG) console.debug(\n                            \"GoogleDriveStore: download found \" + name + \" at \" + url);\n                        self._getfile(url, ok, fail);\n                    } else {\n                        if (DEBUG) console.debug(\n                            \"GoogleDriveStore: could not find \" + name);\n                        fail.call(self, AbstractStore.NODATA);\n                    }\n                },\n                function(r) {\n                    self._analyse_error(r, TX.tx(\"Read\"), fail);\n                });\n    };\n\n    this._follow_path(\n        \"root\",\n        p,\n        get_file,\n        fail,\n        false);\n};\n"]}