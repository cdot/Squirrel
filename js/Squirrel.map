{"version":3,"sources":["js/Squirrel.js"],"names":["Squirrel","PATHSEP","String","fromCharCode","NEW_SETTINGS","IS_LOADED","IS_PENDING_SAVE","IS_CORRUPT","IS_EMPTY","USE_STEGANOGRAPHY","Dialog","Tree","$","S","SD","ST","isTouchCapable","window","addEventListener","scrollTo","init_ui","hide","on","getTapEvent","save_hoards","undo","mess","squeak","title","message","extras","text","TX","tx","search","this","val","each","$this","$help","$close","addClass","button","icons","primary","show","insertBefore","prependTo","opts","data","classes","ui-button-icon","tree","is_root","init_menus","clipboard","document","init_application","check_alarms","update_save","resetStyling","Utils","sometime_is_now","$body","$el","append","bgcol","css","style","attr","font","color","background-color","remove","want_bright","RGBA","luma","bright","i","styleSheets","length","sheet","rules","cssRules","j","rule","test","selectorText","s","a","inverse","toString","e","backgroundColor","client","store","hoard","status","cloud","init_cloud_store","path","expired","next","$node","get_node","ring_alarm","severity","join","toLocaleDateString","after_close","add_child_node","value","sval","p","get_path","push","res","record_action","type","action","$newnode","DEBUG","open","insert_data","sometime","get_updates_from_cloud","cloard","chain","console","debug","merge_from_cloud","conflicts","warning","c","conflict","squeak_more","Hoard","stringify_action","unsaved_changes","max_changes","hasClass","replace","l","slice","unshift","options","identifier","actions_from_hierarchy","act","concat","sact","client_ok","cloud_ok","finished","autosave","close_dialog","write_client_store","writes","user","JSON","stringify","removeClass","save_client","PENDING_SAVE","soon","write_cloud_store","store_path","actions","last_sync","Date","now","update_cloud_store","construct_new_cloud","reconstruct_actions","time","cloud_store_read_ok","parse","cloud_store_read_failed","AbstractStore","NODATA","reads","toggle","can_undo","us","$sb","hoards_loaded","authenticated","load_cloud_hoard","error","init_client_hoard","needs_path","store_settings","load_client_hoard","rebuild_hoard","as","pop","identify_user","uReq","pReq","pass","login","on_signin","user_required","pass_required","init_client_store","EncryptedStore","understore","params","LocalStorageStore","ok","fail","pp","ppp","SQUIRREL_STORE","StegaStore","re","RegExp","hits","match","close","n","v","parents","ready","qs","query_string","unco","location","href","ajaxSetup","cache","steg","store_bits","load","init","before_open","ui","target","is","first","$val","find","has_alarm","is_leaf","closest","is_open","$root","contextmenu","ZeroClipboard","zc","menu","children","event","clipboardData","setData","pa","json","handle_menu_choice","cmd","edit","add","randomise","alarm","delete_node","pick","delegate","uiIcon","preventContextMenuForPopup","preventSelect","taphold","beforeOpen","select","jQuery"],"mappings":"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","file":"js/Squirrel.min.js","sourcesContent":["/*@preserve Copyright (C) 2015 Crawford Currie http://c-dot.co.uk license MIT*/\n\n/* eslint-env jquery */\n/* global DEBUG:true */\n/* global TX */\n/* global Utils */\n/* global AbstractStore */\n/* global EncryptedStore */\n/* global LocalStorageStore */\n/* global StegaStore */\n/* global Hoard */\n/* global Tree */\n/* global SQUIRREL_STORE */\n\n/*\n * The Squirrel Application namespace and UI.\n */\n\nvar Squirrel = {\n    PATHSEP: String.fromCharCode(1), // separator used in Path->node mapping\n\n    // Store statii\n    // TX.tx(\"has new settings\")\n    NEW_SETTINGS: \"has new settings\",\n    // TX.tx(\"is loaded\")\n    IS_LOADED: \"is loaded\",\n    // TX.tx(\"needs to be saved\")\n    IS_PENDING_SAVE: \"needs to be saved\",\n    // TX.tx(\"is corrupt\")\n    IS_CORRUPT: \"is corrupt\",\n    // TX.tx(\"is empty\")\n    IS_EMPTY: \"is empty\",\n\n    USE_STEGANOGRAPHY: false,\n    Dialog: {},\n    Tree: {}\n};\n\n(function($, S) {\n    \"use strict\";\n    var SD = S.Dialog;\n    var ST = S.Tree;\n\n    if ($.isTouchCapable()) {\n        // Go full screen\n        window.addEventListener(\"load\", function() {\n            window. scrollTo(0, 0);\n        });\n    }\n\n    S.init_ui = function() {\n        $(\"#authenticated_save\")\n            .hide()\n            .on($.getTapEvent(), function(/*evt*/) {\n                S.save_hoards();\n                return false;\n            });\n\n        $(\"#authenticated_undo\")\n            .hide()\n            .on($.getTapEvent(), function(/*evt*/) {\n                ST.undo(function(mess) {\n                    SD.squeak({\n                        title: \"Undo\",\n                        message: mess\n                    });\n                });\n                return false;\n            });\n\n        $(\"#authenticated_extras\")\n            .on($.getTapEvent(), function(/*evt*/) {\n                SD.extras();\n            });\n\n        $(\"#search\")\n            .on(\"change\", function(/*evt*/) {\n                $(\"#search_hits\").text(TX.tx(\"Searching...\"));\n                S.search($(this).val());\n            });\n\n        $(\"#search_button\")\n            .on($.getTapEvent(), function(/*evt*/) {\n                $(\"#search_hits\").text(TX.tx(\"Searching...\"));\n                S.search($(\"#search\").val());\n            });\n\n        $(\"#authenticated_search\")\n            .on($.getTapEvent(), function(/*evt*/) {\n                SD.search();\n            });\n        \n        $(\".help\").each(function() {\n            var $this = $(this);\n            $this.hide();\n            var $help = $(\"<button></button>\");\n            var $close = $(\"<button></button>\");\n            $help\n                .addClass(\"info-button\")\n                .button({\n                    icons: {\n                        primary: \"ui-icon-info\"\n                    },\n                    text: false\n                })\n                .on($.getTapEvent(), function() {\n                    $this.show();\n                    $help.hide();\n                })\n                .insertBefore(this);\n            $close\n                .addClass(\"help-close\")\n                .button({\n                    icons: {\n                        primary: \"ui-icon-circle-close\"\n                    },\n                    text: false\n                })\n                .on($.getTapEvent(), function() {\n                    $this.hide();\n                    $help.show();\n                })\n                .prependTo($this);\n        });\n\n        $(\"button\").each(function() {\n            var $this = $(this);\n            var opts;\n\n            if (typeof $this.data(\"icon\") !== \"undefined\") {\n                opts = {\n                    icons: {\n                        primary: $this.data(\"icon\")\n                    },\n                    classes: {\n                        \"ui-button-icon\": \"squirrel-icon\"\n                    },\n                    text: false\n                };\n            }\n            $this.button(opts);\n        });\n\n        $(\"#sites-node\").tree({\n            is_root: true\n        });\n        init_menus();\n\n        S.clipboard = null;\n\n        // Set up event handlers for sometime scheduler\n        $(document)\n            .on(\"init_application\", S.init_application)\n            .on(\"check_alarms\", S.check_alarms)\n            .on(\"update_save\", S.update_save)\n            .on(\"reset_styling\", S.resetStyling);\n        S.resetStyling();\n        \n        Utils.sometime_is_now();\n    };\n\n    S.resetStyling = function() {\n        // Copy subset of ui-widget styling into base\n        var $body = $(\"body\");\n        var $el = $(\"<div></div>\")\n            .addClass(\"ui-widget\")\n            .addClass(\"ui-widget-content\")\n            .addClass(\"dlg-hidden\");\n        $body.append($el);\n        var bgcol = $el.css(\"background-color\");\n        var style = \"body {\";\n        for (var attr in {\n            \"font\" : 0,\n            \"color\": 0,\n            \"background-color\": 0\n        }) {\n            var av = $el.css(attr);\n            style += attr + \": \" + av + \";\";\n        }\n        style += \"}\";\n        $el.remove();\n\n        // Do we need bright highlights in user classes?\n        var want_bright = (bgcol && bgcol != \"transparent\" &&\n                           new RGBA(bgcol).luma() < 0.65);\n\n        if (S.bright && !want_bright || !S.bright && want_bright) {\n            // Invert colours. Takes account of the fact that only\n            // local stylesheets can be found this way. Stylesheets\n            // loading from other domains (i.e. CDNs) are not local.\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (!sheet)\n                    continue;\n                var rules = sheet.rules || sheet.cssRules;\n                if (!rules)\n                    continue;               \n                for (var j = 0; j < rules.length; j++) {\n                    var rule = rules[j];\n                    if (/\\.[-:a-z0-9]*$/i.test(rule.selectorText)) {\n                        // Class definition\n                        var s = \"\";\n                        if (rule.style.color) {\n                            try {\n                                var a = new RGBA(rule.style.color);\n                                s += \"color: \" +\n                                    a.inverse().toString() + \";\"\n                            } catch (e) {\n                            }\n                        }\n                        if (rule.style.backgroundColor) {\n                            try {\n                                var a = new RGBA(\n                                    rule.style.backgroundColor);\n                                s += \"background-color: \" +\n                                    a.inverse().toString() + \";\"\n                            } catch (e) {\n                            }\n                        }\n                        if (s.length > 0)\n                            style += rule.selectorText + \"{\" + s + \"}\";\n                    }\n                }\n            }\n            S.bright = want_bright;\n        }\n\n        $(\"#computed-styles\").remove();\n        style = \"<style id='computed-styles'>\" + style + \"</style>\";\n        $body.append(style);\n    };\n    \n    /**\n     * Initialise application data (new Squirrel(), effectively)\n     */\n    S.init_application = function() {\n        // status may be one of IS_EMPTY, IS_CORRUPT, IS_LOADED or\n        // NEW_SETTINGS. If the status is anything but IS_LOADED\n        // then it is a candidate for saving.\n        S.client = {\n            store: null,                 // The store used actively\n            hoard: null,                 // The hoard in that store\n            status: S.IS_EMPTY\n        };\n\n        S.cloud = {\n            store: null,                 // Temporary memory used during load\n            status: S.IS_EMPTY\n        };\n\n        // Kick off by initialising the cloud store.\n        S.init_cloud_store();\n    };\n\n    // Event handler for check_alarms\n    S.check_alarms = function(/* event */) {\n        S.client.hoard.check_alarms(\n            function(path, expired, next) {\n                var $node = ST.get_node(path);\n                ST.ring_alarm($node);\n                SD.squeak(\n                    {\n                        severity: \"warning\",\n                        message:\n                        \"<div class='ui-icon ui-icon-squirrel-rang'></div>\"\n                            + TX.tx(\"Reminder on '$1' was due on $2\",\n                                    path.join(\"/\"),\n                                    expired.toLocaleDateString()),\n                        after_close: next\n                    });\n            });\n    };\n\n    /**\n     * A (manual) new tree node action\n     */\n    S.add_child_node = function($node, title, value) {\n        var p = ST.get_path($node), sval;\n        if (typeof value === \"string\")\n            sval = value;\n        p.push(title);\n\n        var res = S.client.hoard.record_action(\n            {\n                type: \"N\",\n                path: p,\n                data: sval\n            },\n            function(e) {\n                ST.action(\n                    e, true,\n                    function($newnode) {\n                        if (DEBUG && !$newnode) debugger;\n                        ST.open($newnode);\n                        if (typeof value !== \"string\"\n                            && typeof value !== \"undefined\") {\n                            S.insert_data(p, value);\n                        }\n\n                        Utils.sometime(\"update_save\");\n                    });\n            });\n        if (res !== null)\n            SD.squeak(res.message);\n    };\n\n    S.get_updates_from_cloud = function(cloard, chain) {\n        // This will get triggered whenever both hoards are\n        // successfully loaded.\n        if (DEBUG) console.debug(\"Merging from cloud hoard\");\n        S.client.hoard.merge_from_cloud(\n            cloard,\n            ST.action,\n            function(conflicts) {\n                if (conflicts.length > 0) {\n                    SD.squeak({\n                        title: TX.warning(),\n                        severity: \"warning\",\n                        message: \n                        TX.tx(\"Conflicts were detected while merging actions from the Cloud. Please review these rejected actions before saving.\")\n                    });\n                    $.each(conflicts, function(i, c) {\n                        var e = c.conflict;\n                        SD.squeak_more({\n                            severity: \"warning\",\n                            message: Hoard.stringify_action(e)\n                                + \": \" + c.message });\n                    });\n                }\n                S.cloud.status = S.IS_LOADED;\n                // Finished with the cloud hoard (for now)\n                chain();\n            });\n    };\n\n    // Determine if there are unsaved changes, and generate a warning\n    // message for the caller to use.\n    S.unsaved_changes = function(max_changes) {\n        var message = [];\n\n        $(\".tree-node .tree-modified\").each(function() {\n            if (DEBUG && !$(this).data(\"path\")\n                && !$(this).hasClass(\"tree-root\"))\n                debugger; // Missing data-path\n            var path = $(this).data(\"path\") || \"node\";\n            message.push(TX.tx(\"$1 has changed\",\n                               path.replace(S.PATHSEP, \"/\")));\n        });\n\n        if (message.length > max_changes) {\n            var l = message.length;\n            message = message.slice(0, max_changes);\n            message.push(TX.tx(\"... and $1 more change$?($1!=1,s,)\", l - 5));\n        }\n\n        if (S.cloud.status !== S.IS_LOADED) {\n            message.unshift(TX.tx(\"The $1 hoard $2\",\n                                  S.cloud.store\n                                  ? S.cloud.store.options().identifier\n                                  : TX.tx(\"Cloud\"),\n                                  TX.tx(S.cloud.status)));\n        }\n        if (S.client.status !== S.IS_LOADED) {\n            message.unshift(TX.tx(\"The $1 hoard $2\",\n                                  S.client.store.options().identifier,\n                                  TX.tx(S.client.status)));\n        }\n\n        if (message.length === 0)\n            return null;\n\n        return message.join(\"\\n\");\n    };\n\n    /**\n     * Insert data from a structure under the given path\n     * @param path path to the parent below which this data will be inserted\n     * @param data hoard cache format data\n     */\n    S.insert_data = function(path, data) {\n        SD.squeak({ title: \"Loading\" });\n\n        S.client.hoard.actions_from_hierarchy(\n            { data: data },\n            function(act, next) { // listener\n                //if (DEBUG) console.debug(Hoard.stringify_action(act));\n                act.path = path.slice().concat(act.path);\n                var res = S.client.hoard.record_action(\n                    act, function (sact) {\n                        ST.action(sact, false, next);\n                    });\n                if (res !== null)\n                    SD.squeak_more(res.message);\n                if (next)\n                    next();\n            },\n            function() { // chain on complete\n                Utils.sometime(\"update_save\");\n                SD.squeak_more(TX.tx(\"JSON has been loaded\"));\n            });\n    };\n\n    S.save_hoards = function() {\n        SD.squeak({\n            title: TX.tx(\"Saving\")\n        });\n\n        var client_ok = true;\n        var cloud_ok = true;\n\n        var finished = function() {\n            if (DEBUG) console.debug(\"...save finished\");\n            Utils.sometime(\"update_save\");\n            if (client_ok && cloud_ok) {\n                if (S.client.hoard.options.autosave)\n                    SD.close_dialog($(\"#squeak\"));\n                else\n                    // Otherwise leave it open\n                    SD.squeak_more(TX.tx(\"Save complete\"));\n\n            } else {\n                // Otherwise leave it open, disable auto-save\n                SD.squeak_more({\n                    severity: \"error\",\n                    message: TX.tx(\"Save encountered errors\")});\n                S.client.hoard.options.autosave = false;\n            }\n        },\n\n        write_client_store = function() {\n            S.client.store.writes(\n                \"S.\" + S.client.store.user(),\n                JSON.stringify(S.client.hoard),\n                function() {\n                    if (DEBUG) console.debug(\"...client save OK\");\n                    $(\".tree-modified\").removeClass(\"tree-modified\");\n                    S.client.status = S.IS_LOADED;\n                    SD.squeak_more(\n                        TX.tx(\"Saved in $1\", this.options().identifier));\n                    finished();\n                },\n                function(e) {\n                    if (DEBUG) console.debug(\"...client save failed \" + e);\n                    SD.squeak_more({\n                        severity: \"error\",\n                        message: TX.tx(\"Failed to save in $1: $2\",\n                                       this.options().identifier, e)\n                    });\n                    client_ok = false;\n                    finished();\n                });\n        },\n\n        save_client = function() {\n            if (DEBUG) console.debug(\"...save to client\");\n\n            if (S.client.status === S.IS_LOADED\n                && $(\".tree-modified\").length === 0) {\n                finished();\n                return;\n            }\n\n            S.client.status = S.PENDING_SAVE;\n\n            SD.squeak_more({\n                severity: \"while\",\n                message: TX.tx(\"Saving in $1\",\n                               S.client.store.options().identifier)});\n\n            Utils.soon(write_client_store);\n        },\n\n        write_cloud_store = function(cloard) {\n            S.cloud.store.writes(\n                S.client.hoard.options.store_path,\n                JSON.stringify(cloard),\n                function() {\n                    if (DEBUG) console.debug(\"...cloud save OK\");\n                    S.client.hoard.actions = [];\n                    S.client.hoard.last_sync = Date.now();\n                    SD.squeak_more(\n                        TX.tx(\"Saved in $1\", this.options().identifier));\n                    S.cloud.status = S.IS_LOADED;\n                    save_client();\n                },\n                function(e) {\n                    if (DEBUG) console.debug(\"...cloud save failed \" + e);\n                    SD.squeak_more({\n                        severity: \"error\",\n                        message: TX.tx(\"Failed to save in $1: $2\",\n                                       this.options().identifier, e)});\n                    cloud_ok = false;\n                    save_client();\n                });\n        },\n\n        // Save the given hoard into the cloud.\n        update_cloud_store = function(cloard) {\n            cloard.actions = cloard.actions.concat(S.client.hoard.actions);\n            if (S.cloud.store) {\n                if (DEBUG) console.debug(\"...save to cloud\");\n\n                SD.squeak_more({\n                    severity: \"while\",\n                    message: TX.tx(\"Saving in $1\",\n                                   S.cloud.store.options().identifier)});\n\n                S.cloud.status = S.PENDING_SAVE;\n\n                Utils.soon(function() { write_cloud_store(cloard); });\n            } else {\n                if (DEBUG) console.debug(\"...no cloud store\");\n                save_client();\n            }\n        },\n\n        // Construct a new cloud hoard from data in the client. This will\n        // happen if the cloud is read and found to be empty or corrupt,\n        // but not if the read failed.\n        construct_new_cloud = function() {\n            if (DEBUG) console.debug(\"...construct cloud \");\n            var cloard = new Hoard();\n            S.client.hoard.reconstruct_actions(\n                function(a, next) {\n                    cloard.actions.push({\n                        type: a.type,\n                        time: a.time,\n                        data: a.data,\n                        path: a.path.slice()\n                    });\n                    if (next)\n                        next();\n                },\n                function() {\n                    update_cloud_store(cloard);\n                });\n        },\n\n        // Action on the cloud store being read OK\n        cloud_store_read_ok = function(data) {\n            var cloard;\n            if (DEBUG) console.debug(\"...cloud read OK \");\n            try {\n                cloard = new Hoard(JSON.parse(data));\n                S.cloud.status = S.IS_LOADED;\n            } catch (e) {\n                // We'll get here if decryption failed....\n                if (DEBUG) console.debug(\"Cloud hoard JSON parse failed: \" + e);\n                SD.squeak_more({\n                    severity: \"error\",\n                    message: TX.tx(\"$1 hoard can't be read for update\",\n                                   this.options().identifier)});\n                S.cloud.status = S.IS_CORRUPT;\n                cloud_ok = false;\n                construct_new_cloud();\n                return;\n            }\n            \n            if (S.cloud.status === S.IS_LOADED) {\n                if (DEBUG) console.debug(\"...merge cloud \");\n                S.client.hoard.merge_from_cloud(\n                    cloard, ST.action);\n            }\n            \n            if ( S.cloud.status !== S.IS_LOADED\n                 || S.client.hoard.actions.length !== 0) {\n                // Only save if there actually some changes\n                if (DEBUG) console.debug(\"...update from cloud \");\n                update_cloud_store(cloard);\n            } else\n                Utils.soon(save_client);\n        },\n\n        // Action on the cloud store read failing\n        cloud_store_read_failed = function(e) {\n            if (DEBUG) console.debug(\"...cloud read failed \" + e);\n            if (e === AbstractStore.NODATA) {\n                if (DEBUG) console.debug(this.options().identifier + \" contains NODATA\");\n                S.cloud.status = S.IS_EMPTY;\n                construct_new_cloud();\n            } else {\n                SD.squeak_more({\n                    severity: \"error\",\n                    message: TX.tx(\"Failed to refresh from $1: $2\",\n                                   this.options().identifier, e)});\n                cloud_ok = false;\n                Utils.soon(save_client);\n            }\n        };\n\n        if (DEBUG) console.debug(\"Saving; client \" + S.client.status\n                                 + \"; cloud \" + S.cloud.status);\n        if (S.cloud.status === S.NEW_SETTINGS\n            || S.cloud.status === S.IS_EMPTY) {\n            // Don't attempt to resync out before saving, simply\n            // overwrite the cloud.\n            if (DEBUG) console.debug(\"...constructing new cloud because settings\");\n            construct_new_cloud();\n        } else {\n            // Reload and save the cloud hoard\n            if (DEBUG) console.debug(\"...reloading cloud\");\n            S.cloud.store.reads(\n                S.client.hoard.options.store_path,\n                cloud_store_read_ok,\n                cloud_store_read_failed);\n        }\n    };\n\n    S.update_save = function(/*event*/) {\n        $(\"#authenticated_undo\").toggle(ST.can_undo());\n        $(\"#extras_autosave\").val(S.client.hoard.options.autosave ? \"on\" : \"off\");\n        var us = S.unsaved_changes(3);\n        var $sb = $(\"#authenticated_save\");\n\n        if (us !== null) {\n            if (S.client.hoard.options.autosave) {\n                S.save_hoards();\n            } else {\n                $sb.attr(\n                    \"title\",\n                    TX.tx(\"Save is required because: \") + us);\n                $sb.show();\n            }\n        } else {\n            $(\"#authenticated_save\").hide();\n        }\n    };\n\n    // Last in the initial hoard load sequence\n    S.hoards_loaded = function() {\n        // We are ready for interaction\n        S.authenticated();\n\n        $(window).on(\"beforeunload\", function() {\n            var us = S.unsaved_changes(10);\n            if (us !== null) {\n                us = TX.tx(\"You have unsaved changes\")\n                    + \"\\n\" + us\n                    + \"\\n\" + TX.tx(\"Are you really sure?\");\n                return us;\n            }\n        });\n\n        Utils.sometime(\"update_save\");\n        Utils.sometime(\"check_alarms\");\n\n        // Flush the sometimes, and allow new sometimes to be set\n        Utils.sometime_is_now();\n    };\n\n    /**\n     * STEP 6: Called when we have a (possibly empty) client hoard.\n     *  Try and synch it from the cloud.\n     */\n    S.load_cloud_hoard = function() {\n        if (S.cloud.store) {\n            if (DEBUG) console.debug(\n                \"Reading cloud \" + S.cloud.store.options().identifier);\n            S.cloud.store.reads(\n                S.client.hoard.options.store_path,\n                function(data) {\n                    var hoard;\n                    if (DEBUG) console.debug(this.options().identifier + \" is ready\");\n                    try {\n                        hoard = JSON.parse(data);\n                    } catch (e) {\n                        if (DEBUG) console.debug(\"Client hoard JSON parse failed: \" + e);\n                        SD.squeak({\n                            title: TX.error(),\n                            severity: \"error\",\n                            message:\n                            TX.tx(\"$1 hoard exists, but can't be read.\",\n                                  this.options().identifier)\n                                + \" \"\n                                + TX.tx(\"Check that you have the correct password.\")\n                        });\n                        S.cloud.status = S.IS_CORRUPT;\n                        Utils.soon(S.hoards_loaded);\n                        return;\n                    }\n                    //if (DEBUG) console.debug(\"Cloud hoard \" + data);\n                    S.get_updates_from_cloud(\n                        new Hoard(hoard),\n                        S.hoards_loaded);\n                },\n                function(e) {\n                    if (e === AbstractStore.NODATA) {\n                        if (DEBUG) console.debug(\n                            this.options().identifier + \" contains NODATA\");\n                        S.cloud.status = S.IS_EMPTY;\n                    } else {\n                        if (DEBUG) console.debug(\n                            this.options().identifier + \" has NODATA: \" + e);\n                        SD.squeak({\n                            title: TX.error(),\n                            severity: \"error\",\n                            message: TX.tx(\"Could not load cloud hoard.\")\n                        });\n                        SD.squeak_more(\n                            TX.tx(\"Check that you have the correct password.\"));\n                        // Could not contact cloud; continue all the same\n                    }\n                    Utils.soon(S.hoards_loaded);\n                });\n        } else {\n            S.hoards_loaded();\n        }\n    };\n\n    /**\n     * STEP 5: Called when there is no existing client hoard, to initialise\n     * a new one.\n     */\n    S.init_client_hoard = function() {\n        if (DEBUG) console.debug(\"Setting up client hoard\");\n        S.client.hoard = new Hoard();\n        S.client.status = S.IS_EMPTY;\n\n        if (S.cloud.store && S.cloud.store.options().needs_path) {\n            SD.store_settings(S.load_cloud_hoard);\n        } else {\n            S.load_cloud_hoard();\n        }\n    };\n\n    /**\n     * STEP 4: Once the stores have been initialised, we can load\n     * the client hoard. This will give us the baseline cache data and the\n     * location of the cloud hoard, so we can then chain loading and merging\n     * the cloud hoard.\n     */\n    S.load_client_hoard = function() {\n        var rebuild_hoard = function() {\n            if (DEBUG) console.debug(\"Reconstructing UI tree from cache\");\n            S.client.hoard.reconstruct_actions(\n                function(a, next) {\n                    ST.action(a, false, next);\n                },\n                function() { // on complete\n                    // Reset the UI modification list; we just loaded the\n                    // client hoard\n                    $(\".tree-modified\").removeClass(\"tree-modified\");\n                    // Mark all the nodes in the pending actions list as\n                    // modified. If a node isn't found, back up the tree\n                    // until we find a parent that does exist and mark it.\n                    var as = S.client.hoard.actions, i, p, $node;\n                    for (i = 0; i < as.length; i++) {\n                        p = as[i].path.slice();\n                        while (p.length > 0) {\n                            $node = ST.get_node(p);\n                            if ($node) {\n                                $node.addClass(\"tree-modified\");\n                                break;\n                            }\n                            p.pop();\n                        }\n                    }\n                    Utils.soon(S.load_cloud_hoard);\n                });\n        };\n\n        if (DEBUG) console.debug(\"Load client store\");\n\n        S.client.store.reads(\n            \"S.\" + S.client.store.user(),\n            function(data) {\n                try {\n                    S.client.hoard = new Hoard(JSON.parse(data));\n                    S.client.status = S.IS_LOADED;\n                } catch (e) {\n                    if (DEBUG) console.debug(\"Caught \" + e);\n                    SD.squeak({\n                        title: TX.error(),\n                        severity: \"error\",\n                        message:\n                        TX.tx(\"$1 hoard exists, but can't be read.\",\n                              this.options().identifier),\n                        // After close, clear down and try again\n                        after_close: function() {\n                            Utils.sometime(\"init_application\");\n                        }\n                    });\n                    SD.squeak_more(\n                        TX.tx(\"Check that you have the correct password.\"));\n                    return;\n                }\n                // Make sure we have a store path\n                if ((S.client.store\n                     && S.client.store.options().needs_path\n                     || S.cloud.store\n                     && S.cloud.store.options().needs_path)\n                    && !S.client.hoard.options.store_path) {\n                    SD.store_settings(rebuild_hoard);\n                } else {\n                    rebuild_hoard();\n                }\n            },\n            function(e) {\n                if (e === AbstractStore.NODATA) {\n                    if (DEBUG) console.debug(this.options().identifier + \" contains NODATA\");\n                    // Construct a new client hoard\n                    Utils.soon(S.init_client_hoard);\n                } else {\n                    SD.squeak({\n                        title: TX.error(),\n                        severity: \"error\",\n                        message: TX.tx(\"$1 store error: $2\",\n                                       this.options().identifier, e),\n                        after_close: function() {\n                            Utils.sometime(\"init_application\");\n                        }\n                    });\n                }\n            });\n    };\n\n    /**\n     * STEP 3: Login, fill in details the stores didn't provide, prompt\n     * is needed.\n     */\n    S.identify_user = function() {\n        var uReq = true;\n        var pReq = true;\n\n        // Spread user information determined during store initialisation\n        // around.\n        if (S.cloud.store\n            && typeof S.cloud.store.user() !== \"undefined\") {\n            // Force the cloud user onto the client store\n            if (DEBUG) console.debug(\"Cloud user is preferred: \" + S.cloud.store.user());\n            S.client.store.user(S.cloud.store.user());\n            uReq = false;\n        } else if (S.client.store\n                   && typeof S.client.store.user() !== \"undefined\") {\n            // Force the client user onto the cloud store\n            if (DEBUG) console.debug(\"Client user is available: \" + S.client.store.user());\n            if (S.cloud.store)\n                S.cloud.store.user(S.client.store.user());\n            uReq = false;\n        }\n\n        if (S.cloud.store\n            && typeof S.cloud.store.pass() !== \"undefined\") {\n            // Force the cloud pass onto the client store\n            if (DEBUG) console.debug(\"Cloud pass is preferred\");\n            if (S.client.store)\n                S.client.store.pass(S.cloud.store.pass());\n            pReq = false;\n        } else if (S.client.store\n                   && typeof S.client.store.pass() !== \"undefined\") {\n            // Force the client pass onto the cloud store\n            if (DEBUG) console.debug(\"Client pass is available\");\n            if (S.cloud.store)\n                S.cloud.store.pass(S.client.store.pass());\n            pReq = false;\n        }\n\n        // If we still need user or password, prompt\n        if (uReq || pReq) {\n            SD.login({\n                store: S.client.store,\n                on_signin: function(user, pass) {\n                    if (DEBUG) console.debug(\"Login prompt said user was \" + user);\n                    S.client.store.user(user);\n                    S.client.store.pass(pass);\n                    if (S.cloud.store) {\n                        S.cloud.store.user(user);\n                        S.cloud.store.pass(pass);\n                    }\n                    S.load_client_hoard();\n                },\n                user_required: uReq,\n                pass_required: pReq\n            });\n        } else\n            S.load_client_hoard();\n    };\n\n    /**\n     * STEP 2: Once the cloud store is loaded, we can move on to the client store.\n     */\n    S.init_client_store = function() {\n        // new LocalStorageStore({\n        new EncryptedStore({\n            understore: function(params) {\n                return new LocalStorageStore(params);\n            },\n\n            ok: function() {\n                if (DEBUG) console.debug(this.options().identifier\n                                         + \" store is ready\");\n                S.client.store = this;\n                $(\"#authmessage\").text(TX.tx(\"Loading...\"));\n                // Chain the login prompt\n                Utils.soon(S.identify_user);\n            },\n            fail: function(e) {\n                // We did our best!\n                SD.squeak({\n                    title: TX.error(),\n                    severity: \"error\",\n                    message: TX.tx(\"Encryption error: $1\", e)\n                });\n            }\n        });\n    };\n\n    /**\n     * STEP 1: Establish contact with the cloud, and get user details.\n     */\n    S.init_cloud_store = function() {\n        var p = {\n            ok: function() {\n                S.cloud.store = this;\n                // Chain the client store startup\n                Utils.soon(S.init_client_store);\n            },\n            fail: function(e) {\n                SD.squeak({\n                    title: TX.warning(),\n                    severity: \"warning\",\n                    message: TX.tx(\"Could not open cloud store: $1\", e),\n                    after_close: function() {\n                        S.init_client_store();\n                    }\n                });\n                SD.squeak_more({\n                    severity: \"warning\",\n                    message: TX.tx(\"If you continue, only the client store will be available\")\n                });\n            }\n        };\n\n        p.understore = function(pp) {\n            // SQUIRREL_STORE is a constant set by the low-level\n            // store module selected by dynamic load\n            if (S.USE_STEGANOGRAPHY) {\n                pp.understore = function(ppp) {\n                    return new SQUIRREL_STORE(ppp);\n                };\n                return new StegaStore(pp);\n            } else {            \n                return new SQUIRREL_STORE(pp);\n            }\n        };\n\n        return new EncryptedStore(p);\n    };\n\n    /**\n     * Perform a text search\n     */\n    S.search = function(s) {\n        var re;\n        try {\n            re = new RegExp(s, \"i\");\n        } catch (e) {\n            SD.squeak(\n                {\n                    message: TX.tx(\"Error in search expression '$1': \", s)\n                        + e\n                });\n        }\n        var hits = [];\n        $(\".tree-key,.tree-value\").each(function() {\n            if ($(this).text().match(re)) {\n                hits.push(this);\n            }\n        });\n\n        $(\"#search_hits\").text(TX.tx(\"$1 found\", hits.length));\n        if (hits.length === 0) {\n            SD.squeak(\n                {\n                    message: TX.tx(\"'$1' not found\", s)\n                });\n        } else {\n            $(\".tree-open\").each(function() {\n                ST.close($(this));\n            });\n            $.each(hits, function(n, v) {\n                $(v).parents(\".tree-collection\").each(function() {\n                    ST.open($(this));\n                });\n            });\n        }\n    };\n\n    $(document)\n        .ready(function() {\n            // By default, jQuery timestamps datatype 'script' and 'jsonp'\n            // requests to avoid them being cached by the browser.\n            // Disable this functionality by default so that as much as\n            // possible is cached locally\n\n            var qs = Utils.query_string();\n\n            // Use uncompressed if the current document is uncompressed\n            var unco = !/\\.min\\.html/.test(document.location.href);\n\n            if (qs.debug)\n                DEBUG = true;\n\n            if (!DEBUG) $.ajaxSetup({ cache: true });\n\n            var store = qs.store || \"TestStore\";\n            if (typeof qs.steg !== \"undefined\")\n                S.USE_STEGANOGRAPHY = true;\n\n            var store_bits = [ \"js/\" + store + \".min.js\" ];\n            if (S.USE_STEGANOGRAPHY) {\n                store_bits.push(\"js/Steganographer.min.js\");\n                store_bits.push(\"js/StegaStore.min.js\");\n            } else\n                $(\".using_steganography\").remove();\n            Utils.load(store_bits, unco, function () {\n                // Initialise translation module,\n                // and chain the application init\n                TX.init(function() {\n                    // Initialise UI components\n                    S.init_ui();\n                    S.init_application();\n                });\n            });\n            //$(this).tooltip();\n\n/*\n            if ($.isTouchCapable()) {\n                // mobile device; though shouldn't we determine the size?\n                // window.screen.width, window.screen.height\n                console.log(\"Device is \" + window.screen.width + \" X \" +\n                            window.screen.height);\n            }\n*/\n        });\n\n        S.authenticated = function() {\n            $(\"#whoami\").text(S.client.store.user());\n            $(\"#unauthenticated\").hide();\n            $(\"#authenticated\").show();\n        };\n\n    var before_open = function(e, ui) {\n        var $node = (ui.target.is(\".tree-node\"))\n            ? ui.target\n            : ui.target.parents(\".tree-node\").first();\n        var $val = $node.find(\".value\").first();\n        var has_alarm = typeof $node.data(\"alarm\") !== \"undefined\";\n        var is_leaf = $node.hasClass(\"tree-leaf\");\n        var is_root = ui.target.closest(\".tree-node\").is(\"#sites-node\");\n        var is_open = $node.hasClass(\"tree-open\");\n        var $root = $(\"body\");\n\n        $root\n            .contextmenu(\"showEntry\", \"rename\", !is_root)\n            .contextmenu(\"showEntry\", \"copy_value\", is_leaf)\n            .contextmenu(\"showEntry\", \"pick_from\", is_leaf)\n            .contextmenu(\"showEntry\", \"make_copy\", !is_root)\n            .contextmenu(\"showEntry\", \"delete\", !is_root)\n            .contextmenu(\"showEntry\", \"add_alarm\", !has_alarm && !is_root)\n            .contextmenu(\"showEntry\", \"edit\", is_leaf)\n            .contextmenu(\"showEntry\", \"randomise\", is_leaf)\n            .contextmenu(\"showEntry\", \"add_subtree\", !is_leaf)\n            .contextmenu(\"enableEntry\", \"add_subtree\", is_open)\n            .contextmenu(\"showEntry\", \"add_value\", !is_leaf && !is_root)\n            .contextmenu(\"enableEntry\", \"add_value\", is_open)\n            .contextmenu(\"showEntry\", \"insert_copy\",\n                         !is_leaf && S.clipboard !== null);\n\n        if (typeof ZeroClipboard !== \"undefined\") {\n            var zc;\n            if (!$root.data(\"zc_copy\")) {\n                // First time, attach zero clipboard handler\n                if (DEBUG) console.debug(\"Attaching ZC copy\");\n                // Whack a Flash movie over the menu item li\n                zc = new ZeroClipboard(\n                    ui.menu.children(\"li[data-command='copy_value']\"));\n                // Handle the \"copy\" event that comes from\n                // the Flash movie and populate the event with our data\n                zc.on(\"copy\", function(event) {\n                    if (DEBUG) { console.debug(\"Copying to clipboard\"); }\n                    event.clipboardData.setData(\n                        \"text/plain\",\n                        $root.data(\"zc_copy\").text());\n                });\n                $root.data(\"ZC\", zc); // remember it to protect from GC\n            }\n            $root.data(\"zc_copy\", $val);\n\n            if (!$root.data(\"zc_cut\")) {\n                // First time, attach zero clipboard handler\n                if (DEBUG) console.debug(\"Attaching ZC cut\");\n                // Whack a Flash movie over the menu item li\n                zc = new ZeroClipboard(\n                    ui.menu.children(\"li[data-command='make_copy']\"));\n                // Handle the \"copy\" event that comes from\n                // the Flash movie and populate the event with our data.\n                // Note that this populates the system clipboard, but that\n                // clipboard is not accessible from Javascript so we\n                // can only insert things copied from Squirrel\n                zc.on(\"copy\", function(event) {\n                    if (DEBUG) console.debug(\"Copying JSON to clipboard\");\n                    var pa = $root.data(\"zc_cut\");\n                    var p = ST.get_path(pa);\n                    var n = S.client.hoard.get_node(p);\n                    var json = JSON.stringify(n);\n\n                    S.clipboard = json;\n                    event.clipboardData.setData(\"text/plain\", json);\n                });\n                $root.data(\"ZC\", zc); // remember it to protect from GC\n            }\n            $root.data(\"zc_cut\", $node.closest(\".tree-node\"));\n        }\n    };\n\n    /**\n     * Handler for context menu items\n     */\n    var handle_menu_choice = function(e, ui) {\n\n        var $node = ui.target.closest(\".tree-node\");\n\n        if (!$node)\n            throw \"No node for contextmenu\";\n\n        switch (ui.cmd) {\n        case \"copy_value\":\n            // Handled by the ZeroClipboard event handler\n            break;\n\n        case \"make_copy\":\n            // Handled by the ZeroClipboard event handler\n            break;\n\n        case \"insert_copy\":\n            if (DEBUG) console.debug(\"Pasting\");\n            if (S.clipboard) {\n                var data = JSON.parse(S.clipboard);\n                S.add_child_node($node, TX.tx(\"A copy\"), data.data);\n            }\n            break;\n\n        case \"rename\":\n            if (DEBUG) console.debug(\"Renaming\");\n            ST.edit($node, \".tree-key\");\n            break;\n\n        case \"edit\":\n            if (DEBUG) console.debug(\"Editing\");\n            ST.edit($node, \".tree-value\");\n            break;\n\n        case \"add_value\":\n            SD.add($node, true);\n            break;\n\n        case \"add_subtree\":\n            SD.add($node, false);\n            break;\n\n        case \"randomise\":\n            if (DEBUG) console.debug(\"Randomising\");\n            S.Dialog.randomise($node);\n            break;\n\n        case \"add_alarm\":\n            if (DEBUG) console.debug(\"Adding reminder\");\n            S.Dialog.alarm($node);\n            break;\n\n        case \"delete\":\n            if (DEBUG) console.debug(\"Deleting\");\n            S.Dialog.delete_node($node);\n            break;\n\n        case \"pick_from\":\n            if (DEBUG) console.debug(\"Picking\");\n            S.Dialog.pick($node);\n            break;\n\n        default:\n            if (DEBUG) debugger;\n        }\n    };\n\n    var init_menus = function() {\n        var menu = {\n            delegate: \".tree-info\",\n            menu: [\n                {\n                    title: TX.tx(\"Copy value\"),\n                    cmd: \"copy_value\",\n                    uiIcon: \"ui-icon-squirrel-copy\"\n                },\n                {\n                    title: TX.tx(\"Pick characters\"),\n                    cmd: \"pick_from\",\n                    uiIcon: \"ui-icon-squirrel-pick\"\n                },\n                {\n                    title: TX.tx(\"Rename\"),\n                    cmd: \"rename\",\n                    uiIcon: \"ui-icon-squirrel-edit\" \n                },\n                {\n                    title: TX.tx(\"Edit value\"),\n                    cmd: \"edit\",\n                    uiIcon: \"ui-icon-squirrel-edit\" \n                },\n                {\n                    title: TX.tx(\"Add reminder\"),\n                    cmd: \"add_alarm\",\n                    uiIcon: \"ui-icon-squirrel-alarm\" \n                },\n                {\n                    title: TX.tx(\"Generate new random value\"),\n                    cmd: \"randomise\",\n                    uiIcon: \"ui-icon-squirrel-key\" \n                },               \n                {\n                    title: TX.tx(\"Add new value\"),\n                    cmd: \"add_value\",\n                    uiIcon: \"ui-icon-squirrel-add-value\" \n                },\n                {\n                    title: TX.tx(\"Add new folder\"),\n                    cmd: \"add_subtree\",\n                    uiIcon: \"ui-icon-squirrel-add-folder\" \n                },\n                {\n                    title: TX.tx(\"Copy folder\"),\n                    cmd: \"make_copy\",\n                    uiIcon: \"ui-icon-squirrel-copy\"\n                },\n                {\n                    title: TX.tx(\"Insert copy\"),\n                    cmd: \"insert_copy\",\n                    uiIcon: \"ui-icon-squirrel-paste\"\n                },\n                {\n                    title: TX.tx(\"Delete\"),\n                    cmd: \"delete\",\n                    uiIcon: \"ui-icon-squirrel-delete\" \n                }\n            ],\n            preventContextMenuForPopup: true,\n            preventSelect: true,\n            taphold: true,\n            beforeOpen: before_open,\n            select: handle_menu_choice\n        };\n\n        $(\"body\").contextmenu(menu);\n    };\n\n})(jQuery, Squirrel);\n"]}