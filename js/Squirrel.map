{"version":3,"sources":["js/Squirrel.js"],"names":["Squirrel","PATHSEP","String","fromCharCode","NEW_SETTINGS","IS_LOADED","IS_PENDING_SAVE","IS_CORRUPT","IS_EMPTY","USE_STEGANOGRAPHY","Dialog","Tree","clipboard","data","undefined","contentType","$","S","init_zeroClipboard","ZeroClipboardUseable","ZeroClipboard","isFlashUnusable","DEBUG","console","debug","config","on","e","create_clipboard","$node","find","text","p","ST","get_path","n","client","hoard","get_node","JSON","stringify","name","i","ZeroClipboards","length","destroy","log","$dummy","append","before_menu_open","ui","target","is","closest","has_alarm","is_leaf","hasClass","is_root","is_open","$root","contextmenu","$zc_node","handle_menu_choice","cmd","parse","SD","insert","edit","add","randomise","alarm","delete_node","pick","isTouchCapable","window","addEventListener","scrollTo","init_ui","hide","getTapEvent","save_hoards","undo","mess","squeak","title","message","extras","TX","tx","search","this","val","each","$this","$help","$close","addClass","button","icons","primary","show","insertBefore","prependTo","opts","classes","ui-button-icon","tree","init_menus","document","init_application","check_alarms","update_save","resetStyling","Utils","sometime_is_now","$body","$el","bgcol","css","style","attr","font","color","background-color","remove","want_bright","RGBA","luma","bright","styleSheets","sheet","rules","cssRules","j","rule","test","selectorText","a","s","inverse","toString","backgroundColor","store","status","cloud","init_cloud_store","path","expired","next","ring_alarm","severity","join","toLocaleDateString","after_close","add_child_node","value","sval","push","res","record_action","type","action","$newnode","insert_data","open","sometime","get_updates_from_cloud","cloard","chain","merge_from_cloud","conflicts","warning","c","conflict","squeak_more","Hoard","stringify_action","unsaved_changes","max_changes","replace","l","slice","unshift","options","identifier","actions_from_hierarchy","act","concat","sact","client_ok","cloud_ok","finished","autosave","close_dialog","write_client_store","writes","user","removeClass","save_client","PENDING_SAVE","soon","write_cloud_store","store_path","actions","last_sync","Date","now","update_cloud_store","construct_new_cloud","reconstruct_actions","time","cloud_store_read_ok","cloud_store_read_failed","AbstractStore","NODATA","reads","toggle","can_undo","us","$sb","hoards_loaded","authenticated","load_cloud_hoard","error","init_client_hoard","needs_path","store_settings","load_client_hoard","rebuild_hoard","as","pop","identify_user","uReq","pReq","pass","login","on_signin","user_required","pass_required","init_client_store","EncryptedStore","understore","params","LocalStorageStore","ok","fail","pp","ppp","SQUIRREL_STORE","StegaStore","re","RegExp","hits","match","close","v","parents","$item","handler","zc","event","clipboardData","setData","ready","qs","query_string","unco","location","href","ajaxSetup","cache","steg","store_bits","load","init","menu","delegate","uiIcon","preventContextMenuForPopup","preventSelect","taphold","beforeOpen","select","jQuery"],"mappings":"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","file":"js/Squirrel.min.js","sourcesContent":["/*@preserve Copyright (C) 2015 Crawford Currie http://c-dot.co.uk license MIT*/\n\n/* eslint-env jquery */\n/* global DEBUG:true */\n/* global TX */\n/* global Utils */\n/* global AbstractStore */\n/* global EncryptedStore */\n/* global LocalStorageStore */\n/* global StegaStore */\n/* global Hoard */\n/* global RGBA */\n/* global ZeroClipboard */\n/* global SQUIRREL_STORE */\n\n/*\n * The Squirrel Application namespace and UI.\n */\n\nvar Squirrel = {\n    PATHSEP: String.fromCharCode(1), // separator used in Path->node mapping\n\n    // Store statii\n    // TX.tx(\"has new settings\")\n    NEW_SETTINGS: \"has new settings\",\n    // TX.tx(\"is loaded\")\n    IS_LOADED: \"is loaded\",\n    // TX.tx(\"needs to be saved\")\n    IS_PENDING_SAVE: \"needs to be saved\",\n    // TX.tx(\"is corrupt\")\n    IS_CORRUPT: \"is corrupt\",\n    // TX.tx(\"is empty\")\n    IS_EMPTY: \"is empty\",\n\n    USE_STEGANOGRAPHY: false,\n    Dialog: {},\n    Tree: {},\n    clipboard: { data: undefined, contentType: \"text/plain\" }\n};\n\n(function($, S) {\n    \"use strict\";\n    var SD = S.Dialog;\n    var ST = S.Tree;\n\n    if ($.isTouchCapable()) {\n        // Go full screen\n        window.addEventListener(\"load\", function() {\n            window. scrollTo(0, 0);\n        });\n    }\n\n    S.init_ui = function() {\n        $(\"#authenticated_save\")\n            .hide()\n            .on($.getTapEvent(), function(/*evt*/) {\n                S.save_hoards();\n                return false;\n            });\n\n        $(\"#authenticated_undo\")\n            .hide()\n            .on($.getTapEvent(), function(/*evt*/) {\n                ST.undo(function(mess) {\n                    SD.squeak({\n                        title: \"Undo\",\n                        message: mess\n                    });\n                });\n                return false;\n            });\n\n        $(\"#authenticated_extras\")\n            .on($.getTapEvent(), function(/*evt*/) {\n                SD.extras();\n            });\n\n        $(\"#search\")\n            .on(\"change\", function(/*evt*/) {\n                $(\"#search_hits\").text(TX.tx(\"Searching...\"));\n                S.search($(this).val());\n            });\n\n        $(\"#search_button\")\n            .on($.getTapEvent(), function(/*evt*/) {\n                $(\"#search_hits\").text(TX.tx(\"Searching...\"));\n                S.search($(\"#search\").val());\n            });\n\n        $(\"#authenticated_search\")\n            .on($.getTapEvent(), function(/*evt*/) {\n                SD.search();\n            });\n        \n        $(\".help\").each(function() {\n            var $this = $(this);\n            $this.hide();\n            var $help = $(\"<button></button>\");\n            var $close = $(\"<button></button>\");\n            $help\n                .addClass(\"info-button\")\n                .button({\n                    icons: {\n                        primary: \"ui-icon-info\"\n                    },\n                    text: false\n                })\n                .on($.getTapEvent(), function() {\n                    $this.show();\n                    $help.hide();\n                })\n                .insertBefore(this);\n            $close\n                .addClass(\"help-close\")\n                .button({\n                    icons: {\n                        primary: \"ui-icon-circle-close\"\n                    },\n                    text: false\n                })\n                .on($.getTapEvent(), function() {\n                    $this.hide();\n                    $help.show();\n                })\n                .prependTo($this);\n        });\n\n        $(\"button\").each(function() {\n            var $this = $(this);\n            var opts;\n\n            if (typeof $this.data(\"icon\") !== \"undefined\") {\n                opts = {\n                    icons: {\n                        primary: $this.data(\"icon\")\n                    },\n                    classes: {\n                        \"ui-button-icon\": \"squirrel-icon\"\n                    },\n                    text: false\n                };\n            }\n            $this.button(opts);\n        });\n\n        $(\"#sites-node\").tree({\n            is_root: true\n        });\n        init_menus();\n\n        // Set up event handlers for sometime scheduler\n        $(document)\n            .on(\"init_application\", S.init_application)\n            .on(\"check_alarms\", S.check_alarms)\n            .on(\"update_save\", S.update_save)\n            .on(\"reset_styling\", S.resetStyling);\n        S.resetStyling();\n        \n        Utils.sometime_is_now();\n    };\n\n    S.resetStyling = function() {\n        // Copy subset of ui-widget styling into base\n        var $body = $(\"body\");\n        var $el = $(\"<div></div>\")\n            .addClass(\"ui-widget\")\n            .addClass(\"ui-widget-content\")\n            .addClass(\"dlg-hidden\");\n        $body.append($el);\n        var bgcol = $el.css(\"background-color\");\n        var style = \"body {\";\n        for (var attr in {\n            \"font\" : 0,\n            \"color\": 0,\n            \"background-color\": 0\n        }) {\n            var av = $el.css(attr);\n            style += attr + \": \" + av + \";\";\n        }\n        style += \"}\";\n        $el.remove();\n\n        // Do we need bright highlights in user classes?\n        var want_bright = (bgcol && bgcol != \"transparent\" &&\n                           new RGBA(bgcol).luma() < 0.65);\n\n        if (S.bright && !want_bright || !S.bright && want_bright) {\n            // Invert colours. Takes account of the fact that only\n            // local stylesheets can be found this way. Stylesheets\n            // loading from other domains (i.e. CDNs) are not local.\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (!sheet)\n                    continue;\n                var rules = sheet.rules || sheet.cssRules;\n                if (!rules)\n                    continue;               \n                for (var j = 0; j < rules.length; j++) {\n                    var rule = rules[j];\n                    if (/\\.[-:a-z0-9]*$/i.test(rule.selectorText)) {\n                        // Class definition\n                        var s = \"\", a;\n                        if (rule.style.color) {\n                            try {\n                                a = new RGBA(rule.style.color);\n                                s += \"color: \" +\n                                    a.inverse().toString() + \";\"\n                            } catch (e) {\n                                console.log(e);\n                            }\n                        }\n                        if (rule.style.backgroundColor) {\n                            try {\n                                a = new RGBA(\n                                    rule.style.backgroundColor);\n                                s += \"background-color: \" +\n                                    a.inverse().toString() + \";\"\n                            } catch (e) {\n                                console.log(e);\n                            }\n                        }\n                        if (s.length > 0)\n                            style += rule.selectorText + \"{\" + s + \"}\";\n                    }\n                }\n            }\n            S.bright = want_bright;\n        }\n\n        $(\"#computed-styles\").remove();\n        style = \"<style id='computed-styles'>\" + style + \"</style>\";\n        $body.append(style);\n    };\n    \n    /**\n     * Initialise application data (new Squirrel(), effectively)\n     */\n    S.init_application = function() {\n        // status may be one of IS_EMPTY, IS_CORRUPT, IS_LOADED or\n        // NEW_SETTINGS. If the status is anything but IS_LOADED\n        // then it is a candidate for saving.\n        S.client = {\n            store: null,                 // The store used actively\n            hoard: null,                 // The hoard in that store\n            status: S.IS_EMPTY\n        };\n\n        S.cloud = {\n            store: null,                 // Temporary memory used during load\n            status: S.IS_EMPTY\n        };\n\n        // Kick off by initialising the cloud store.\n        S.init_cloud_store();\n    };\n\n    // Event handler for check_alarms\n    S.check_alarms = function(/* event */) {\n        S.client.hoard.check_alarms(\n            function(path, expired, next) {\n                var $node = ST.get_node(path);\n                ST.ring_alarm($node);\n                SD.squeak(\n                    {\n                        severity: \"warning\",\n                        message:\n                        \"<div class='ui-icon ui-icon-squirrel-rang'></div>\"\n                            + TX.tx(\"Reminder on '$1' was due on $2\",\n                                    path.join(\"/\"),\n                                    expired.toLocaleDateString()),\n                        after_close: next\n                    });\n            });\n    };\n\n    /**\n     * A (manual) new tree node action\n     */\n    S.add_child_node = function($node, title, value) {\n        var p = ST.get_path($node), sval;\n        if (typeof value === \"string\")\n            sval = value;\n        p.push(title);\n\n        var res = S.client.hoard.record_action(\n            {\n                type: \"N\",\n                path: p,\n                data: sval\n            },\n            function(e) {\n                ST.action(\n                    e, true,\n                    function($newnode) {\n                        if (DEBUG && !$newnode) debugger;\n                        if (typeof value !== \"string\"\n                            && typeof value !== \"undefined\") {\n                            S.insert_data(ST.get_path($newnode), value);\n                        }\n                        ST.open($newnode);\n                        Utils.sometime(\"update_save\");\n                    });\n            });\n        if (res !== null)\n            SD.squeak(res.message);\n    };\n\n    S.get_updates_from_cloud = function(cloard, chain) {\n        // This will get triggered whenever both hoards are\n        // successfully loaded.\n        if (DEBUG) console.debug(\"Merging from cloud hoard\");\n        S.client.hoard.merge_from_cloud(\n            cloard,\n            ST.action,\n            function(conflicts) {\n                if (conflicts.length > 0) {\n                    SD.squeak({\n                        title: TX.warning(),\n                        severity: \"warning\",\n                        message: \n                        TX.tx(\"Conflicts were detected while merging actions from the Cloud. Please review these rejected actions before saving.\")\n                    });\n                    $.each(conflicts, function(i, c) {\n                        var e = c.conflict;\n                        SD.squeak_more({\n                            severity: \"warning\",\n                            message: Hoard.stringify_action(e)\n                                + \": \" + c.message });\n                    });\n                }\n                S.cloud.status = S.IS_LOADED;\n                // Finished with the cloud hoard (for now)\n                chain();\n            });\n    };\n\n    // Determine if there are unsaved changes, and generate a warning\n    // message for the caller to use.\n    S.unsaved_changes = function(max_changes) {\n        var message = [];\n\n        $(\".tree-node .tree-modified\").each(function() {\n            if (DEBUG && !$(this).data(\"path\")\n                && !$(this).hasClass(\"tree-root\"))\n                debugger; // Missing data-path\n            var path = $(this).data(\"path\") || \"node\";\n            message.push(TX.tx(\"$1 has changed\",\n                               path.replace(S.PATHSEP, \"/\")));\n        });\n\n        if (message.length > max_changes) {\n            var l = message.length;\n            message = message.slice(0, max_changes);\n            message.push(TX.tx(\"... and $1 more change$?($1!=1,s,)\", l - 5));\n        }\n\n        if (S.cloud.status !== S.IS_LOADED) {\n            message.unshift(TX.tx(\"The $1 hoard $2\",\n                                  S.cloud.store\n                                  ? S.cloud.store.options().identifier\n                                  : TX.tx(\"Cloud\"),\n                                  TX.tx(S.cloud.status)));\n        }\n        if (S.client.status !== S.IS_LOADED) {\n            message.unshift(TX.tx(\"The $1 hoard $2\",\n                                  S.client.store.options().identifier,\n                                  TX.tx(S.client.status)));\n        }\n\n        if (message.length === 0)\n            return null;\n\n        return message.join(\"\\n\");\n    };\n\n    /**\n     * Insert data from a structure under the given path\n     * @param path path to the parent below which this data will be inserted\n     * @param data hoard cache format data\n     */\n    S.insert_data = function(path, data) {\n        SD.squeak({ title: \"Loading\" });\n\n        S.client.hoard.actions_from_hierarchy(\n            { data: data },\n            function(act, next) { // listener\n                //if (DEBUG) console.debug(Hoard.stringify_action(act));\n                act.path = path.slice().concat(act.path);\n                var res = S.client.hoard.record_action(\n                    act, function (sact) {\n                        ST.action(sact, false, next);\n                    });\n                if (res !== null)\n                    SD.squeak_more(res.message);\n                if (next)\n                    next();\n            },\n            function() { // chain on complete\n                Utils.sometime(\"update_save\");\n                SD.squeak_more(TX.tx(\"JSON has been loaded\"));\n            });\n    };\n\n    S.save_hoards = function() {\n        SD.squeak({\n            title: TX.tx(\"Saving\")\n        });\n\n        var client_ok = true;\n        var cloud_ok = true;\n\n        var finished = function() {\n            if (DEBUG) console.debug(\"...save finished\");\n            Utils.sometime(\"update_save\");\n            if (client_ok && cloud_ok) {\n                if (S.client.hoard.options.autosave)\n                    SD.close_dialog($(\"#squeak\"));\n                else\n                    // Otherwise leave it open\n                    SD.squeak_more(TX.tx(\"Save complete\"));\n\n            } else {\n                // Otherwise leave it open, disable auto-save\n                SD.squeak_more({\n                    severity: \"error\",\n                    message: TX.tx(\"Save encountered errors\")});\n                S.client.hoard.options.autosave = false;\n            }\n        },\n\n        write_client_store = function() {\n            S.client.store.writes(\n                \"S.\" + S.client.store.user(),\n                JSON.stringify(S.client.hoard),\n                function() {\n                    if (DEBUG) console.debug(\"...client save OK\");\n                    $(\".tree-modified\").removeClass(\"tree-modified\");\n                    S.client.status = S.IS_LOADED;\n                    SD.squeak_more(\n                        TX.tx(\"Saved in $1\", this.options().identifier));\n                    finished();\n                },\n                function(e) {\n                    if (DEBUG) console.debug(\"...client save failed \" + e);\n                    SD.squeak_more({\n                        severity: \"error\",\n                        message: TX.tx(\"Failed to save in $1: $2\",\n                                       this.options().identifier, e)\n                    });\n                    client_ok = false;\n                    finished();\n                });\n        },\n\n        save_client = function() {\n            if (DEBUG) console.debug(\"...save to client\");\n\n            if (S.client.status === S.IS_LOADED\n                && $(\".tree-modified\").length === 0) {\n                finished();\n                return;\n            }\n\n            S.client.status = S.PENDING_SAVE;\n\n            SD.squeak_more({\n                severity: \"while\",\n                message: TX.tx(\"Saving in $1\",\n                               S.client.store.options().identifier)});\n\n            Utils.soon(write_client_store);\n        },\n\n        write_cloud_store = function(cloard) {\n            S.cloud.store.writes(\n                S.client.hoard.options.store_path,\n                JSON.stringify(cloard),\n                function() {\n                    if (DEBUG) console.debug(\"...cloud save OK\");\n                    S.client.hoard.actions = [];\n                    S.client.hoard.last_sync = Date.now();\n                    SD.squeak_more(\n                        TX.tx(\"Saved in $1\", this.options().identifier));\n                    S.cloud.status = S.IS_LOADED;\n                    save_client();\n                },\n                function(e) {\n                    if (DEBUG) console.debug(\"...cloud save failed \" + e);\n                    SD.squeak_more({\n                        severity: \"error\",\n                        message: TX.tx(\"Failed to save in $1: $2\",\n                                       this.options().identifier, e)});\n                    cloud_ok = false;\n                    save_client();\n                });\n        },\n\n        // Save the given hoard into the cloud.\n        update_cloud_store = function(cloard) {\n            cloard.actions = cloard.actions.concat(S.client.hoard.actions);\n            if (S.cloud.store) {\n                if (DEBUG) console.debug(\"...save to cloud\");\n\n                SD.squeak_more({\n                    severity: \"while\",\n                    message: TX.tx(\"Saving in $1\",\n                                   S.cloud.store.options().identifier)});\n\n                S.cloud.status = S.PENDING_SAVE;\n\n                Utils.soon(function() { write_cloud_store(cloard); });\n            } else {\n                if (DEBUG) console.debug(\"...no cloud store\");\n                save_client();\n            }\n        },\n\n        // Construct a new cloud hoard from data in the client. This will\n        // happen if the cloud is read and found to be empty or corrupt,\n        // but not if the read failed.\n        construct_new_cloud = function() {\n            if (DEBUG) console.debug(\"...construct cloud \");\n            var cloard = new Hoard();\n            S.client.hoard.reconstruct_actions(\n                function(a, next) {\n                    cloard.actions.push({\n                        type: a.type,\n                        time: a.time,\n                        data: a.data,\n                        path: a.path.slice()\n                    });\n                    if (next)\n                        next();\n                },\n                function() {\n                    update_cloud_store(cloard);\n                });\n        },\n\n        // Action on the cloud store being read OK\n        cloud_store_read_ok = function(data) {\n            var cloard;\n            if (DEBUG) console.debug(\"...cloud read OK \");\n            try {\n                cloard = new Hoard(JSON.parse(data));\n                S.cloud.status = S.IS_LOADED;\n            } catch (e) {\n                // We'll get here if decryption failed....\n                if (DEBUG) console.debug(\"Cloud hoard JSON parse failed: \" + e);\n                SD.squeak_more({\n                    severity: \"error\",\n                    message: TX.tx(\"$1 hoard can't be read for update\",\n                                   this.options().identifier)});\n                S.cloud.status = S.IS_CORRUPT;\n                cloud_ok = false;\n                construct_new_cloud();\n                return;\n            }\n            \n            if (S.cloud.status === S.IS_LOADED) {\n                if (DEBUG) console.debug(\"...merge cloud \");\n                S.client.hoard.merge_from_cloud(\n                    cloard, ST.action);\n            }\n            \n            if ( S.cloud.status !== S.IS_LOADED\n                 || S.client.hoard.actions.length !== 0) {\n                // Only save if there actually some changes\n                if (DEBUG) console.debug(\"...update from cloud \");\n                update_cloud_store(cloard);\n            } else\n                Utils.soon(save_client);\n        },\n\n        // Action on the cloud store read failing\n        cloud_store_read_failed = function(e) {\n            if (DEBUG) console.debug(\"...cloud read failed \" + e);\n            if (e === AbstractStore.NODATA) {\n                if (DEBUG) console.debug(this.options().identifier + \" contains NODATA\");\n                S.cloud.status = S.IS_EMPTY;\n                construct_new_cloud();\n            } else {\n                SD.squeak_more({\n                    severity: \"error\",\n                    message: TX.tx(\"Failed to refresh from $1: $2\",\n                                   this.options().identifier, e)});\n                cloud_ok = false;\n                Utils.soon(save_client);\n            }\n        };\n\n        if (DEBUG) console.debug(\"Saving; client \" + S.client.status\n                                 + \"; cloud \" + S.cloud.status);\n        if (S.cloud.status === S.NEW_SETTINGS\n            || S.cloud.status === S.IS_EMPTY) {\n            // Don't attempt to resync out before saving, simply\n            // overwrite the cloud.\n            if (DEBUG) console.debug(\"...constructing new cloud because settings\");\n            construct_new_cloud();\n        } else {\n            // Reload and save the cloud hoard\n            if (DEBUG) console.debug(\"...reloading cloud\");\n            S.cloud.store.reads(\n                S.client.hoard.options.store_path,\n                cloud_store_read_ok,\n                cloud_store_read_failed);\n        }\n    };\n\n    S.update_save = function(/*event*/) {\n        $(\"#authenticated_undo\").toggle(ST.can_undo());\n        $(\"#extras_autosave\").val(S.client.hoard.options.autosave ? \"on\" : \"off\");\n        var us = S.unsaved_changes(3);\n        var $sb = $(\"#authenticated_save\");\n\n        if (us !== null) {\n            if (S.client.hoard.options.autosave) {\n                S.save_hoards();\n            } else {\n                $sb.attr(\n                    \"title\",\n                    TX.tx(\"Save is required because: \") + us);\n                $sb.show();\n            }\n        } else {\n            $(\"#authenticated_save\").hide();\n        }\n    };\n\n    // Last in the initial hoard load sequence\n    S.hoards_loaded = function() {\n        // We are ready for interaction\n        S.authenticated();\n\n        $(window).on(\"beforeunload\", function() {\n            var us = S.unsaved_changes(10);\n            if (us !== null) {\n                us = TX.tx(\"You have unsaved changes\")\n                    + \"\\n\" + us\n                    + \"\\n\" + TX.tx(\"Are you really sure?\");\n                return us;\n            }\n        });\n\n        Utils.sometime(\"update_save\");\n        Utils.sometime(\"check_alarms\");\n\n        // Flush the sometimes, and allow new sometimes to be set\n        Utils.sometime_is_now();\n    };\n\n    /**\n     * STEP 6: Called when we have a (possibly empty) client hoard.\n     *  Try and synch it from the cloud.\n     */\n    S.load_cloud_hoard = function() {\n        if (S.cloud.store) {\n            if (DEBUG) console.debug(\n                \"Reading cloud \" + S.cloud.store.options().identifier);\n            S.cloud.store.reads(\n                S.client.hoard.options.store_path,\n                function(data) {\n                    var hoard;\n                    if (DEBUG) console.debug(this.options().identifier + \" is ready\");\n                    try {\n                        hoard = JSON.parse(data);\n                    } catch (e) {\n                        if (DEBUG) console.debug(\"Client hoard JSON parse failed: \" + e);\n                        SD.squeak({\n                            title: TX.error(),\n                            severity: \"error\",\n                            message:\n                            TX.tx(\"$1 hoard exists, but can't be read.\",\n                                  this.options().identifier)\n                                + \" \"\n                                + TX.tx(\"Check that you have the correct password.\")\n                        });\n                        S.cloud.status = S.IS_CORRUPT;\n                        Utils.soon(S.hoards_loaded);\n                        return;\n                    }\n                    //if (DEBUG) console.debug(\"Cloud hoard \" + data);\n                    S.get_updates_from_cloud(\n                        new Hoard(hoard),\n                        S.hoards_loaded);\n                },\n                function(e) {\n                    if (e === AbstractStore.NODATA) {\n                        if (DEBUG) console.debug(\n                            this.options().identifier + \" contains NODATA\");\n                        S.cloud.status = S.IS_EMPTY;\n                    } else {\n                        if (DEBUG) console.debug(\n                            this.options().identifier + \" has NODATA: \" + e);\n                        SD.squeak({\n                            title: TX.error(),\n                            severity: \"error\",\n                            message: TX.tx(\"Could not load cloud hoard.\")\n                        });\n                        SD.squeak_more(\n                            TX.tx(\"Check that you have the correct password.\"));\n                        // Could not contact cloud; continue all the same\n                    }\n                    Utils.soon(S.hoards_loaded);\n                });\n        } else {\n            S.hoards_loaded();\n        }\n    };\n\n    /**\n     * STEP 5: Called when there is no existing client hoard, to initialise\n     * a new one.\n     */\n    S.init_client_hoard = function() {\n        if (DEBUG) console.debug(\"Setting up client hoard\");\n        S.client.hoard = new Hoard();\n        S.client.status = S.IS_EMPTY;\n\n        if (S.cloud.store && S.cloud.store.options().needs_path) {\n            SD.store_settings(S.load_cloud_hoard);\n        } else {\n            S.load_cloud_hoard();\n        }\n    };\n\n    /**\n     * STEP 4: Once the stores have been initialised, we can load\n     * the client hoard. This will give us the baseline cache data and the\n     * location of the cloud hoard, so we can then chain loading and merging\n     * the cloud hoard.\n     */\n    S.load_client_hoard = function() {\n        var rebuild_hoard = function() {\n            if (DEBUG) console.debug(\"Reconstructing UI tree from cache\");\n            S.client.hoard.reconstruct_actions(\n                function(a, next) {\n                    ST.action(a, false, next);\n                },\n                function() { // on complete\n                    // Reset the UI modification list; we just loaded the\n                    // client hoard\n                    $(\".tree-modified\").removeClass(\"tree-modified\");\n                    // Mark all the nodes in the pending actions list as\n                    // modified. If a node isn't found, back up the tree\n                    // until we find a parent that does exist and mark it.\n                    var as = S.client.hoard.actions, i, p, $node;\n                    for (i = 0; i < as.length; i++) {\n                        p = as[i].path.slice();\n                        while (p.length > 0) {\n                            $node = ST.get_node(p);\n                            if ($node) {\n                                $node.addClass(\"tree-modified\");\n                                break;\n                            }\n                            p.pop();\n                        }\n                    }\n                    Utils.soon(S.load_cloud_hoard);\n                });\n        };\n\n        if (DEBUG) console.debug(\"Load client store\");\n\n        S.client.store.reads(\n            \"S.\" + S.client.store.user(),\n            function(data) {\n                try {\n                    S.client.hoard = new Hoard(JSON.parse(data));\n                    S.client.status = S.IS_LOADED;\n                } catch (e) {\n                    if (DEBUG) console.debug(\"Caught \" + e);\n                    SD.squeak({\n                        title: TX.error(),\n                        severity: \"error\",\n                        message:\n                        TX.tx(\"$1 hoard exists, but can't be read.\",\n                              this.options().identifier),\n                        // After close, clear down and try again\n                        after_close: function() {\n                            Utils.sometime(\"init_application\");\n                        }\n                    });\n                    SD.squeak_more(\n                        TX.tx(\"Check that you have the correct password.\"));\n                    return;\n                }\n                // Make sure we have a store path\n                if ((S.client.store\n                     && S.client.store.options().needs_path\n                     || S.cloud.store\n                     && S.cloud.store.options().needs_path)\n                    && !S.client.hoard.options.store_path) {\n                    SD.store_settings(rebuild_hoard);\n                } else {\n                    rebuild_hoard();\n                }\n            },\n            function(e) {\n                if (e === AbstractStore.NODATA) {\n                    if (DEBUG) console.debug(this.options().identifier + \" contains NODATA\");\n                    // Construct a new client hoard\n                    Utils.soon(S.init_client_hoard);\n                } else {\n                    SD.squeak({\n                        title: TX.error(),\n                        severity: \"error\",\n                        message: TX.tx(\"$1 store error: $2\",\n                                       this.options().identifier, e),\n                        after_close: function() {\n                            Utils.sometime(\"init_application\");\n                        }\n                    });\n                }\n            });\n    };\n\n    /**\n     * STEP 3: Login, fill in details the stores didn't provide, prompt\n     * is needed.\n     */\n    S.identify_user = function() {\n        var uReq = true;\n        var pReq = true;\n\n        // Spread user information determined during store initialisation\n        // around.\n        if (S.cloud.store\n            && typeof S.cloud.store.user() !== \"undefined\") {\n            // Force the cloud user onto the client store\n            if (DEBUG) console.debug(\"Cloud user is preferred: \" + S.cloud.store.user());\n            S.client.store.user(S.cloud.store.user());\n            uReq = false;\n        } else if (S.client.store\n                   && typeof S.client.store.user() !== \"undefined\") {\n            // Force the client user onto the cloud store\n            if (DEBUG) console.debug(\"Client user is available: \" + S.client.store.user());\n            if (S.cloud.store)\n                S.cloud.store.user(S.client.store.user());\n            uReq = false;\n        }\n\n        if (S.cloud.store\n            && typeof S.cloud.store.pass() !== \"undefined\") {\n            // Force the cloud pass onto the client store\n            if (DEBUG) console.debug(\"Cloud pass is preferred\");\n            if (S.client.store)\n                S.client.store.pass(S.cloud.store.pass());\n            pReq = false;\n        } else if (S.client.store\n                   && typeof S.client.store.pass() !== \"undefined\") {\n            // Force the client pass onto the cloud store\n            if (DEBUG) console.debug(\"Client pass is available\");\n            if (S.cloud.store)\n                S.cloud.store.pass(S.client.store.pass());\n            pReq = false;\n        }\n\n        // If we still need user or password, prompt\n        if (uReq || pReq) {\n            SD.login({\n                store: S.client.store,\n                on_signin: function(user, pass) {\n                    if (DEBUG) console.debug(\"Login prompt said user was \" + user);\n                    S.client.store.user(user);\n                    S.client.store.pass(pass);\n                    if (S.cloud.store) {\n                        S.cloud.store.user(user);\n                        S.cloud.store.pass(pass);\n                    }\n                    S.load_client_hoard();\n                },\n                user_required: uReq,\n                pass_required: pReq\n            });\n        } else\n            S.load_client_hoard();\n    };\n\n    /**\n     * STEP 2: Once the cloud store is loaded, we can move on to the client store.\n     */\n    S.init_client_store = function() {\n        // new LocalStorageStore({\n        new EncryptedStore({\n            understore: function(params) {\n                return new LocalStorageStore(params);\n            },\n\n            ok: function() {\n                if (DEBUG) console.debug(this.options().identifier\n                                         + \" store is ready\");\n                S.client.store = this;\n                $(\"#authmessage\").text(TX.tx(\"Loading...\"));\n                // Chain the login prompt\n                Utils.soon(S.identify_user);\n            },\n            fail: function(e) {\n                // We did our best!\n                SD.squeak({\n                    title: TX.error(),\n                    severity: \"error\",\n                    message: TX.tx(\"Encryption error: $1\", e)\n                });\n            }\n        });\n    };\n\n    /**\n     * STEP 1: Establish contact with the cloud, and get user details.\n     */\n    S.init_cloud_store = function() {\n        var p = {\n            ok: function() {\n                S.cloud.store = this;\n                // Chain the client store startup\n                Utils.soon(S.init_client_store);\n            },\n            fail: function(e) {\n                SD.squeak({\n                    title: TX.warning(),\n                    severity: \"warning\",\n                    message: TX.tx(\"Could not open cloud store: $1\", e),\n                    after_close: function() {\n                        S.init_client_store();\n                    }\n                });\n                SD.squeak_more({\n                    severity: \"warning\",\n                    message: TX.tx(\"If you continue, only the client store will be available\")\n                });\n            }\n        };\n\n        p.understore = function(pp) {\n            // SQUIRREL_STORE is a constant set by the low-level\n            // store module selected by dynamic load\n            if (S.USE_STEGANOGRAPHY) {\n                pp.understore = function(ppp) {\n                    return new SQUIRREL_STORE(ppp);\n                };\n                return new StegaStore(pp);\n            } else {            \n                return new SQUIRREL_STORE(pp);\n            }\n        };\n\n        return new EncryptedStore(p);\n    };\n\n    /**\n     * Perform a text search\n     */\n    S.search = function(s) {\n        var re;\n        try {\n            re = new RegExp(s, \"i\");\n        } catch (e) {\n            SD.squeak(\n                {\n                    message: TX.tx(\"Error in search expression '$1': \", s)\n                        + e\n                });\n        }\n        var hits = [];\n        $(\".tree-key,.tree-value\").each(function() {\n            if ($(this).text().match(re)) {\n                hits.push(this);\n            }\n        });\n\n        $(\"#search_hits\").text(TX.tx(\"$1 found\", hits.length));\n        if (hits.length === 0) {\n            SD.squeak(\n                {\n                    message: TX.tx(\"'$1' not found\", s)\n                });\n        } else {\n            $(\".tree-open\").each(function() {\n                ST.close($(this));\n            });\n            $.each(hits, function(n, v) {\n                $(v).parents(\".tree-collection\").each(function() {\n                    ST.open($(this));\n                });\n            });\n        }\n    };\n\n    function init_zeroClipboard() {\n        \n        if (typeof S.ZeroClipboardUseable === \"undefined\") {\n            if (typeof ZeroClipboard === \"undefined\" ||\n                ZeroClipboard.isFlashUnusable()) {\n                if (DEBUG) console.debug(\"ZeroClipboard is unusable\");\n                S.ZeroClipboardUseable = false;\n                return;\n            }\n\n            console.debug(\"Initialising ZeroClipboard\");\n            ZeroClipboard.config({\n                debug: DEBUG\n            });\n        \n            ZeroClipboard.on(\"ready\", function(e) {\n                S.create_clipboard(\n                    $(\"li[data-command='copy_value']\"),\n                    function($node) {\n                        if (DEBUG) console.debug(\"clip val from: \" +  $node.data(\"key\"));\n                        S.clipboard.data = $node.find(\".tree-value:first\").text();\n                        S.clipboard.contentType = \"text/plain\";\n                    });\n                S.create_clipboard(\n                    $(\"li[data-command='make_copy']\"),\n                    function($node) {\n                        if (DEBUG) console.debug(\"clip json from: \" +  $node.data(\"key\"));\n                        var p = ST.get_path($node);\n                        var n = S.client.hoard.get_node(p);\n                        S.clipboard.data = JSON.stringify(n);\n                        S.clipboard.contentType = \"text/json\";\n                    });\n                S.ZeroClipboardUseable = true;\n            });\n            \n            ZeroClipboard.on(\"error\", function(e) {\n                if (e.name == \"flash-deactivated\") {\n                    for (var i = 0; i < S.ZeroClipboards.length; i++)\n                        S.ZeroClipboards[i].destroy();\n                    S.ZeroClipboardUseable = false;\n                } else\n                    console.log(\"ZeroClipboard warning: \" + e.name)\n            });\n            \n            var $dummy = $(\"<div></div>\");\n            $(\"body\").append($dummy);\n            new ZeroClipboard($dummy);\n        }\n\n        S.ZeroClipboards = [];\n\n        return S.ZeroClipboardUseable;\n    };\n    \n    // Initialise the context menu zero clipboards when the menu is first shown\n    S.create_clipboard = function($item, handler) {\n        // S.$zc_node points to the node most recently under\n        // the context menu.\n\n        // attach zero clipboard handler to copy_value\n        // item in the global context menu\n        var zc = new ZeroClipboard($item);\n        \n        // Handle the \"copy\" event that comes from\n        // the Flash movie and populate the event with our data\n        zc.on(\"copy\", function(event) {\n            handler(S.$zc_node);\n            // ZC only works sensibly with text/plain\n            event.clipboardData.setData(\"text/plain\", S.clipboard.data);\n        });\n\n        S.ZeroClipboards.push(zc); // remember in case we need to destroy\n    };\n    \n    $(document)\n        .ready(function() {\n            // By default, jQuery timestamps datatype 'script' and 'jsonp'\n            // requests to avoid them being cached by the browser.\n            // Disable this functionality by default so that as much as\n            // possible is cached locally\n\n            var qs = Utils.query_string();\n\n            // Use uncompressed if the current document is uncompressed\n            var unco = !/\\.min\\.html/.test(document.location.href);\n\n            if (qs.debug)\n                DEBUG = true;\n\n            if (!DEBUG) $.ajaxSetup({ cache: true });\n\n            var store = qs.store || \"TestStore\";\n            if (typeof qs.steg !== \"undefined\")\n                S.USE_STEGANOGRAPHY = true;\n\n            var store_bits = [ \"js/\" + store + \".min.js\" ];\n            if (S.USE_STEGANOGRAPHY) {\n                store_bits.push(\"js/Steganographer.min.js\");\n                store_bits.push(\"js/StegaStore.min.js\");\n            } else\n                $(\".using_steganography\").remove();\n            Utils.load(store_bits, unco, function () {\n                // Initialise translation module,\n                // and chain the application init\n                TX.init(function() {\n                    // Initialise UI components\n                    S.init_ui();\n                    S.init_application();\n                });\n            });\n            //$(this).tooltip();\n\n/*\n            if ($.isTouchCapable()) {\n                // mobile device; though shouldn't we determine the size?\n                // window.screen.width, window.screen.height\n                console.log(\"Device is \" + window.screen.width + \" X \" +\n                            window.screen.height);\n            }\n*/\n        });\n\n        S.authenticated = function() {\n            $(\"#whoami\").text(S.client.store.user());\n            $(\"#unauthenticated\").hide();\n            $(\"#authenticated\").show();\n        };\n\n    function before_menu_open(e, ui) {\n        var $node = (ui.target.is(\".tree-node\"))\n            ? ui.target\n            : ui.target.closest(\".tree-node\");\n\n        var has_alarm = typeof $node.data(\"alarm\") !== \"undefined\";\n        var is_leaf = $node.hasClass(\"tree-leaf\");\n        var is_root = ui.target.closest(\".tree-node\").is(\"#sites-node\");\n        var is_open = $node.hasClass(\"tree-open\");\n        var $root = $(\"body\");\n        \n        if (DEBUG) console.debug(\"contextmenu on \" + $node.data(\"key\") + \" \" + is_leaf);\n        $root\n            .contextmenu(\"showEntry\", \"add_alarm\", !has_alarm && !is_root)\n            .contextmenu(\"showEntry\", \"add_subtree\", is_open && !is_leaf)\n            .contextmenu(\"showEntry\", \"add_value\", is_open && !is_leaf && !is_root)\n            .contextmenu(\"showEntry\", \"copy_value\", is_leaf)\n            .contextmenu(\"showEntry\", \"delete\", !is_root)\n            .contextmenu(\"showEntry\", \"edit\", is_leaf)\n           .contextmenu(\"showEntry\", \"insert_copy\", !is_leaf &&\n                         (typeof S.clipboard.data !== \"undefined\"))\n            .contextmenu(\"showEntry\", \"make_copy\", !is_root)\n            .contextmenu(\"showEntry\", \"pick_from\", is_leaf)\n            .contextmenu(\"showEntry\", \"randomise\", is_leaf)\n            .contextmenu(\"showEntry\", \"rename\", !is_root);\n\n        S.$zc_node = $node;\n    };\n\n    /**\n     * Handler for context menu items\n     */\n    function handle_menu_choice(e, ui) {\n        var $node = ui.target.closest(\".tree-node\");\n\n        if (!$node)\n            throw \"No node for contextmenu\";\n\n        switch (ui.cmd) {\n        case \"copy_value\":\n            if (!S.ZeroClipboardUseable) {\n                S.clipboard.data = $node.find(\".tree-value:first\").text();\n                S.clipboard.contentType = \"text/plain\";\n            }\n            // else handled by the ZeroClipboard event handler\n            break;\n\n        case \"make_copy\":\n            if (!S.ZeroClipboardUseable) {\n                var p = ST.get_path($node);\n                var n = S.client.hoard.get_node(p);\n                S.clipboard.data = JSON.stringify(n);\n                S.clipboard.contentType = \"text/json\";\n            }\n            // else handled by the ZeroClipboard event handler\n            break;\n\n        case \"insert_copy\":\n            if (S.clipboard.data && S.clipboard.contentType === \"text/json\") {\n                try {\n                    var data = JSON.parse(S.clipboard.data);\n                    SD.insert($node, data);\n                } catch (e) {\n                    if (DEBUG) debugger;\n                }\n            }\n            break;\n\n        case \"rename\":\n            if (DEBUG) console.debug(\"Renaming\");\n            ST.edit($node, \".tree-key\");\n            break;\n\n        case \"edit\":\n            if (DEBUG) console.debug(\"Editing\");\n            ST.edit($node, \".tree-value\");\n            break;\n\n        case \"add_value\":\n            SD.add($node, true);\n            break;\n\n        case \"add_subtree\":\n            SD.add($node, false);\n            break;\n\n        case \"randomise\":\n            if (DEBUG) console.debug(\"Randomising\");\n            S.Dialog.randomise($node);\n            break;\n\n        case \"add_alarm\":\n            if (DEBUG) console.debug(\"Adding reminder\");\n            S.Dialog.alarm($node);\n            break;\n\n        case \"delete\":\n            if (DEBUG) console.debug(\"Deleting\");\n            S.Dialog.delete_node($node);\n            break;\n\n        case \"pick_from\":\n            if (DEBUG) console.debug(\"Picking\");\n            S.Dialog.pick($node);\n            break;\n\n        default:\n            if (DEBUG) debugger;\n        }\n    };\n\n    var init_menus = function() {\n        var menu = {\n            delegate: \".tree-info,.tree-open-close\",\n            menu: [\n                {\n                    title: TX.tx(\"Copy value\"),\n                    cmd: \"copy_value\",\n                    uiIcon: \"ui-icon-squirrel-copy squirrel-icon\"\n                },\n                {\n                    title: TX.tx(\"Pick characters\"),\n                    cmd: \"pick_from\",\n                    uiIcon: \"ui-icon-squirrel-pick squirrel-icon\"\n                },\n                {\n                    title: TX.tx(\"Rename\"),\n                    cmd: \"rename\",\n                    uiIcon: \"ui-icon-squirrel-edit squirrel-icon\"\n                },\n                {\n                    title: TX.tx(\"Edit value\"),\n                    cmd: \"edit\",\n                    uiIcon: \"ui-icon-squirrel-edit squirrel-icon\"\n                },\n                {\n                    title: TX.tx(\"Add reminder\"),\n                    cmd: \"add_alarm\",\n                    uiIcon: \"ui-icon-squirrel-alarm squirrel-icon\" \n                },\n                {\n                    title: TX.tx(\"Generate new random value\"),\n                    cmd: \"randomise\",\n                    uiIcon: \"ui-icon-squirrel-key squirrel-icon\" \n                },               \n                {\n                    title: TX.tx(\"Add new value\"),\n                    cmd: \"add_value\",\n                    uiIcon: \"ui-icon-squirrel-add-value squirrel-icon\" \n                },\n                {\n                    title: TX.tx(\"Add new folder\"),\n                    cmd: \"add_subtree\",\n                    uiIcon: \"ui-icon-squirrel-add-folder squirrel-icon\" \n                },\n                {\n                    title: TX.tx(\"Copy folder\"),\n                    cmd: \"make_copy\",\n                    uiIcon: \"ui-icon-squirrel-copy squirrel-icon\"\n                },\n                {\n                    title: TX.tx(\"Add copy\"),\n                    cmd: \"insert_copy\",\n                    uiIcon: \"ui-icon-squirrel-paste squirrel-icon\"\n                },\n                {\n                    title: TX.tx(\"Delete\"),\n                    cmd: \"delete\",\n                    uiIcon: \"ui-icon-squirrel-delete squirrel-icon\" \n                }\n            ],\n            preventContextMenuForPopup: true,\n            preventSelect: true,\n            taphold: true,\n            beforeOpen: before_menu_open,\n            select: handle_menu_choice\n        };\n\n        $(\"body\").contextmenu(menu);\n        init_zeroClipboard();\n    };\n\n})(jQuery, Squirrel);\n"]}