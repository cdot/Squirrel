{"version":3,"sources":["js/Squirrel.js"],"names":["Squirrel","PATHSEP","String","fromCharCode","NEW_SETTINGS","IS_LOADED","IS_PENDING_SAVE","IS_CORRUPT","IS_EMPTY","USE_STEGANOGRAPHY","Dialog","Tree","clipboard","undefined","$","S","reset_styling","$body","$el","addClass","hide","append","bgcol","css","style","attr","font","color","background-color","remove","want_bright","RGBA","luma","bright","i","document","styleSheets","length","sheet","rules","cssRules","j","rule","test","selectorText","a","s","inverse","toString","e","console","log","backgroundColor","DEBUG","check_alarms","client","hoard","path","expired","next","ST","getNodeFromPath","tree","squirrelDialog","severity","message","TX","tx","join","toLocaleDateString","after_close","get_updates_from_cloud","cloard","chain","debug","merge_from_cloud","action","conflicts","title","warning","each","c","conflict","Hoard","stringify_action","cloud","status","unsaved_changes","max_changes","this","data","hasClass","push","replace","l","slice","unshift","store","options","identifier","save_hoards","finished","Utils","sometime","client_ok","cloud_ok","autosave","dialog","write_client_store","writes","user","JSON","stringify","removeClass","save_client","PENDING_SAVE","soon","write_cloud_store","store_path","actions","last_sync","Date","now","update_cloud_store","concat","construct_new_cloud","reconstruct_actions","type","time","cloud_store_read_ok","parse","cloud_store_read_failed","AbstractStore","NODATA","reads","update_save","toggle","can_undo","val","us","$sb","show","step_8_authenticated","text","sometime_is_now","step_7_hoards_loaded","window","on","step_6_load_cloud_hoard","error","step_5_init_client_hoard","needs_path","step_4_load_client_hoard","rebuild_hoard","p","$node","as","pop","step_3_identify_user","uReq","pReq","pass","on_signin","user_required","pass_required","step_2_init_client_store","EncryptedStore","understore","params","LocalStorageStore","ok","fail","step_1_init_cloud_store","pp","ppp","SQUIRREL_STORE","StegaStore","before_menu_open","ui","target","is","closest","has_alarm","is_leaf","is_root","is_open","$root","contextmenu","$menuTarget","handle_menu_choice","cmd","find","n","get_node","is_value","init_menus","menu","delegate","uiIcon","preventContextMenuForPopup","preventSelect","taphold","beforeOpen","select","valueCopyClipboard","Clipboard","treeCopyClipboard","init_application","init_ui","getTapEvent","undo","mess","search","$this","$help","$close","button","icons","primary","insertBefore","prependTo","opts","classes","ui-button-icon","setTheme","theme","filter","href","indexOf","replaceWith","Cookies","set","add_child_node","value","res","record_action","$newnode","insert_data","re","RegExp","hits","match","v","parents","actions_from_hierarchy","act","sact","qs","query_string","unco","location","ajaxSetup","cache","screen","width","height","get","steg","store_bits","load","init","autoOpen","jQuery"],"mappings":"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","file":"js/Squirrel.min.js","sourcesContent":["/*@preserve Copyright (C) 2015-2017 Crawford Currie http://c-dot.co.uk license MIT*/\n\n/* eslint-env jquery */\n/* global DEBUG:true */\n/* global TX */\n/* global Utils */\n/* global Cookies */\n/* global Clipboard */\n/* global AbstractStore */\n/* global EncryptedStore */\n/* global LocalStorageStore */\n/* global StegaStore */\n/* global Hoard */\n/* global RGBA */\n/* global SQUIRREL_STORE */\n\n/*\n * The Squirrel Application namespace and UI.\n */\n\nvar Squirrel = {\n    PATHSEP: String.fromCharCode(1), // separator used in Path->node mapping\n\n    // Store statii\n    // TX.tx(\"has new settings\")\n    NEW_SETTINGS: \"has new settings\",\n    // TX.tx(\"is loaded\")\n    IS_LOADED: \"is loaded\",\n    // TX.tx(\"needs to be saved\")\n    IS_PENDING_SAVE: \"needs to be saved\",\n    // TX.tx(\"is corrupt\")\n    IS_CORRUPT: \"is corrupt\",\n    // TX.tx(\"is empty\")\n    IS_EMPTY: \"is empty\",\n\n    USE_STEGANOGRAPHY: false,\n    Dialog: {},\n    Tree: {},\n    // Internal clipboard\n    clipboard: undefined\n};\n\n(function($, S) {\n    \"use strict\";\n    var ST = S.Tree;\n\n    // Functions that are private to this module are declared as\n    // function name(). Exported functions are declared as\n    // S.name = function()\n    \n    function reset_styling() {\n        // Copy subset of ui-widget styling into base by instantiating\n        // a widget element then creating a new <style> with the required\n        // attributes applied to body{}\n        var $body = $(\"body\");\n        var $el = $(\"<div></div>\")\n            .addClass(\"ui-widget\")\n            .addClass(\"ui-widget-content\")\n            .hide();\n        $body.append($el);\n        var bgcol = $el.css(\"background-color\");\n        var style = \"body {\";\n        for (var attr in {\n            \"font\" : 0,\n            \"color\": 0,\n            \"background-color\": 0\n        }) {\n            var av = $el.css(attr);\n            style += attr + \": \" + av + \";\\n\";\n        }\n        style += \"}\";\n        $el.remove();\n\n        // Do we need bright highlights in user classes?\n        var want_bright = (bgcol && bgcol != \"transparent\" &&\n                           new RGBA(bgcol).luma() < 0.65);\n\n        if (S.bright && !want_bright || !S.bright && want_bright) {\n            // Invert colours. Takes account of the fact that only\n            // local stylesheets can be found this way. Stylesheets\n            // loading from other domains (i.e. CDNs) are not local.\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (!sheet)\n                    continue;\n                var rules = sheet.rules || sheet.cssRules;\n                if (!rules)\n                    continue;               \n                for (var j = 0; j < rules.length; j++) {\n                    var rule = rules[j];\n                    if (/\\.[-:a-z0-9]*$/i.test(rule.selectorText)) {\n                        // Class definition\n                        var s = \"\", a;\n                        if (rule.style.color) {\n                            try {\n                                a = new RGBA(rule.style.color);\n                                s += \"color: \" +\n                                    a.inverse().toString() + \";\\n\"\n                            } catch (e) {\n                                console.log(e);\n                            }\n                        }\n                        if (rule.style.backgroundColor) {\n                            try {\n                                a = new RGBA(\n                                    rule.style.backgroundColor);\n                                s += \"background-color: \" +\n                                    a.inverse().toString() + \";\\n\"\n                            } catch (e) {\n                                console.log(e);\n                            }\n                        }\n                        if (s.length > 0)\n                            style += rule.selectorText + \"{\" + s + \"}\\n\";\n                    }\n                }\n            }\n            S.bright = want_bright;\n        }\n\n        $(\"#computed-styles\").remove();\n        style = \"<style id='computed-styles'>\" + style + \"</style>\";\n        $body.append(style);\n        if (DEBUG) console.log(style);\n    }\n\n    S.setTheme = function(theme) {\n        $(\"link\").filter(function() {\n            return this.href && this.href.indexOf('/themes/') > 0;\n        }).each(function() {\n            this.href = this.href.replace(\n                    /\\/themes\\/[^\\/]+/, \"/themes/\" + theme);\n            $(this).replaceWith($(this));\n            Utils.sometime(\"reset_styling\");\n        });\n        if (theme === \"base\") {\n            Cookies.remove('ui_theme');\n        } else {\n            Cookies.set('ui_theme', theme);\n        }\n    };\n\n    // Event handler for check_alarms\n    function check_alarms(/* event */) {\n        S.client.hoard.check_alarms(\n            function(path, expired, next) {\n                var $node = ST.getNodeFromPath(path);\n                $node.tree(\"ringAlarm\");\n                $(\"#squeak\").squirrelDialog(\"open\",\n                    {\n                        severity: \"warning\",\n                        message:\n                        \"<div class='ui-icon ui-icon-squirrel-rang'></div>\"\n                            + TX.tx(\"Reminder on '$1' was due on $2\",\n                                    path.join(\"/\"),\n                                    expired.toLocaleDateString()),\n                        after_close: next\n                    });\n            });\n    }\n\n    function get_updates_from_cloud(cloard, chain) {\n        // This will get triggered whenever both hoards are\n        // successfully loaded.\n        if (DEBUG) console.debug(\"Merging from cloud hoard\");\n        S.client.hoard.merge_from_cloud(\n            cloard,\n            ST.action,\n            function(conflicts) {\n                if (conflicts.length > 0) {\n                    $(\"#squeak\").squirrelDialog(\"open\", {\n                        title: TX.warning(),\n                        severity: \"warning\",\n                        message: \n                        TX.tx(\"Conflicts were detected while merging actions from the Cloud. Please review these rejected actions before saving.\")\n                    });\n                    $.each(conflicts, function(i, c) {\n                        var e = c.conflict;\n                        $(\"#squeak\").squirrelDialog(\"squeakAdd\", {\n                            severity: \"warning\",\n                            message: Hoard.stringify_action(e)\n                                + \": \" + c.message });\n                    });\n                }\n                S.cloud.status = S.IS_LOADED;\n                // Finished with the cloud hoard (for now)\n                chain();\n            });\n    }\n\n    // Determine if there are unsaved changes, and generate a warning\n    // message for the caller to use.\n    function unsaved_changes(max_changes) {\n        var message = [];\n\n        $(\".tree-modified\").each(function() {\n            if (DEBUG && !$(this).data(\"path\")\n                && !$(this).hasClass(\"tree-root\"))\n                debugger; // Missing data-path\n            var path = $(this).data(\"path\") || \"node\";\n            message.push(TX.tx(\"$1 has changed\",\n                               path.replace(S.PATHSEP, \"/\")));\n        });\n\n        if (message.length > max_changes) {\n            var l = message.length;\n            message = message.slice(0, max_changes);\n            message.push(TX.tx(\"... and $1 more change$?($1!=1,s,)\", l - 5));\n        }\n\n        if (S.cloud.status !== S.IS_LOADED) {\n            message.unshift(TX.tx(\"The $1 hoard $2\",\n                                  S.cloud.store\n                                  ? S.cloud.store.options().identifier\n                                  : TX.tx(\"Cloud\"),\n                                  TX.tx(S.cloud.status)));\n        }\n        if (S.client.status !== S.IS_LOADED) {\n            message.unshift(TX.tx(\"The $1 hoard $2\",\n                                  S.client.store.options().identifier,\n                                  TX.tx(S.client.status)));\n        }\n\n        if (message.length === 0)\n            return null;\n\n        return message.join(\"\\n\");\n    }\n\n    function save_hoards() {\n        $(\"#squeak\").squirrelDialog(\"open\", {\n            title: TX.tx(\"Saving\")\n        });\n\n        var client_ok = true;\n        var cloud_ok = true;\n\n        function finished() {\n            if (DEBUG) console.debug(\"...save finished\");\n            Utils.sometime(\"update_save\");\n            if (client_ok && cloud_ok) {\n                if (S.client.hoard.options.autosave)\n                    $(\"#squeak\").dialog(\"close\");\n                else\n                    // Otherwise leave it open\n                    $(\"#squeak\").squirrelDialog(\"squeakAdd\", TX.tx(\"Save complete\"));\n\n            } else {\n                // Otherwise leave it open, disable auto-save\n                $(\"#squeak\").squirrelDialog(\"squeakAdd\", {\n                    severity: \"error\",\n                    message: TX.tx(\"Save encountered errors\")});\n                S.client.hoard.options.autosave = false;\n            }\n        }\n\n        function write_client_store() {\n            S.client.store.writes(\n                \"S.\" + S.client.store.user(),\n                JSON.stringify(S.client.hoard),\n                function() {\n                    if (DEBUG) console.debug(\"...client save OK\");\n                    $(\".tree-modified\").removeClass(\"tree-modified\");\n                    S.client.status = S.IS_LOADED;\n                    $(\"#squeak\").squirrelDialog(\"squeakAdd\", \n                        TX.tx(\"Saved in $1\", this.options().identifier));\n                    finished();\n                },\n                function(e) {\n                    if (DEBUG) console.debug(\"...client save failed \" + e);\n                    $(\"#squeak\").squirrelDialog(\"squeakAdd\", {\n                        severity: \"error\",\n                        message: TX.tx(\"Failed to save in $1: $2\",\n                                       this.options().identifier, e)\n                    });\n                    client_ok = false;\n                    finished();\n                });\n        }\n\n        function save_client() {\n            if (DEBUG) console.debug(\"...save to client\");\n\n            if (S.client.status === S.IS_LOADED\n                && $(\".tree-modified\").length === 0) {\n                finished();\n                return;\n            }\n\n            S.client.status = S.PENDING_SAVE;\n\n            $(\"#squeak\").squirrelDialog(\"squeakAdd\", {\n                severity: \"while\",\n                message: TX.tx(\"Saving in $1\",\n                               S.client.store.options().identifier)});\n\n            Utils.soon(write_client_store);\n        }\n\n        function write_cloud_store(cloard) {\n            S.cloud.store.writes(\n                S.client.hoard.options.store_path,\n                JSON.stringify(cloard),\n                function() {\n                    if (DEBUG) console.debug(\"...cloud save OK\");\n                    S.client.hoard.actions = [];\n                    S.client.hoard.last_sync = Date.now();\n                    $(\"#squeak\").squirrelDialog(\"squeakAdd\", \n                        TX.tx(\"Saved in $1\", this.options().identifier));\n                    S.cloud.status = S.IS_LOADED;\n                    save_client();\n                },\n                function(e) {\n                    if (DEBUG) console.debug(\"...cloud save failed \" + e);\n                    $(\"#squeak\").squirrelDialog(\"squeakAdd\", {\n                        severity: \"error\",\n                        message: TX.tx(\"Failed to save in $1: $2\",\n                                       this.options().identifier, e)});\n                    cloud_ok = false;\n                    save_client();\n                });\n        }\n\n        // Save the given hoard into the cloud.\n        function update_cloud_store(cloard) {\n            cloard.actions = cloard.actions.concat(S.client.hoard.actions);\n            if (S.cloud.store) {\n                if (DEBUG) console.debug(\"...save to cloud\");\n\n                $(\"#squeak\").squirrelDialog(\"squeakAdd\", {\n                    severity: \"while\",\n                    message: TX.tx(\"Saving in $1\",\n                                   S.cloud.store.options().identifier)});\n\n                S.cloud.status = S.PENDING_SAVE;\n\n                Utils.soon(function() { write_cloud_store(cloard); });\n            } else {\n                if (DEBUG) console.debug(\"...no cloud store\");\n                save_client();\n            }\n        }\n\n        // Construct a new cloud hoard from data in the client. This will\n        // happen if the cloud is read and found to be empty or corrupt,\n        // but not if the read failed.\n        function construct_new_cloud() {\n            if (DEBUG) console.debug(\"...construct cloud \");\n            var cloard = new Hoard();\n            S.client.hoard.reconstruct_actions(\n                function(a, next) {\n                    cloard.actions.push({\n                        type: a.type,\n                        time: a.time,\n                        data: a.data,\n                        path: a.path.slice()\n                    });\n                    if (next)\n                        next();\n                },\n                function() {\n                    update_cloud_store(cloard);\n                });\n        }\n\n        // Action on the cloud store being read OK\n        function cloud_store_read_ok(data) {\n            var cloard;\n            if (DEBUG) console.debug(\"...cloud read OK \");\n            try {\n                cloard = new Hoard(JSON.parse(data));\n                S.cloud.status = S.IS_LOADED;\n            } catch (e) {\n                // We'll get here if decryption failed....\n                if (DEBUG) console.debug(\"Cloud hoard JSON parse failed: \" + e);\n                $(\"#squeak\").squirrelDialog(\"squeakAdd\", {\n                    severity: \"error\",\n                    message: TX.tx(\"$1 hoard can't be read for update\",\n                                   this.options().identifier)});\n                S.cloud.status = S.IS_CORRUPT;\n                cloud_ok = false;\n                construct_new_cloud();\n                return;\n            }\n            \n            if (S.cloud.status === S.IS_LOADED) {\n                if (DEBUG) console.debug(\"...merge cloud \");\n                S.client.hoard.merge_from_cloud(\n                    cloard, ST.action);\n            }\n            \n            if ( S.cloud.status !== S.IS_LOADED\n                 || S.client.hoard.actions.length !== 0) {\n                // Only save if there actually some changes\n                if (DEBUG) console.debug(\"...update from cloud \");\n                update_cloud_store(cloard);\n            } else\n                Utils.soon(save_client);\n        }\n\n        // Action on the cloud store read failing\n        function cloud_store_read_failed(e) {\n            if (DEBUG) console.debug(\"...cloud read failed \" + e);\n            if (e === AbstractStore.NODATA) {\n                if (DEBUG) console.debug(this.options().identifier + \" contains NODATA\");\n                S.cloud.status = S.IS_EMPTY;\n                construct_new_cloud();\n            } else {\n                $(\"#squeak\").squirrelDialog(\"squeakAdd\", {\n                    severity: \"error\",\n                    message: TX.tx(\"Failed to refresh from $1: $2\",\n                                   this.options().identifier, e)});\n                cloud_ok = false;\n                Utils.soon(save_client);\n            }\n        }\n\n        if (DEBUG) console.debug(\"Saving; client \" + S.client.status\n                                 + \"; cloud \" + S.cloud.status);\n        if (S.cloud.status === S.NEW_SETTINGS\n            || S.cloud.status === S.IS_EMPTY) {\n            // Don't attempt to resync out before saving, simply\n            // overwrite the cloud.\n            if (DEBUG) console.debug(\"...constructing new cloud because settings\");\n            construct_new_cloud();\n        } else {\n            // Reload and save the cloud hoard\n            if (DEBUG) console.debug(\"...reloading cloud\");\n            S.cloud.store.reads(\n                S.client.hoard.options.store_path,\n                cloud_store_read_ok,\n                cloud_store_read_failed);\n        }\n    }\n\n    function update_save(/*event*/) {\n        $(\"#authenticated_undo\").toggle(ST.can_undo());\n        $(\"#extras\").squirrelDialog(\"get\", \"autosave\").val(\n            S.client.hoard.options.autosave ? \"on\" : \"off\");\n        var us = unsaved_changes(3);\n        var $sb = $(\"#authenticated_save\");\n\n        if (us !== null) {\n            if (S.client.hoard.options.autosave) {\n                save_hoards();\n            } else {\n                $sb.attr(\n                    \"title\",\n                    TX.tx(\"Save is required because: \") + us);\n                $sb.show();\n            }\n        } else {\n            $(\"#authenticated_save\").hide();\n        }\n    }\n\n    // Final step before allowing interaction\n    function step_8_authenticated() {\n        $(\"#whoami\").text(S.client.store.user());\n        $(\"#unauthenticated\").hide();\n        $(\"#authenticated\").show();\n\n        // Flush the sometimes, and allow new sometimes to be set\n        Utils.sometime_is_now();\n    }\n\n    // Last in the initial hoard load sequence\n    function step_7_hoards_loaded() {\n        $(window).on(\"beforeunload\", function() {\n            var us = unsaved_changes(10);\n            if (us !== null) {\n                us = TX.tx(\"You have unsaved changes\")\n                    + \"\\n\" + us\n                    + \"\\n\" + TX.tx(\"Are you really sure?\");\n                return us;\n            }\n        });\n\n        Utils.sometime(\"update_save\");\n        Utils.sometime(\"check_alarms\");\n\n        // We are ready for interaction\n        step_8_authenticated();\n    }\n\n    /**\n     * STEP 6: Called when we have a (possibly empty) client hoard.\n     *  Try and synch it from the cloud.\n     */\n    function step_6_load_cloud_hoard() {\n        if (S.cloud.store) {\n            if (DEBUG) console.debug(\n                \"Reading cloud \" + S.cloud.store.options().identifier);\n            S.cloud.store.reads(\n                S.client.hoard.options.store_path,\n                function(data) {\n                    var hoard;\n                    if (DEBUG) console.debug(this.options().identifier + \" is ready\");\n                    try {\n                        hoard = JSON.parse(data);\n                    } catch (e) {\n                        if (DEBUG) console.debug(\"Client hoard JSON parse failed: \" + e);\n                        $(\"#squeak\").squirrelDialog(\"open\", {\n                            title: TX.error(),\n                            severity: \"error\",\n                            message:\n                            TX.tx(\"$1 hoard exists, but can't be read.\",\n                                  this.options().identifier)\n                                + \" \"\n                                + TX.tx(\"Check that you have the correct password.\")\n                        });\n                        S.cloud.status = S.IS_CORRUPT;\n                        Utils.soon(step_7_hoards_loaded);\n                        return;\n                    }\n                    //if (DEBUG) console.debug(\"Cloud hoard \" + data);\n                    get_updates_from_cloud(new Hoard(hoard), step_7_hoards_loaded);\n                },\n                function(e) {\n                    if (e === AbstractStore.NODATA) {\n                        if (DEBUG) console.debug(\n                            this.options().identifier + \" contains NODATA\");\n                        S.cloud.status = S.IS_EMPTY;\n                    } else {\n                        if (DEBUG) console.debug(\n                            this.options().identifier + \" has NODATA: \" + e);\n                        $(\"#squeak\").squirrelDialog(\"open\", {\n                            title: TX.error(),\n                            severity: \"error\",\n                            message: TX.tx(\"Could not load cloud hoard.\")\n                        });\n                        $(\"#squeak\").squirrelDialog(\"squeakAdd\", \n                            TX.tx(\"Check that you have the correct password.\"));\n                        // Could not contact cloud; continue all the same\n                    }\n                    Utils.soon(step_7_hoards_loaded);\n                });\n        } else {\n            step_7_hoards_loaded();\n        }\n    }\n\n    /**\n     * STEP 5: Called when there is no existing client hoard, to initialise\n     * a new one.\n     */\n    function step_5_init_client_hoard() {\n        if (DEBUG) console.debug(\"Setting up client hoard\");\n        S.client.hoard = new Hoard();\n        S.client.status = S.IS_EMPTY;\n\n        if (S.cloud.store && S.cloud.store.options().needs_path) {\n            $(\"#store_settings\").squirrelDialog(\"open\", step_6_load_cloud_hoard);\n        } else {\n            step_6_load_cloud_hoard();\n        }\n    }\n\n    /**\n     * STEP 4: Once the stores have been initialised, we can load\n     * the client hoard. This will give us the baseline cache data and the\n     * location of the cloud hoard, so we can then chain loading and merging\n     * the cloud hoard.\n     */\n    function step_4_load_client_hoard() {\n        function rebuild_hoard() {\n            if (DEBUG) console.debug(\"Reconstructing UI tree from cache\");\n            S.client.hoard.reconstruct_actions(\n                function(a, next) {\n                    ST.action(a, false, next);\n                },\n                function() { // on complete\n                    // Reset the UI modification list; we just loaded the\n                    // client hoard\n                    $(\".tree-modified\").removeClass(\"tree-modified\");\n                    // Mark all the nodes in the pending actions list as\n                    // modified. If a node isn't found, back up the tree\n                    // until we find a parent that does exist and mark it.\n                    var as = S.client.hoard.actions, i, p, $node;\n                    for (i = 0; i < as.length; i++) {\n                        p = as[i].path.slice();\n                        while (p.length > 0) {\n                            $node = ST.getNodeFromPath(p);\n                            if ($node) {\n                                $node.addClass(\"tree-modified\");\n                                break;\n                            }\n                            p.pop();\n                        }\n                    }\n                    Utils.soon(step_6_load_cloud_hoard);\n                });\n        }\n\n        if (DEBUG) console.debug(\"Load client store\");\n\n        S.client.store.reads(\n            \"S.\" + S.client.store.user(),\n            function(data) {\n                try {\n                    S.client.hoard = new Hoard(JSON.parse(data));\n                    S.client.status = S.IS_LOADED;\n                } catch (e) {\n                    if (DEBUG) console.debug(\"Caught \" + e);\n                    $(\"#squeak\").squirrelDialog(\"open\", {\n                        title: TX.error(),\n                        severity: \"error\",\n                        message:\n                        TX.tx(\"$1 hoard exists, but can't be read.\",\n                              this.options().identifier),\n                        // After close, clear down and try again\n                        after_close: function() {\n                            Utils.sometime(\"init_application\");\n                        }\n                    });\n                    $(\"#squeak\").squirrelDialog(\"squeakAdd\", \n                        TX.tx(\"Check that you have the correct password.\"));\n                    return;\n                }\n                // Make sure we have a store path\n                if ((S.client.store\n                     && S.client.store.options().needs_path\n                     || S.cloud.store\n                     && S.cloud.store.options().needs_path)\n                    && !S.client.hoard.options.store_path) {\n                    $(\"#store_settings\").squirrelDialog(\"open\", rebuild_hoard);\n                } else {\n                    rebuild_hoard();\n                }\n            },\n            function(e) {\n                if (e === AbstractStore.NODATA) {\n                    if (DEBUG) console.debug(this.options().identifier + \" contains NODATA\");\n                    // Construct a new client hoard\n                    Utils.soon(step_5_init_client_hoard);\n                } else {\n                    $(\"#squeak\").squirrelDialog(\"open\", {\n                        title: TX.error(),\n                        severity: \"error\",\n                        message: TX.tx(\"$1 store error: $2\",\n                                       this.options().identifier, e),\n                        after_close: function() {\n                            Utils.sometime(\"init_application\");\n                        }\n                    });\n                }\n            });\n    }\n\n    /**\n     * STEP 3: Login, fill in details the stores didn't provide, prompt\n     * is needed.\n     */\n    function step_3_identify_user() {\n        var uReq = true;\n        var pReq = true;\n\n        // Spread user information determined during store initialisation\n        // around.\n        if (S.cloud.store\n            && typeof S.cloud.store.user() !== \"undefined\") {\n            // Force the cloud user onto the client store\n            if (DEBUG) console.debug(\"Cloud user is preferred: \" + S.cloud.store.user());\n            S.client.store.user(S.cloud.store.user());\n            uReq = false;\n        } else if (S.client.store\n                   && typeof S.client.store.user() !== \"undefined\") {\n            // Force the client user onto the cloud store\n            if (DEBUG) console.debug(\"Client user is available: \" + S.client.store.user());\n            if (S.cloud.store)\n                S.cloud.store.user(S.client.store.user());\n            uReq = false;\n        }\n\n        if (S.cloud.store\n            && typeof S.cloud.store.pass() !== \"undefined\") {\n            // Force the cloud pass onto the client store\n            if (DEBUG) console.debug(\"Cloud pass is preferred\");\n            if (S.client.store)\n                S.client.store.pass(S.cloud.store.pass());\n            pReq = false;\n        } else if (S.client.store\n                   && typeof S.client.store.pass() !== \"undefined\") {\n            // Force the client pass onto the cloud store\n            if (DEBUG) console.debug(\"Client pass is available\");\n            if (S.cloud.store)\n                S.cloud.store.pass(S.client.store.pass());\n            pReq = false;\n        }\n\n        // If we still need user or password, prompt\n        if (uReq || pReq) {\n            $(\"#login\").squirrelDialog(\"open\", {\n                store: S.client.store,\n                on_signin: function(user, pass) {\n                    if (DEBUG) console.debug(\"Login prompt said user was \" + user);\n                    S.client.store.user(user);\n                    S.client.store.pass(pass);\n                    if (S.cloud.store) {\n                        S.cloud.store.user(user);\n                        S.cloud.store.pass(pass);\n                    }\n                    step_4_load_client_hoard();\n                },\n                user_required: uReq,\n                pass_required: pReq\n            });\n        } else\n            step_4_load_client_hoard();\n    }\n\n    /**\n     * STEP 2: Once the cloud store is loaded, we can move on to the client store.\n     */\n    function step_2_init_client_store() {\n        // new LocalStorageStore({\n        new EncryptedStore({\n            understore: function(params) {\n                return new LocalStorageStore(params);\n            },\n\n            ok: function() {\n                if (DEBUG) console.debug(this.options().identifier\n                                         + \" store is ready\");\n                S.client.store = this;\n                $(\"#authmessage\").text(TX.tx(\"Loading...\"));\n                // Chain the login prompt\n                Utils.soon(step_3_identify_user);\n            },\n            fail: function(e) {\n                // We did our best!\n                $(\"#squeak\").squirrelDialog(\"open\", {\n                    title: TX.error(),\n                    severity: \"error\",\n                    message: TX.tx(\"Encryption error: $1\", e)\n                });\n            }\n        });\n    }\n\n    /**\n     * STEP 1: Establish contact with the cloud, and get user details.\n     */\n    function step_1_init_cloud_store() {\n        var p = {\n            ok: function() {\n                S.cloud.store = this;\n                // Chain the client store startup\n                Utils.soon(step_2_init_client_store);\n            },\n            fail: function(e) {\n                $(\"#squeak\").squirrelDialog(\"open\", {\n                    title: TX.warning(),\n                    severity: \"warning\",\n                    message: TX.tx(\"Could not open cloud store: $1\", e),\n                    after_close: function() {\n                        step_2_init_client_store();\n                    }\n                });\n                $(\"#squeak\").squirrelDialog(\"squeakAdd\", {\n                    severity: \"warning\",\n                    message: TX.tx(\"If you continue, only the client store will be available\")\n                });\n            }\n        };\n\n        p.understore = function(pp) {\n            // SQUIRREL_STORE is a constant set by the low-level\n            // store module selected by dynamic load\n            if (S.USE_STEGANOGRAPHY) {\n                pp.understore = function(ppp) {\n                    return new SQUIRREL_STORE(ppp);\n                };\n                return new StegaStore(pp);\n            } else {            \n                return new SQUIRREL_STORE(pp);\n            }\n        };\n\n        return new EncryptedStore(p);\n    }\n\n    function before_menu_open(e, ui) {\n        var $node = (ui.target.is(\".tree-node\"))\n            ? ui.target\n            : ui.target.closest(\".tree-node\");\n\n        var has_alarm = typeof $node.data(\"alarm\") !== \"undefined\";\n        var is_leaf = $node.hasClass(\"tree-leaf\");\n        var is_root = ui.target.closest(\".tree-node\").hasClass(\"tree-root\");\n        var is_open = $node.hasClass(\"tree-open\");\n        var $root = $(\"body\");\n        \n        if (DEBUG) console.debug(\"contextmenu on \" + $node.data(\"key\")\n                                 + \" \" + is_leaf);\n        $root\n            .contextmenu(\"showEntry\", \"add_alarm\",\n                         !has_alarm && !is_root)\n            .contextmenu(\"showEntry\", \"add_subtree\",\n                         is_open && !is_leaf)\n            .contextmenu(\"showEntry\", \"add_value\",\n                         is_open && !is_leaf && !is_root)\n            .contextmenu(\"showEntry\", \"copy_value\", is_leaf)\n            .contextmenu(\"showEntry\", \"delete\", !is_root)\n            .contextmenu(\"showEntry\", \"edit\", is_leaf)\n            .contextmenu(\"showEntry\", \"insert_copy\",\n                         !is_leaf && (typeof S.clipboard !== \"undefined\"))\n            .contextmenu(\"showEntry\", \"make_copy\",\n                         !is_root && !is_leaf)\n            .contextmenu(\"showEntry\", \"pick_from\", is_leaf)\n            .contextmenu(\"showEntry\", \"randomise\", is_leaf)\n            .contextmenu(\"showEntry\", \"rename\", !is_root);\n\n        S.$menuTarget = $node;\n    }\n\n    /**\n     * Handler for context menu items\n     */\n    function handle_menu_choice(e, ui) {\n        var $node = S.$menuTarget;\n        \n        if (!$node) {\n            if (DEBUG) console.debug(\"No node for contextmenu>\" + ui.cmd);\n            return;\n        }\n\n        switch (ui.cmd) {\n        case \"copy_value\":\n            S.clipboard = $node.find(\".tree-value:first\").text();\n            break;\n\n        case \"make_copy\":\n            var p = $node.tree(\"get_path\");\n            var n = S.client.hoard.get_node(p);\n            S.clipboard = JSON.stringify(n);\n            break;\n\n        /* Can't get it to work like this - would need an intermediate\n           element that a Ctrl+V event happens on.\n        case \"paste\":\n            document.designMode = \"on\";\n            $(window).on(\"paste\", function(e) {\nvar   systemPasteContent = \n    e.clipboardData.getData('text/plain');\n                debugger;\n            });\n            $(\"#pasteboard\").focus();\n            document.execCommand(\"Paste\");\n            debugger;\n            break;\n        /**/\n\n        case \"insert_copy\":\n            if (S.clipboard) {\n                try {\n                    var data = JSON.parse(S.clipboard);\n                    $(\"#insert\").squirrelDialog(\"open\", {$node: $node, data: data } );\n                } catch (e) {\n                    if (DEBUG) debugger;\n                }\n            }\n            break;\n\n        case \"rename\":\n            if (DEBUG) console.debug(\"Renaming\");\n            $node.tree(\"edit\", \".tree-key\");\n            break;\n\n        case \"edit\":\n            if (DEBUG) console.debug(\"Editing\");\n            $node.tree(\"edit\", \".tree-value\");\n            break;\n\n        case \"add_value\":\n            $(\"#add\").squirrelDialog(\"open\", {$node: $node, is_value: true});\n            break;\n\n        case \"add_subtree\":\n            $(\"#add\").squirrelDialog(\"open\", {$node: $node, is_value: false});\n            break;\n\n        case \"randomise\":\n            if (DEBUG) console.debug(\"Randomising\");\n            $(\"#randomise\").squirrelDialog(\"open\", { $node: $node });\n            break;\n\n        case \"add_alarm\":\n            if (DEBUG) console.debug(\"Adding reminder\");\n            $(\"#alarm\").squirrelDialog(\"open\", { $node: $node });\n            break;\n\n        case \"delete\":\n            if (DEBUG) console.debug(\"Deleting\");\n            $(\"#delete\").squirrelDialog(\"open\", { $node: $node });\n            break;\n\n        case \"pick_from\":\n            if (DEBUG) console.debug(\"Picking\");\n            $(\"#pick\").squirrelDialog(\"open\", {$node: $node});\n            break;\n\n        default:\n            if (DEBUG) debugger;\n        }\n    }\n\n    function init_menus() {\n        var menu = {\n            delegate: \".tree-title\",\n            menu: [\n                {\n                    title: TX.tx(\"Copy value\"),\n                    cmd: \"copy_value\",\n                    uiIcon: \"ui-icon-squirrel-copy squirrel-icon\"\n                },\n                /* Can't get it to work\n                {\n                    title: TX.tx(\"Paste\"),\n                    cmd: \"paste\",\n                    uiIcon: \"ui-icon-squirrel-paste squirrel-icon\"\n                },\n                /**/\n                {\n                    title: TX.tx(\"Pick characters\"),\n                    cmd: \"pick_from\",\n                    uiIcon: \"ui-icon-squirrel-pick squirrel-icon\"\n                },\n                {\n                    title: TX.tx(\"Rename\"),\n                    cmd: \"rename\",\n                    uiIcon: \"ui-icon-squirrel-edit squirrel-icon\"\n                },\n                {\n                    title: TX.tx(\"Edit value\"),\n                    cmd: \"edit\",\n                    uiIcon: \"ui-icon-squirrel-edit squirrel-icon\"\n                },\n                {\n                    title: TX.tx(\"Add reminder\"),\n                    cmd: \"add_alarm\",\n                    uiIcon: \"ui-icon-squirrel-alarm squirrel-icon\" \n                },\n                {\n                    title: TX.tx(\"Generate new random value\"),\n                    cmd: \"randomise\",\n                    uiIcon: \"ui-icon-squirrel-key squirrel-icon\" \n                },               \n                {\n                    title: TX.tx(\"Add new value\"),\n                    cmd: \"add_value\",\n                    uiIcon: \"ui-icon-squirrel-add-value squirrel-icon\" \n                },\n                {\n                    title: TX.tx(\"Add new folder\"),\n                    cmd: \"add_subtree\",\n                    uiIcon: \"ui-icon-squirrel-add-folder squirrel-icon\" \n                },\n                {\n                    title: TX.tx(\"Copy folder\"),\n                    cmd: \"make_copy\",\n                    uiIcon: \"ui-icon-squirrel-copy squirrel-icon\"\n                },\n                {\n                    title: TX.tx(\"Insert copy of folder\"),\n                    cmd: \"insert_copy\",\n                    uiIcon: \"ui-icon-squirrel-paste squirrel-icon\"\n                },\n                {\n                    title: TX.tx(\"Delete\"),\n                    cmd: \"delete\",\n                    uiIcon: \"ui-icon-squirrel-delete squirrel-icon\" \n                }\n            ],\n            preventContextMenuForPopup: true,\n            preventSelect: true,\n            taphold: true,\n            beforeOpen: before_menu_open,\n            select: handle_menu_choice\n        };\n\n        $(\"body\").contextmenu(menu);\n\n        S.valueCopyClipboard = new Clipboard(\".ui-contextmenu li[data-command='copy_value']\", {\n            text: function() {\n                var $node = S.$menuTarget;\n                if (DEBUG) console.debug(\"clip val from: \" +\n                                         $node.data(\"key\"));\n                return $node.find(\".tree-value:first\").text();\n            }\n        });\n        \n        S.treeCopyClipboard = new Clipboard(\".ui-contextmenu li[data-command='make_copy']\", {\n            text: function() {\n                var $node = S.$menuTarget;\n                if (DEBUG) console.debug(\"clip json from: \" +\n                                         $node.data(\"key\"));\n                var p = $node.tree(\"getPath\");\n                var n = S.client.hoard.get_node(p);\n                return JSON.stringify(n);\n            }\n        });\n/* Should zeroClipboard ever prove necessary, here are the bits\n        S.zeroClipboards.addClipboard({\n            selector: \".ui-contextmenu li[data-command='copy_value']\",\n            handler: function() {\n                var $node = S.$menuTarget;\n                if (DEBUG) console.debug(\"clip val from: \" +\n                                         $node.data(\"key\"));\n                return {\n                    data: $node.find(\".tree-value:first\").text(),\n                    contentType: \"text/plain\"\n                };\n            }\n        });\n        S.zeroClipboards.addClipboard({\n            selector: \".ui-contextmenu li[data-command='make_copy']\",\n            handler: function() {\n                var $node = S.$menuTarget;\n                if (DEBUG) console.debug(\"clip json from: \" +\n                                         $node.data(\"key\"));\n                var p = $node.tree(\"getPath\");\n                var n = S.client.hoard.get_node(p);\n                return {\n                    data: JSON.stringify(n),\n                    contentType: \"text/json\"\n                }\n            }\n        });\n*/\n    }\n \n    /**\n     * Initialise application data (new Squirrel(), effectively)\n     */\n    function init_application() {\n        // status may be one of IS_EMPTY, IS_CORRUPT, IS_LOADED or\n        // NEW_SETTINGS. If the status is anything but IS_LOADED\n        // then it is a candidate for saving.\n        S.client = {\n            store: null,                 // The store used actively\n            hoard: null,                 // The hoard in that store\n            status: S.IS_EMPTY\n        };\n\n        S.cloud = {\n            store: null,                 // Temporary memory used during load\n            status: S.IS_EMPTY\n        };\n\n        // Kick off by initialising the cloud store.\n        step_1_init_cloud_store();\n    }\n\n    function init_ui() {\n\n        $(\"#authenticated_save\")\n            .hide()\n            .on($.getTapEvent(), function(/*evt*/) {\n                save_hoards();\n                return false;\n            });\n\n        $(\"#authenticated_undo\")\n            .hide()\n            .on($.getTapEvent(), function(/*evt*/) {\n                ST.undo(function(mess) {\n                    $(\"#squeak\").squirrelDialog(\"open\", {\n                        title: \"Undo\",\n                        message: mess\n                    });\n                });\n                return false;\n            });\n\n        $(\"#authenticated_extras\")\n            .on($.getTapEvent(), function(/*evt*/) {\n                $(\"#extras\").squirrelDialog(\"open\");\n            });\n\n        $(\"#search\")\n            .on(\"change\", function(/*evt*/) {\n                $(\"#search_hits\").text(TX.tx(\"Searching...\"));\n                S.search($(this).val());\n            });\n\n        $(\"#search_button\")\n            .on($.getTapEvent(), function(/*evt*/) {\n                $(\"#search_hits\").text(TX.tx(\"Searching...\"));\n                S.search($(\"#search\").val());\n            });\n\n        $(\"#authenticated_search\")\n            .on($.getTapEvent(), function(/*evt*/) {\n                $(\"#search\").squirrelDialog(\"open\");\n            });\n        \n        $(\".help\").each(function() {\n            var $this = $(this);\n            $this.hide();\n            var $help = $(\"<button></button>\");\n            var $close = $(\"<button></button>\");\n            $help\n                .addClass(\"info-button\")\n                .button({\n                    icons: {\n                        primary: \"ui-icon-info\"\n                    },\n                    text: false\n                })\n                .on($.getTapEvent(), function() {\n                    $this.show();\n                    $help.hide();\n                })\n                .insertBefore(this);\n            $close\n                .addClass(\"help-close\")\n                .button({\n                    icons: {\n                        primary: \"ui-icon-circle-close\"\n                    },\n                    text: false\n                })\n                .on($.getTapEvent(), function() {\n                    $this.hide();\n                    $help.show();\n                })\n                .prependTo($this);\n        });\n\n        $(\"button\").each(function() {\n            var $this = $(this);\n            var opts;\n\n            if (typeof $this.data(\"icon\") !== \"undefined\") {\n                opts = {\n                    icons: {\n                        primary: $this.data(\"icon\")\n                    },\n                    classes: {\n                        \"ui-button-icon\": \"squirrel-icon\"\n                    },\n                    text: false\n                };\n            }\n            $this.button(opts);\n        });\n\n        $(\"#sites-node\").tree({\n            is_root: true\n        });\n        init_menus();\n\n        // Set up event handlers for sometime scheduler\n        $(document)\n            .on(\"init_application\", init_application)\n            .on(\"check_alarms\", check_alarms)\n            .on(\"update_save\", update_save)\n            .on(\"reset_styling\", reset_styling);\n        reset_styling();\n        \n        Utils.sometime_is_now();\n    }\n\n    /**\n     * A (manual) new tree node action\n     */\n    S.add_child_node = function($node, title, value) {\n        var p = $node.tree(\"getPath\");\n        p.push(title);\n\n        var res = S.client.hoard.record_action(\n            {\n                type: \"N\",\n                path: p,\n                data: (typeof value === \"string\") ? value : undefined\n            },\n            function(e) {\n                ST.action(\n                    e, true,\n                    function($newnode) {\n                        if (DEBUG && !$newnode) debugger;\n                        if (typeof value !== \"string\"\n                            && typeof value !== \"undefined\") {\n                            S.insert_data($newnode.tree(\"getPath\"), value);\n                        }\n                        $newnode.tree(\"open\");\n                        Utils.sometime(\"update_save\");\n                    });\n            });\n        if (res !== null)\n            $(\"#squeak\").squirrelDialog(\"open\", res.message);\n    };\n\n    /**\n     * Perform a text search\n     */\n    S.search = function(s) {\n        var re;\n        try {\n            re = new RegExp(s, \"i\");\n        } catch (e) {\n            $(\"#squeak\").squirrelDialog(\"open\", \n                {\n                    message: TX.tx(\"Error in search expression '$1': \", s)\n                        + e\n                });\n        }\n        var hits = [];\n        $(\".tree-key,.tree-value\").each(function() {\n            if ($(this).text().match(re)) {\n                hits.push(this);\n            }\n        });\n\n        $(\"#search_hits\").text(TX.tx(\"$1 found\", hits.length));\n        if (hits.length === 0) {\n            $(\"#squeak\").squirrelDialog(\"open\", \n                {\n                    message: TX.tx(\"'$1' not found\", s)\n                });\n        } else {\n            $(\".tree-open\").each(function() {\n                $(this).tree(\"close\");\n            });\n            $.each(hits, function(n, v) {\n                $(v).parents(\".tree-collection\").each(function() {\n                    $(this).tree(\"open\");\n                });\n            });\n        }\n    };\n\n    /**\n     * Insert data from a structure under the given path\n     * @param path path to the parent below which this data will be inserted\n     * @param data hoard cache format data\n     */\n    S.insert_data = function(path, data) {\n        $(\"#squeak\").squirrelDialog(\"open\", { title: \"Loading\" });\n\n        S.client.hoard.actions_from_hierarchy(\n            { data: data },\n            function(act, next) { // listener\n                //if (DEBUG) console.debug(Hoard.stringify_action(act));\n                act.path = path.slice().concat(act.path);\n                var res = S.client.hoard.record_action(\n                    act, function (sact) {\n                        ST.action(sact, false, next);\n                    });\n                if (res !== null)\n                    $(\"#squeak\").squirrelDialog(\"squeakAdd\", res.message);\n                if (next)\n                    next();\n            },\n            function() { // chain on complete\n                Utils.sometime(\"update_save\");\n                $(\"#squeak\").squirrelDialog(\n                    \"squeakAdd\",\n                    TX.tx(\"JSON has been loaded\"));\n            });\n    };\n\n    // on ready\n    $(function() {\n        var qs = Utils.query_string();\n\n        // Use uncompressed if the current document is uncompressed\n        var unco = !/\\.min\\.html/.test(document.location.href);\n\n        if (qs.debug)\n            DEBUG = true;\n\n        // By default, jQuery timestamps datatype 'script' and 'jsonp'\n        // requests to avoid them being cached by the browser.\n        // Disable this functionality by default so that as much as\n        // possible is cached locally\n        if (!DEBUG) $.ajaxSetup({ cache: true });\n\n        console.log(\"Device is \" + window.screen.width + \" X \" +\n                    window.screen.height + \" Body is \" +\n                    $(\"body\").width() + \" X \" + $(\"body\").height());\n        \n        var theme = Cookies.get(\"ui_theme\");\n        if (theme && theme !== \"base\")\n            S.setTheme(theme);\n        \n        // width is really 580 css px\n        //$(\"body\").width(window.screen.width);\n\n        // Menu is built; attach ZeroClipboards (if available)\n        //S.zeroClipboards = new ZeroClipboardShim();\n\n        var store = qs.store || \"TestStore\";\n        if (typeof qs.steg !== \"undefined\")\n            S.USE_STEGANOGRAPHY = true;\n\n        var store_bits = [ \"js/\" + store + \".min.js\" ];\n        if (S.USE_STEGANOGRAPHY) {\n            store_bits.push(\"js/Steganographer.min.js\");\n            store_bits.push(\"js/StegaStore.min.js\");\n        } else\n            $(\".using_steganography\").remove();\n        Utils.load(store_bits, unco, function () {\n            // Initialise translation module,\n            // and chain the application init\n            TX.init(function() {\n                // Initialise UI components\n                init_ui();\n                init_application();\n            });\n        });\n        $(\".dlg-dialog\").squirrelDialog({autoOpen: false});\n        \n        //$(this).tooltip(); // visually messy\n        // mobile device; though shouldn't we determine the size?\n        // window.screen.width, window.screen.height\n    });\n\n})(jQuery, Squirrel);\n"]}