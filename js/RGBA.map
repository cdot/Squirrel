{"version":3,"sources":["js/RGBA.js"],"names":["RGBA","r","g","b","a","parseComponent","value","max","test","parseFloat","arguments","length","this","named","CSSColours","toLowerCase","charAt","parseInt","substr","replace","split","n","fromHSL","undefined","Math","floor","constructor","name","jQuery","extend","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","prototype","inverse","complement","hsv","toHSV","fromHSV","luma","toString","tuple","round","push","join","s","i","v","toUpperCase","M","m","min","C","V","S","H","toHSL","L","hsl","A","R","G","B","f","p","q","t","hue2RGB","module","exports"],"mappings":"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","file":"js/RGBA.min.js","sourcesContent":["/**\n * Class to represent an RGBA colour, and convert to/from other\n * representations\n */\n/* global module */\n\n/* Table of HTMl colour names and their RGB values */\nconst CSSColours = {\n    aliceblue: \"#F0F8FF\",\n    antiquewhite: \"#FAEBD7\",\n    aqua: \"#00FFFF\",\n    aquamarine: \"#7FFFD4\",\n    azure: \"#F0FFFF\",\n    beige: \"#F5F5DC\",\n    bisque: \"#FFE4C4\",\n    black: \"#000000\",\n    blanchedalmond: \"#FFEBCD\",\n    blue: \"#0000FF\",\n    blueviolet: \"#8A2BE2\",\n    brown: \"#A52A2A\",\n    burlywood: \"#DEB887\",\n    cadetblue: \"#5F9EA0\",\n    chartreuse: \"#7FFF00\",\n    chocolate: \"#D2691E\",\n    coral: \"#FF7F50\",\n    cornflowerblue: \"#6495ED\",\n    cornsilk: \"#FFF8DC\",\n    crimson: \"#DC143C\",\n    cyan: \"#00FFFF\",\n    darkblue: \"#00008B\",\n    darkcyan: \"#008B8B\",\n    darkgoldenrod: \"#B8860B\",\n    darkgray: \"#A9A9A9\",\n    darkgrey: \"#A9A9A9\",\n    darkgreen: \"#006400\",\n    darkkhaki: \"#BDB76B\",\n    darkmagenta: \"#8B008B\",\n    darkolivegreen: \"#556B2F\",\n    darkorange: \"#FF8C00\",\n    darkorchid: \"#9932CC\",\n    darkred: \"#8B0000\",\n    darksalmon: \"#E9967A\",\n    darkseagreen: \"#8FBC8F\",\n    darkslateblue: \"#483D8B\",\n    darkslategray: \"#2F4F4F\",\n    darkslategrey: \"#2F4F4F\",\n    darkturquoise: \"#00CED1\",\n    darkviolet: \"#9400D3\",\n    deeppink: \"#FF1493\",\n    deepskyblue: \"#00BFFF\",\n    dimgray: \"#696969\",\n    dimgrey: \"#696969\",\n    dodgerblue: \"#1E90FF\",\n    firebrick: \"#B22222\",\n    floralwhite: \"#FFFAF0\",\n    forestgreen: \"#228B22\",\n    fuchsia: \"#FF00FF\",\n    gainsboro: \"#DCDCDC\",\n    ghostwhite: \"#F8F8FF\",\n    gold: \"#FFD700\",\n    goldenrod: \"#DAA520\",\n    gray: \"#808080\",\n    grey: \"#808080\",\n    green: \"#008000\",\n    greenyellow: \"#ADFF2F\",\n    honeydew: \"#F0FFF0\",\n    hotpink: \"#FF69B4\",\n    indianred: \"#CD5C5C\",\n    indigo: \"#4B0082\",\n    ivory: \"#FFFFF0\",\n    khaki: \"#F0E68C\",\n    lavender: \"#E6E6FA\",\n    lavenderblush: \"#FFF0F5\",\n    lawngreen: \"#7CFC00\",\n    lemonchiffon: \"#FFFACD\",\n    lightblue: \"#ADD8E6\",\n    lightcoral: \"#F08080\",\n    lightcyan: \"#E0FFFF\",\n    lightgoldenrodyellow: \"#FAFAD2\",\n    lightgray: \"#D3D3D3\",\n    lightgrey: \"#D3D3D3\",\n    lightgreen: \"#90EE90\",\n    lightpink: \"#FFB6C1\",\n    lightsalmon: \"#FFA07A\",\n    lightseagreen: \"#20B2AA\",\n    lightskyblue: \"#87CEFA\",\n    lightslategray: \"#778899\",\n    lightslategrey: \"#778899\",\n    lightsteelblue: \"#B0C4DE\",\n    lightyellow: \"#FFFFE0\",\n    lime: \"#00FF00\",\n    limegreen: \"#32CD32\",\n    linen: \"#FAF0E6\",\n    magenta: \"#FF00FF\",\n    maroon: \"#800000\",\n    mediumaquamarine: \"#66CDAA\",\n    mediumblue: \"#0000CD\",\n    mediumorchid: \"#BA55D3\",\n    mediumpurple: \"#9370DB\",\n    mediumseagreen: \"#3CB371\",\n    mediumslateblue: \"#7B68EE\",\n    mediumspringgreen: \"#00FA9A\",\n    mediumturquoise: \"#48D1CC\",\n    mediumvioletred: \"#C71585\",\n    midnightblue: \"#191970\",\n    mintcream: \"#F5FFFA\",\n    mistyrose: \"#FFE4E1\",\n    moccasin: \"#FFE4B5\",\n    navajowhite: \"#FFDEAD\",\n    navy: \"#000080\",\n    oldlace: \"#FDF5E6\",\n    olive: \"#808000\",\n    olivedrab: \"#6B8E23\",\n    orange: \"#FFA500\",\n    orangered: \"#FF4500\",\n    orchid: \"#DA70D6\",\n    palegoldenrod: \"#EEE8AA\",\n    palegreen: \"#98FB98\",\n    paleturquoise: \"#AFEEEE\",\n    palevioletred: \"#DB7093\",\n    papayawhip: \"#FFEFD5\",\n    peachpuff: \"#FFDAB9\",\n    peru: \"#CD853F\",\n    pink: \"#FFC0CB\",\n    plum: \"#DDA0DD\",\n    powderblue: \"#B0E0E6\",\n    purple: \"#800080\",\n    rebeccapurple: \"#663399\",\n    red: \"#FF0000\",\n    rosybrown: \"#BC8F8F\",\n    royalblue: \"#4169E1\",\n    saddlebrown: \"#8B4513\",\n    salmon: \"#FA8072\",\n    sandybrown: \"#F4A460\",\n    seagreen: \"#2E8B57\",\n    seashell: \"#FFF5EE\",\n    sienna: \"#A0522D\",\n    silver: \"#C0C0C0\",\n    skyblue: \"#87CEEB\",\n    slateblue: \"#6A5ACD\",\n    slategray: \"#708090\",\n    slategrey: \"#708090\",\n    snow: \"#FFFAFA\",\n    springgreen: \"#00FF7F\",\n    steelblue: \"#4682B4\",\n    tan: \"#D2B48C\",\n    teal: \"#008080\",\n    thistle: \"#D8BFD8\",\n    tomato: \"#FF6347\",\n    turquoise: \"#40E0D0\",\n    violet: \"#EE82EE\",\n    wheat: \"#F5DEB3\",\n    white: \"#FFFFFF\",\n    whitesmoke: \"#F5F5F5\",\n    yellow: \"#FFFF00\",\n    yellowgreen: \"#9ACD32\"\n};\n\n/**\n * Parse a colour string (colour name, #, rgb, rgba, hsl or hsla value)\n * to an RGBA tuple.\n * @param r a number (requires g and b if it is) or a CSS colour string\n * @param g a number (if r is defined and is a number)\n * @param b a number (if r is defined and is a number)\n * @param a a number (if r is defined and is a number)\n */\nfunction RGBA(r, g, b, a) {   \n    \"use strict\";\n\n    function parseComponent(value, max) {\n        if (/%\\s*$/.test(value)) {\n            var pc = parseFloat(value);\n            return pc * max / 100.0;\n        }\n        return parseFloat(value);\n    }\n\n    if (arguments.length === 1) {\n        if (typeof r !== \"string\") {\n            if (r.constructor.name === \"Array\") {\n                this.r = r[0];\n                this.g = r[1];\n                this.b = r[2];\n                this.a = r[3];\n            } else if (typeof r.r === \"number\" &&\n                       typeof r.g === \"number\" &&\n                       typeof r.b === \"number\") {\n                this.r = r.r;\n                this.g = r.g;\n                this.b = r.b;\n                this.a = r.a;\n            } else\n                throw \"Don't know how to make an RGBA from this\";\n            return;\n        }\n    } else {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n        return;\n    }\n\n    // String or integer RGB value\n    if (typeof r === \"string\") {\n\n        var named = CSSColours[r.toLowerCase()];\n        if (typeof named !== \"undefined\")\n            r = named;\n\n        if (r.charAt(0) == \"#\") {\n            this.r = parseInt(r.substr(1,2), 16) / 255.0;\n            this.g = parseInt(r.substr(3,2), 16) / 255.0;\n            this.b = parseInt(r.substr(5,2), 16) / 255.0;\n            return;\n        }\n\n        if (/^hsla?\\(.*\\)$/.test(r)) {\n            a = r.replace(/(hsla?\\(|\\))/g,\"\").split(/[,\\s]+/);\n            var n = RGBA.fromHSL(\n                parseComponent(a[0], 360),\n                parseComponent(a[1], 1),\n                parseComponent(a[2], 1),\n                a.length > 3 ? parseComponent(a[3], 1) : undefined\n            );\n            this.r = n.r;\n            this.g = n.g;\n            this.b = n.b;\n            this.a = n.a;\n            return;\n        }\n            \n        if (/^rgba?\\(.*\\)$/.test(r)) {\n            a = r.replace(/(rgba?\\(|\\))/g,\"\").split(\",\");\n            this.r = Math.floor(parseComponent(a[0], 255)) / 255;\n            this.g = Math.floor(parseComponent(a[1], 255)) / 255;\n            this.b = Math.floor(parseComponent(a[2], 255)) / 255;\n            if (a.length > 3) this.a = parseComponent(a[3], 1);\n            return;\n        }\n    }\n\n    if (typeof r === \"object\" && r.constructor.name === \"RGBA\")\n        jQuery.extend(this, r);\n\n    throw \"Cannot construct from \" + (typeof r);\n}\n\n/**\n * Crude RGB inversion - simply invert the colour components\n */\nRGBA.prototype.inverse = function() {\n    \"use strict\";\n    return new RGBA(1 - this.r, 1 - this.g, 1 - this.b, this.a);\n}\n\n/**\n * More sophisticated HSV complement\n */\nRGBA.prototype.complement = function() {\n    \"use strict\";\n    var hsv = this.toHSV();\n    return RGBA.fromHSV((hsv[0] + 180) % 360, hsv[1], hsv[2], this.a);\n};\n\n/**\n * Find the approximate brightness of an RGBA colour in the range 0..1\n * Anything above 0.65 is closer to white, below that to black\n * @see https://en.wikipedia.org/wiki/HSL_and_HSV\n */\nRGBA.prototype.luma = function() {\n    \"use strict\";\n    // SMPTE C, Rec. 709 weightings\n    return (0.2126 * this.r) + (0.7152 * this.g) + (0.0722 * this.b);\n};\n\n/**\n * Generate a CSS string for the colour. CSS colour string is\n * used if there is no A, a css rgba() otherwise.\n */\nRGBA.prototype.toString = function() {\n    \"use strict\";\n\n    var tuple = [ Math.round(255 * this.r),\n                  Math.round(255 * this.g),\n                  Math.round(255 * this.b) ];\n\n    if (typeof this.a !== \"undefined\") {\n        tuple.push(this.a);\n        return \"rgba(\" + tuple.join(',') + \")\";\n    } else {\n        var s = \"#\";\n        for (var i = 0; i < 3; i++) {\n            var v = tuple[i].toString(16);\n            s += v.length == 1 ? \"0\" + v : v;\n        }\n        return s.toUpperCase();\n    }\n};\n\n/**\n * Generate an HSV[A] value as a [ H, S, V, A ]\n * e.g. var hsv = new RGBA(\"blue\").toHSV()\n * @see https://en.wikipedia.org/wiki/HSL_and_HSV\n * @return [ hue (0..360), saturation (0..1), value (0..1) ]\n */\nRGBA.prototype.toHSV = function() {\n    \"use strict\";\n\n    var M = Math.max(this.r, this.g, this.b);\n    var m = Math.min(this.r, this.g, this.b);\n    var C = M - m; // saturation / chroma\n    var V = M;\n    var S = (V == 0) ? 0 : (C / V); // sat (= chroma)\n    var H = 0;\n    \n    if (C != 0) {\n        // not achromatic, calculate hue\n        if (this.r === M)\n            H = 60 * (((this.g - this.b) / C) % 6);\n        else if (this.g === M)\n            H = 60 * ((this.b - this.r) / C + 2);\n        else\n            H = 60 * ((this.r - this.g) / C + 4);\n        \n        if (H < 0)\n            H += 360;\n    }\n\n    var hsv = [ H, S, V ];\n    \n    if (typeof this.a != \"undefined\")\n        hsv.push(this.a);\n\n    return hsv;\n}\n\n/**\n * Generate an HSL[A] value as a [ H, S, L, A ]\n * e.g. var hsl = new RGBA(\"blue\").toHSL()\n * @see https://en.wikipedia.org/wiki/HSL_and_HSV\n * @return [ hue (0..360), saturation (0..1), lightness (0..1) ]\n */\nRGBA.prototype.toHSL = function() {\n    \"use strict\";\n\n    var M = Math.max(this.r, this.g, this.b);\n    var m = Math.min(this.r, this.g, this.b);\n    var C = M - m; // saturation / chroma\n    var H, S, L;\n    \n    if (C == 0) { // achromatic\n        H = S = 0;\n        L = M;\n    } else {\n        L = (M + m) / 2;\n        S = C / (L > 0.5 ? (2 - M - m) : (M + m));\n    }\n\n    if (C != 0) {\n        // not achromatic, calculate hue\n        if (this.r === M)\n            H = 60 * (((this.g - this.b) / C) % 6);\n        else if (this.g === M)\n            H = 60 * ((this.b - this.r) / C + 2);\n        else\n            H = 60 * ((this.r - this.g) / C + 4);\n        \n        if (H < 0)\n            H += 360;\n    }\n\n    var hsl = [ H, S, L ];\n    \n    if (typeof this.a != \"undefined\")\n        hsl.push(this.a);\n\n    return hsl;\n}\n\n/**\n * Generate a new Colour from HSV[A]. H, S, V [, A] can be passed directly\n * or H will be assumed to be a tuple if S is undefined.\n */\nRGBA.fromHSV = function(H, S, V, A) {\n    \"use strict\";\n\n    var R, G, B;\n\n    if (arguments.length === 1) {\n        A = H[3];\n        V = H[2];\n        S = H[1];\n        H = H[0];\n    }\n    \n    if (S == 0) {\n        R = G = B = V; // achromatic\n\n    } else {\n        H /= 60;\n        var i = Math.floor(H);\n        var f = H - i;\n        var p = V * (1 - S);\n        var q = V * (1 - S * f);\n        var t = V * (1 - S * (1 - f));\n        switch (i) {\n        case 0: R = V; G = t; B = p; break;\n        case 1: R = q; G = V; B = p; break;\n        case 2: R = p; G = V; B = t; break;\n        case 3: R = p; G = q; B = V; break;\n        case 4: R = t; G = p; B = V; break;\n        default: R = V; G = p; B = q;\n        }\n    }\n\n    return new RGBA(R, G, B, A);\n};\n\n/**\n * Generate a new Colour from HSL. H, S, L [, A] can be passed directly\n * or H can be a tuple.\n */\nRGBA.fromHSL = function(H, S, L, A) {\n    \"use strict\";\n\n    function hue2RGB(p, q, t){\n        if (t < 0) t += 1;\n        if (t > 1) t -= 1;\n        if (t < 1/6) return p + (q - p) * 6 * t;\n        if (t < 1/2) return q;\n        if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n        return p;\n    }\n\n    var R, G, B;\n\n    if (arguments.length === 1) {\n        A = H[3];\n        L = H[2];\n        S = H[1];\n        H = H[0];\n    }\n\n    if (S == 0) {\n        R = G = B = L; // achromatic\n\n    } else {\n        H /= 360;\n        var q = L < 0.5 ? L * (1 + S) :\n            L + S - L * S;\n        var p = 2 * L - q;\n        R = hue2RGB(p, q, H + 1/3);\n        G = hue2RGB(p, q, H);\n        B = hue2RGB(p, q, H - 1/3);\n\n    }\n\n    return new RGBA(R, G, B, A);\n};\n\nif (typeof module !== \"undefined\")\n    module.exports = RGBA;\n"]}