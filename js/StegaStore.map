{"version":3,"sources":["js/StegaStore.js"],"names":["StegaStore","params","LayeredStore","call","this","prototype","Object","create","options","$","extend","needs_image","read","path","ok","fail","DEBUG","console","debug","self","extract","ab2","steg","Steganographer","e","engine","ab","datauri","Utils","ArrayBufferToBase64","attr","on","off","write","data","image","document","getElementById","xdata","canvas","inject","toDataURL","b64","split","Base64ToArrayBuffer"],"mappings":";AAiBA,QAASA,YAAWC,QAChB,YAEAC,cAAaC,KAAKC,KAAMH,QAG5BD,WAAWK,UAAYC,OAAOC,OAAOL,aAAaG,WAElDL,WAAWK,UAAUG,QAAU,WAC3B,YACA,OAAOC,GAAEC,OACLR,aAAaG,UAAUG,QAAQL,KAAKC,OAEhCO,aAAa,KAIzBX,WAAWK,UAAUO,KAAO,SAASC,KAAMC,GAAIC,MAC3C,YAEIC,QAAOC,QAAQC,MAAM,uBAAyBL,KAClD,IAAIM,MAAOf,KACPgB,QAAU,WACV,GACIC,KADAC,KAAO,GAAIC,gBAAed,EAAE,cAAc,GAE9C,KACIY,IAAMC,KAAKF,UACb,MAAOI,GAGL,MAFIR,QAAOC,QAAQC,MAAM,UAAYM,OACrCT,MAAKZ,KAAKgB,KAAMK,GAIpBV,GAAGX,KAAKgB,KAAME,KAGlBjB,MAAKqB,OAAOb,KACRC,KACA,SAASa,IAEL,GAAIC,SAAU,yBACRC,MAAMC,oBAAoBH,GAE5BC,WAAYlB,EAAE,cAAcqB,KAAK,OACjCrB,EAAE,cACGqB,KAAK,MAAOH,SACZI,GAAG,OAAQ,WACRtB,EAAEL,MAAM4B,IAAI,QACZZ,YAGRA,WAGRL,OAGRf,WAAWK,UAAU4B,MAAQ,SAASpB,KAAMqB,KAAMpB,GAAIC,MAClD,YAEIC,QAAOC,QAAQC,MAAM,uBAAyBL,KAElD,IAAIM,MAAOf,KACP+B,MAAQC,SAASC,eAAe,YACpC,KAAKF,MACD,KAAM,eACV,IAAIG,OACAhB,KAAO,GAAIC,gBAAeY,MAE9B,KACI,GAAII,QAASjB,KAAKkB,OAAON,MAAM,GAG3BP,QAAUY,OAAOE,YACjBC,IAAMf,QAAQgB,MAAM,IAAK,GAAG,EAChCL,OAAQV,MAAMgB,oBAAoBF,KACpC,MAAOlB,GAGL,MAFIR,QAAOC,QAAQC,MAAM,UAAYM,OACrCT,MAAKZ,KAAKC,KAAMoB,GAIpBL,KAAKM,OAAOQ,MACRpB,KACAyB,MACA,WACIxB,GAAGX,KAAKgB,OAEZJ","file":"js/StegaStore.min.js","sourcesContent":["/*@preserve Copyright (C) 2015 Crawford Currie http://c-dot.co.uk license MIT*/\n\n/* global DEBUG */\n/* global LayeredStore */\n/* global Steganographer */\n/* global Utils */\n\n/**\n * @class\n * Store engine for data embedded in the alpha channel of an image. Uses\n * an underlying engine to actually store the image data.\n *\n * Requires JQuery and a DOM IMG with id \"stegamage\"\n *\n * @param params: Standard for LayeredStore\n * @implements LayeredStore\n */\nfunction StegaStore(params) {\n    \"use strict\";\n\n    LayeredStore.call(this, params);\n}\n\nStegaStore.prototype = Object.create(LayeredStore.prototype);\n\nStegaStore.prototype.options = function() {\n    \"use strict\";\n    return $.extend(\n        LayeredStore.prototype.options.call(this),\n        {\n            needs_image: true\n        });\n};\n\nStegaStore.prototype.read = function(path, ok, fail) {\n    \"use strict\";\n\n    if (DEBUG) console.debug(\"StegaStore: reading \" + path);\n    var self = this;\n    var extract = function() {\n        var steg = new Steganographer($(\"#stegamage\")[0]);\n        var ab2;\n        try {\n            ab2 = steg.extract();\n        } catch (e) {\n            if (DEBUG) console.debug(\"Caught \" + e);\n            fail.call(self, e);\n            return;\n        }\n                        \n        ok.call(self, ab2);\n    };\n\n    this.engine.read(\n        path,\n        function(ab) {\n            // Make a data-URI\n            var datauri = \"data:image/png;base64,\"\n                + Utils.ArrayBufferToBase64(ab);\n            // if the image has changed, wait for it to reload\n            if (datauri !== $(\"#stegamage\").attr(\"src\")) {\n                $(\"#stegamage\")\n                    .attr(\"src\", datauri)\n                    .on(\"load\", function() {\n                        $(this).off(\"load\");\n                        extract();\n                    });\n            } else {\n                extract();\n            }\n        },\n        fail);\n};\n\nStegaStore.prototype.write = function(path, data, ok, fail) {\n    \"use strict\";\n\n    if (DEBUG) console.debug(\"StegaStore: writing \" + path);\n\n    var self = this;\n    var image = document.getElementById(\"stegamage\");\n    if (!image)\n        throw \"no #stegamage\";\n    var xdata;\n    var steg = new Steganographer(image);\n\n    try {\n        var canvas = steg.inject(data, true);\n        // Get the bit data as an ArrayBuffer\n        // Bit convoluted, but can't see another way to do it\n        var datauri = canvas.toDataURL();\n        var b64 = datauri.split(\",\", 2)[1];\n        xdata = Utils.Base64ToArrayBuffer(b64);\n    } catch (e) {\n        if (DEBUG) console.debug(\"Caught \" + e);\n        fail.call(this, e);\n        return;\n    }\n\n    self.engine.write(\n        path,\n        xdata,\n        function() {\n            ok.call(self);\n        },\n        fail);\n};\n"]}