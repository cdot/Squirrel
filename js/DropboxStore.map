{"version":3,"sources":["js/DropboxStore.js"],"names":["DropboxStore","params","self","this","Dropbox","Client","key","APP_KEY","authenticate","error","client","DEBUG","console","debug","fail","responseText","getAccountInfo","erm","accountInfo","err","status","call","name","db_client","user","AbstractStore","SQUIRREL_STORE","prototype","Object","create","options","$","extend","needs_path","identifier","write","path","data","ok","writeFile","read","readFile","arrayBuffer","ApiError","NOT_FOUND","NODATA"],"mappings":";AAcA,QAASA,cAAaC,QAClB,YAEA,IAAIC,MAAOC,IACX,IAAIC,SAAQC,QACRC,IAAKC,UACNC,aAAa,SAASC,MAAOC,QACxBD,OACIE,OAAOC,QAAQC,MAAM,wBAA0BJ,OACnDR,OAAOa,KAAKZ,KAAMO,MAAMM,gBAEpBJ,OAAOC,QAAQC,MAAM,mBAEzBH,OAAOM,eACH,KACA,SAASC,IAAKC,aACV,GAAID,IAAK,CACL,GAAIE,KAAMF,IAAIF,cACP,WAAaN,MAAMW,MACtBT,QAAOC,QAAQC,MACf,iCAAmCM,KACvClB,OAAOa,KAAKO,KAAKnB,KAAMiB,SAEnBR,QAAOC,QAAQC,MACf,oBAAsBK,YAAYI,MACtCpB,KAAKqB,UAAYb,OACjBR,KAAKsB,KAAKN,YAAYI,MACtBG,cAAcJ,KAAKnB,KAAMD,aA7BjD,KAAMM,SAAU,iBAoChBmB,gBAAiB1B,aAEjBA,aAAa2B,UAAYC,OAAOC,OAAOJ,cAAcE,WAErD3B,aAAa2B,UAAUG,QAAU,WAC7B,YACA,OAAOC,GAAEC,OAAOP,cAAcE,UAAUG,WACpCG,YAAY,EACZC,WAAY,aAIpBlC,aAAa2B,UAAUQ,MAAQ,SAASC,KAAMC,KAAMC,GAAIxB,MACpD,YAEA,IAAIZ,MAAOC,IAEXA,MAAKoB,UAAUgB,UACXH,KACAC,KACA,SAAS5B,OACDA,OACIE,OAAOC,QAAQC,MACf,wBAA0BJ,MAAMM,cACpCD,KAAKO,KAAKnB,KAAMO,MAAMM,cAAgBN,MAAMW,SAE5CkB,GAAGjB,KAAKnB,KAAMA,KAAKmC,SAKnCrC,aAAa2B,UAAUa,KAAO,SAASJ,KAAME,GAAIxB,MAC7C,YAEA,IAAIZ,MAAOC,IAEXA,MAAKoB,UAAUkB,SACXL,MACEM,aAAa,GACf,SAASjC,MAAO4B,MACR5B,OACIE,OAAOC,QAAQC,MACf,uBACMJ,MAAMM,cACZN,MAAMW,SAAWhB,QAAQuC,SAASC,UAClC9B,KAAKO,KAAKnB,KAAMuB,cAAcoB,QAE9B/B,KAAKO,KAAKnB,KAAMO,MAAMM,eAE3BuB,GAAGjB,KAAKnB,KAAMmC","file":"js/DropboxStore.min.js","sourcesContent":["/*@preserve Copyright (C) 2015 Crawford Currie http://c-dot.co.uk license MIT*/\n\n/* global DEBUG */\n/* global AbstractStore */\n/* global Dropbox */\n/* global SQUIRREL_STORE:true */\n\n/**\n * A store using Dropbox\n * requires //cdnjs.cloudflare.com/ajax/libs/dropbox.js/2.5.12/Dropbox-sdk.min.js or equivalent\n * @implements AbstractStore\n */\nconst APP_KEY = \"37tzcd7ezkaqovy\";\n\nfunction DropboxStore(params) {\n    \"use strict\";\n\n    var self = this;\n    new Dropbox.Client({\n        key: APP_KEY\n    }).authenticate(function(error, client) {\n        if (error) {\n            if (DEBUG) console.debug(\"Dropbox auth failed: \" + error);\n            params.fail(self, error.responseText);\n        } else {\n            if (DEBUG) console.debug(\"Dropbox auth OK\");\n\n            client.getAccountInfo(\n                null,\n                function(erm, accountInfo) {\n                    if (erm) {\n                        var err = erm.responseText\n                            || \"Status: \" + error.status;\n                        if (DEBUG) console.debug(\n                            \"Dropbox getAccountInfo failed \" + err);\n                        params.fail.call(self, err);\n                    } else {\n                        if (DEBUG) console.debug(\n                            \"Dropbox username \" + accountInfo.name);\n                        self.db_client = client;\n                        self.user(accountInfo.name);\n                        AbstractStore.call(self, params);\n                    }\n                });\n        }\n    });\n}\n\nSQUIRREL_STORE = DropboxStore;\n\nDropboxStore.prototype = Object.create(AbstractStore.prototype);\n\nDropboxStore.prototype.options = function() {\n    \"use strict\";\n    return $.extend(AbstractStore.prototype.options(), {\n        needs_path: true,\n        identifier: \"Dropbox\"\n    });\n};\n\nDropboxStore.prototype.write = function(path, data, ok, fail) {\n    \"use strict\";\n\n    var self = this;\n\n    this.db_client.writeFile(\n        path,\n        data,\n        function(error/*, stat*/) {\n            if (error) {\n                if (DEBUG) console.debug(\n                    \"Dropbox write failed \" + error.responseText);\n                fail.call(self, error.responseText || error.status);\n            } else {\n                ok.call(self, self.data);\n            }\n        });\n};\n\nDropboxStore.prototype.read = function(path, ok, fail) {\n    \"use strict\";\n\n    var self = this;\n\n    this.db_client.readFile(\n        path, \n        { arrayBuffer: true },\n        function(error, data) {\n            if (error) {\n                if (DEBUG) console.debug(\n                    \"Dropbox read failed \"\n                        + error.responseText);\n                if (error.status === Dropbox.ApiError.NOT_FOUND)\n                    fail.call(self, AbstractStore.NODATA);\n                else\n                    fail.call(self, error.responseText);\n            } else {\n               ok.call(self, data);\n            }\n        });\n};\n"]}